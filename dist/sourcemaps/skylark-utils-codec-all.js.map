{"version":3,"sources":["skylark-utils-codec-all.js"],"names":["define","class2type","toString","type","split","forEach","name","toLowerCase","obj","String","call","isEmptyObject","isFunction","value","isHtmlNode","Node","isObject","isString","isWindow","window","isArray","object","constructor","Array","isArrayLike","length","isBoolean","isDefined","isDocument","nodeType","DOCUMENT_NODE","isEmpty","isNull","isNumber","isPlainObject","Object","getPrototypeOf","prototype","isSameOrigin","href","origin","location","protocol","hostname","port","startsWith","isSymbol","isObjectLike","objectToString","symbolTag","isUndefined","undefined","types","objects","filter","baseFindIndex","array","predicate","fromIndex","fromRight","index","baseIsNaN","flatten","result","i","item","j","push","baseIndexOf","compact","first","items","n","slice","inArray","indexOf","makeArray","offset","startWith","concat","map","elements","callback","key","values","uniq","idx","INFINITY","MAX_INTEGER","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toFinite","toNumber","sign","other","valueOf","replace","isBinary","test","toInteger","remainder","numbers","eq","deepEq","hasOwnProperty","keysFunc","defaults","SymbolProto","Symbol","allKeys","keys","has","path","_mixin","target","source","deep","safe","_parseMixinArgs","args","params","arguments","shift","pop","sources","mixin","apply","this","_","a","b","aStack","bStack","className","areArrays","aCtor","bCtor","clone","src","checkCloneMethod","copy","l","each","undef","extend","arg","isEqual","includes","collection","guard","nativeMax","isMatch","attrs","removeItem","splice","fallback","prop","safeMixin","arrays","createClass","_constructor","_construct","init","props","parent","mixins","options","innerParent","ctor","Error","clss","unshift","superclass","cls","clsMixines","serialMixins","newCtor","xtor","Function","create","__proto__","__mixin__","mergeMixins","klassName","__mixins__","partial","proto","_super","noOverrided","overrides","fn","superFn","tmp","overrided","ret","defineProperty","extendClass","inherit","f1","klass","QueryResults","results","isPromise","then","addIterativeMethod","method","Deferred","when","delegate","total","ArrayStore","queryEngine","query","queryObject","required","execute","arr","thisObject","out","cache","buildFn","sortSet","sort","aValue","attribute","bValue","descending","start","count","Infinity","matches","idProperty","get","id","data","getIdentity","put","Math","random","overwrite","add","remove","setData","identifier","nextId","aspect","methodName","advice","receiveArguments","dispatcher","existing","executionId","before","next","around","after","newResults","signal","previous","advised","advise","TMP","debounce","wait","timeout","context","clearTimeout","setTimeout","defer","requestAnimationFrame","setTimeoutout","noop","proxy","TypeError","returnTrue","returnFalse","funcs","PGLISTENERS","PGNOTIFIES","Promise","always","handler","done","fail","catch","self","p","promise","resolve","reject","_resolve","_reject","wrapPromise","d","added","state","isResolved","isRejected","onResolved","onRejected","onProgress","progress","__ctx__","pipe","resolveWith","_resolved","notify","listener","error","reason","rejectWith","_rejected","errback","progback","all","bind","race","valueOrPromise","receivedPromise","nativePromise","deferred","cancel","err","immediate","async","parallel","ctx","rets","func","series","waterful","parseMilliSeconds","str","strs","number","isNaN","trim","Evented","on","events","selector","one","_hub","trigger","e","CustomEvent","eventName","listeners","len","reCompact","listened","event","evtArr","_events","listenTo","listening","listeningTo","_listeningTo","listeningEvents","listeningEvent","listenToOnce","off","evts","liveEvents","unlistenTo","idCounter","camelCase","toUpperCase","dasherize","deserializeValue","JSON","parse","lowerFirst","charAt","serializeValue","stringify","substitute","template","transform","getObject","match","retVal","getValue","_k","reverse","v","format","uniqueId","prefix","upperFirst","getAbsoluteUrl","url","document","createElement","Xhr","jsonpID","rscript","scriptTypeRE","xmlTypeRE","jsonType","htmlType","blankRE","XhrDefaultOptions","beforeSend","success","complete","global","accepts","script","json","xml","html","text","crossDomain","processData","xhrFields","withCredentials","mimeToDataType","mime","appendQuery","serializeData","param","traditional","serialize","scope","t","hash","escape","join","_request","xhr","XMLHttpRequest","dataType","handleAs","mimeType","headers","isFormData","FormData","basicAuthorizationToken","user","password","contentType","overrideMimeType","finish","onloadend","onabort","onprogress","ontimeout","status","getResponseHeader","responseText","eval","responseXML","Blob","xhrObj","response","reponse","statusText","evt","open","hdr","setRequestHeader","send","abort","request","post","patch","del","defaultOptions","strings","Restful","idAttribute","getBaseUrl","baseEndpoint","baseUrl","server","basePath","_head","_get","_post","verb","_put","_delete","_patch","retrieve","update","delete","Stateful","attributes","cid","cidPrefix","set","changed","validationError","toJSON","attr","val","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","_pending","clear","hasChanged","changedAttributes","diff","old","previousAttributes","isNew","isValid","validate","skylark","datetimes","_uid","langx","createEvent","funcArg","payload","getQueryParams","segs","queryParam","nv","toPixel","parseFloat","uid","URL","webkitURL","codec","base64","tab","encode","ba","s","rm","x","decode","streams","Stream","DecodeStream","arrayBuffer","dict","bytes","Uint8Array","pos","end","getByte","getBytes","strEnd","subarray","lookChar","fromCharCode","getChar","skip","reset","moveStart","makeSubStream","buffer","isStream","bufferLength","eof","ensureBuffer","requested","byteLength","size","buffer2","readBlock","bufEnd","stream","QeTable","qe","nmps","nlps","switchFlag","ArithmeticDecoder","byteIn","bp","b1","clow","ct","dataEnd","chigh","readBit","contexts","cx_index","cx_mps","qeTableIcx","qeIcx","nmpsIcx","nlpsIcx","switchIcx","ContextCache","getContexts","Int8Array","DecodingContext","decoder","shadow","contextCache","decodeInteger","procedure","toRead","bit","decodeIAID","codeLength","pow","SegmentTypes","CodingTemplates","y","RefinementTemplates","coding","reference","ReusedContexts","RefinementReusedContexts","log2","readInt32","readUint32","readUint16","readInt8","decodeBitmap","mmr","width","height","templateIndex","prediction","at","decodingContext","useskip","templateLength","templateX","Int32Array","templateY","k","pseudoPixelContext","bitmap","ltp","sltp","row","contextLabel","i0","j0","pixel","decodeRefinement","referenceBitmap","offsetX","offsetY","codingTemplate","codingTemplateLength","codingTemplateX","codingTemplateY","referenceTemplate","referenceTemplateLength","referenceTemplateX","referenceTemplateY","referenceWidth","referenceHeight","readSegmentHeader","segmentHeader","flags","segmentType","typeName","deferredNonRetain","pageAssociationFieldSize","referredFlags","referredToCount","retainBits","position","referredToSegmentNumberSize","referredTo","pageAssociation","genericRegionInfo","readRegionSegmentInformation","genericRegionSegmentFlags","RegionSegmentInformationFieldLength","genericRegionMmr","searchPattern","ii","headerEnd","readSegments","header","segments","segment","randomAccess","combinationOperator","processSegment","visitor","dictionary","dictionaryFlags","huffman","refinement","huffmanDHSelector","huffmanDWSelector","bitmapSizeSelector","aggregationInstancesSelector","bitmapCodingContextUsed","bitmapCodingContextRetained","refinementTemplate","atLength","refinementAt","numberOfExportedSymbols","numberOfNewSymbols","textRegion","info","textRegionSegmentFlags","stripSize","referenceCorner","transposed","defaultPixelValue","dsOffset","textRegionHuffmanFlags","huffmanFS","huffmanDS","huffmanDT","huffmanRefinementDW","huffmanRefinementDH","huffmanRefinementDX","huffmanRefinementDY","huffmanRefinementSizeSelector","numberOfSymbolInstances","genericRegion","pageInfo","resolutionX","resolutionY","pageSegmentFlags","lossless","requiresBuffer","combinationOperatorOverride","callbackName","processSegments","SimpleSegmentVisitor","onPageInformation","currentPageInfo","rowSize","fill","drawBitmap","regionInfo","mask","onImmediateGenericRegion","region","onImmediateLosslessGenericRegion","onSymbolDictionary","currentSegment","referredSegments","symbols","inputSymbols","huffmanTables","refinementTemplateIndex","newSymbols","currentHeight","symbolCodeLength","deltaHeight","currentWidth","deltaWidth","numberOfInstances","symbolId","rdx","rdy","symbol","exportedSymbols","currentFlag","totalSymbolsLength","runLength","decodeSymbolDictionary","onImmediateTextRegion","stripT","firstS","deltaT","deltaFirstS","currentS","currentT","applyRefinement","symbolBitmap","symbolWidth","symbolHeight","rdw","rdh","offsetT","offsetS","s2","symbolRow","maxWidth","min","t2","deltaS","decodeTextRegion","onImmediateLosslessTextRegion","Jbig2Image","parseChunks","chunks","chunk","parseJbig2Chunks","Jbig2Stream","req","jbig2Image","decodeParams","globalsStream","globals","dataLength","jbig2","dctZigZag","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","buildHuffmanTable","codeLengths","code","children","q","getBlockBufferOffset","component","col","blocksPerLine","decodeScan","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","precision","samplesPerLine","scanLines","mcusPerLine","progressive","startOffset","maxH","maxV","bitsData","bitsCount","nextByte","decodeHuffman","tree","node","receive","receiveAndExtend","eobrun","successiveACNextValue","successiveACState","decodeMcu","mcu","mcuRow","mcuCol","blockRow","blockCol","h","decodeBlock","decodeFn","componentsLength","huffmanTableDC","blockData","pred","rs","huffmanTableAC","r","z","marker","mcuExpected","blocksPerColumn","mcusPerColumn","quantizeAndInverse","blockBufferOffset","v0","v1","v2","v3","v4","v5","v6","v7","p0","p1","p2","p3","p4","p5","p6","p7","qt","quantizationTable","buildComponentData","computationBuffer","Int16Array","clamp0to255","JpegImage","readDataBlock","prepareComponents","ceil","blocksPerLineForMcu","blocksPerColumnForMcu","blocksBufferSize","jfif","adobe","quantizationTables","huffmanTablesAC","huffmanTablesDC","fileMarker","appData","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesLength","quantizationTablesEnd","quantizationTableSpec","tableData","Uint16Array","extended","componentIds","componentId","componentsCount","qId","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","componentIndex","tableSpec","successiveApproximation","processed","output","scaleX","scaleY","numComponents","_getLinearizedBlockData","componentScaleX","componentScaleY","blocksPerScanline","xScaleBlockOffset","Uint32Array","decodeTransform","_isColorConversionNeeded","_convertYccToRgb","Y","Cb","Cr","_convertYcckToRgb","g","_convertYcckToCmyk","_convertCmykToRgb","c","m","getData","forceRGBoutput","JpegStream","xref","isAdobeImage","colorTransform","maxBytesScanned","max","embedMarker","newBytes","fixAdobeImage","jpegImage","getIR","bytesToString","isNativelySupported","res","cs","ColorSpace","isNativelyDecodable","numComps","jpeg","JpxImage","TagTree","levelsLength","levels","level","currentLevel","incrementValue","nextLevel","InclusionTree","defaultValue","jj","stopValue","propagateValues","levelIndex","currentValue","cx","exchangeLps","renormD","exchangeMps","mps","LLAndLHContextsLabel","HLContextLabel","HHContextLabel","calcSignContribution","significance0","sign0","significance1","sign1","SignContextLabels","xorBit","BitModel","subband","zeroBitPlanes","contextLabelTable","coefficientCount","neighborsSignificance","coefficentsSign","coefficentsMagnitude","processingFlags","bitsDecoded","setDecoder","uniformContext","runLengthContext","setNeighborsSignificance","column","runSignificancePropogationPass","contextLabels","labels","qq","i1","decision","decodeSignBit","horizontalContribution","verticalContribution","contextLabelAndXor","decoded","runMagnitudeRefinementPass","significance","sumOfSignificance","runCleanupPass","significanceState","oneRowDown","twoRowsDown","threeRowsDown","index0","allEmpty","hasSignificantCoefficent","i2","checkSegmentationSymbol","Transform","calculate","subbands","u0","ll","iterate","expand","bufferPadding","step","j1","j2","hl","lh","hh","llWidth","llHeight","llItems","hlWidth","hlHeight","hlItems","lhWidth","lhHeight","lhItems","hhWidth","hhHeight","hhItems","Float32Array","bufferOut","u","IrreversibleTransform","i0_","floor","i1_","offset_","K","nn","ReversibleTransform","JpxStream","jpxImage","kk","tiles","dataPosition","sourcePosition","data0","data1","data2","data3","rowFeed","tileCompoments","tileWidth","tileHeight","tileLeft","left","tileTop","top","jpx","main"],"mappings":"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AH,GAAA,MAAAC,KAAA,EAAAC,KAAA,EAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,EAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,EAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,MAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAAC,KAAA,GAAAC,KAAA,GAAAC,WAAA,IACAH,GAAA,KAAA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","file":"../skylark-utils-codec-all.js","sourcesContent":["define('skylark-langx/skylark',[], function() {\r\n    var skylark = {\r\n\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx/types',[\r\n],function(){\r\n    var toString = {}.toString;\r\n    \r\n    var type = (function() {\r\n        var class2type = {};\r\n\r\n        // Populate the class2type map\r\n        \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \").forEach(function(name) {\r\n            class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n        });\r\n\r\n        return function type(obj) {\r\n            return obj == null ? String(obj) :\r\n                class2type[toString.call(obj)] || \"object\";\r\n        };\r\n    })();\r\n\r\n    function isArray(object) {\r\n        return object && object.constructor === Array;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if `value` is array-like. A value is considered array-like if it's\r\n     * not a function/string/element and has a `value.length` that's an integer greater than or\r\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n     *\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n     * @example\r\n     *\r\n     * isArrayLike([1, 2, 3])\r\n     * // => true\r\n     *\r\n     * isArrayLike(document.body.children)\r\n     * // => false\r\n     *\r\n     * isArrayLike('abc')\r\n     * // => true\r\n     *\r\n     * isArrayLike(Function)\r\n     * // => false\r\n     */    \r\n    function isArrayLike(obj) {\r\n        return !isString(obj) && !isHtmlNode(obj) && typeof obj.length == 'number' && !isFunction(obj);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a boolean primitive or object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\r\n     * @example\r\n     *\r\n     * isBoolean(false)\r\n     * // => true\r\n     *\r\n     * isBoolean(null)\r\n     * // => false\r\n     */\r\n    function isBoolean(obj) {\r\n        return typeof(obj) === \"boolean\";\r\n    }\r\n\r\n    function isDefined(obj) {\r\n        return typeof obj !== 'undefined';\r\n    }\r\n\r\n    function isDocument(obj) {\r\n        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;\r\n    }\r\n\r\n    function isEmptyObject(obj) {\r\n        var name;\r\n        for (name in obj) {\r\n            if (obj[name] !== null) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Function` object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n     * @example\r\n     *\r\n     * isFunction(parseInt)\r\n     * // => true\r\n     *\r\n     * isFunction(/abc/)\r\n     * // => false\r\n     */\r\n    function isFunction(value) {\r\n        return type(value) == \"function\";\r\n    }\r\n\r\n    function isHtmlNode(obj) {\r\n        return obj && (obj instanceof Node);\r\n    }\r\n\r\n    function isInstanceOf( /*Object*/ value, /*Type*/ type) {\r\n        //Tests whether the value is an instance of a type.\r\n        if (value === undefined) {\r\n            return false;\r\n        } else if (value === null || type == Object) {\r\n            return true;\r\n        } else if (typeof value === \"number\") {\r\n            return type === Number;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else if (typeof value === \"boolean\") {\r\n            return type === Boolean;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else {\r\n            return (value instanceof type) || (value && value.isInstanceOf ? value.isInstanceOf(type) : false);\r\n        }\r\n    }\r\n\r\n    function isNull(value) {\r\n      return type(value) === \"null\";\r\n    }\r\n\r\n    function isNumber(obj) {\r\n        return typeof obj == 'number';\r\n    }\r\n\r\n    function isObject(obj) {\r\n        return type(obj) == \"object\";\r\n    }\r\n\r\n    function isPlainObject(obj) {\r\n        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;\r\n    }\r\n\r\n    function isString(obj) {\r\n        return typeof obj === 'string';\r\n    }\r\n\r\n    function isWindow(obj) {\r\n        return obj && obj == obj.window;\r\n    }\r\n\r\n    function isSameOrigin(href) {\r\n        if (href) {\r\n            var origin = location.protocol + '//' + location.hostname;\r\n            if (location.port) {\r\n                origin += ':' + location.port;\r\n            }\r\n            return href.startsWith(origin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Symbol` primitive or object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSymbol(Symbol.iterator);\r\n     * // => true\r\n     *\r\n     * _.isSymbol('abc');\r\n     * // => false\r\n     */\r\n    function isSymbol(value) {\r\n      return typeof value == 'symbol' ||\r\n        (isObjectLike(value) && objectToString.call(value) == symbolTag);\r\n    }\r\n\r\n    function isUndefined(value) {\r\n      return value === undefined\r\n    }\r\n\r\n    return {\r\n\r\n        isArray: isArray,\r\n\r\n        isArrayLike: isArrayLike,\r\n\r\n        isBoolean: isBoolean,\r\n\r\n        isDefined: isDefined,\r\n\r\n        isDocument: isDocument,\r\n\r\n        isEmpty : isEmptyObject,\r\n\r\n        isEmptyObject: isEmptyObject,\r\n\r\n        isFunction: isFunction,\r\n\r\n        isHtmlNode: isHtmlNode,\r\n\r\n        isNull: isNull,\r\n\r\n        isNumber: isNumber,\r\n\r\n        isObject: isObject,\r\n\r\n        isPlainObject: isPlainObject,\r\n\r\n        isString: isString,\r\n\r\n        isSameOrigin: isSameOrigin,\r\n\r\n        isSymbol : isSymbol,\r\n\r\n        isUndefined: isUndefined,\r\n\r\n        isWindow: isWindow,\r\n\r\n        type: type\r\n    };\r\n\r\n});\ndefine('skylark-langx/arrays',[\r\n\t\"./types\"\r\n],function(types,objects){\r\n\tvar filter = Array.prototype.filter,\r\n\t\tisArrayLike = types.isArrayLike;\r\n\r\n    /**\r\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n      var length = array.length,\r\n          index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n      while ((fromRight ? index-- : ++index < length)) {\r\n        if (predicate(array[index], index, array)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseIndexOf(array, value, fromIndex) {\r\n      if (value !== value) {\r\n        return baseFindIndex(array, baseIsNaN, fromIndex);\r\n      }\r\n      var index = fromIndex - 1,\r\n          length = array.length;\r\n\r\n      while (++index < length) {\r\n        if (array[index] === value) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `isNaN` without support for number objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     */\r\n    function baseIsNaN(value) {\r\n      return value !== value;\r\n    }\r\n\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    return {\r\n        baseFindIndex: baseFindIndex,\r\n\r\n        baseIndexOf : baseIndexOf,\r\n        \r\n        compact: compact,\r\n\r\n        first : function(items,n) {\r\n            if (n) {\r\n                return items.slice(0,n);\r\n            } else {\r\n                return items[0];\r\n            }\r\n        },\r\n\r\n        flatten: flatten,\r\n\r\n        inArray: inArray,\r\n\r\n        makeArray: makeArray,\r\n\r\n        map : map,\r\n        \r\n        uniq : uniq\r\n\r\n    }\r\n});\ndefine('skylark-langx/numbers',[\r\n\t\"./types\"\r\n],function(types){\r\n\tvar isObject = types.isObject,\r\n\t\tisSymbol = types.isSymbol;\r\n\r\n\tvar INFINITY = 1 / 0,\r\n\t    MAX_SAFE_INTEGER = 9007199254740991,\r\n\t    MAX_INTEGER = 1.7976931348623157e+308,\r\n\t    NAN = 0 / 0;\r\n\r\n\t/** Used to match leading and trailing whitespace. */\r\n\tvar reTrim = /^\\s+|\\s+$/g;\r\n\r\n\t/** Used to detect bad signed hexadecimal string values. */\r\n\tvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n\t/** Used to detect binary string values. */\r\n\tvar reIsBinary = /^0b[01]+$/i;\r\n\r\n\t/** Used to detect octal string values. */\r\n\tvar reIsOctal = /^0o[0-7]+$/i;\r\n\r\n\t/** Used to detect unsigned integer values. */\r\n\tvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n\t/** Built-in method references without a dependency on `root`. */\r\n\tvar freeParseInt = parseInt;\r\n\r\n\t/**\r\n\t * Converts `value` to a finite number.\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @since 4.12.0\r\n\t * @category Lang\r\n\t * @param {*} value The value to convert.\r\n\t * @returns {number} Returns the converted number.\r\n\t * @example\r\n\t *\r\n\t * _.toFinite(3.2);\r\n\t * // => 3.2\r\n\t *\r\n\t * _.toFinite(Number.MIN_VALUE);\r\n\t * // => 5e-324\r\n\t *\r\n\t * _.toFinite(Infinity);\r\n\t * // => 1.7976931348623157e+308\r\n\t *\r\n\t * _.toFinite('3.2');\r\n\t * // => 3.2\r\n\t */\r\n\tfunction toFinite(value) {\r\n\t  if (!value) {\r\n\t    return value === 0 ? value : 0;\r\n\t  }\r\n\t  value = toNumber(value);\r\n\t  if (value === INFINITY || value === -INFINITY) {\r\n\t    var sign = (value < 0 ? -1 : 1);\r\n\t    return sign * MAX_INTEGER;\r\n\t  }\r\n\t  return value === value ? value : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts `value` to an integer.\r\n\t *\r\n\t * **Note:** This method is loosely based on\r\n\t * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @param {*} value The value to convert.\r\n\t * @returns {number} Returns the converted integer.\r\n\t * @example\r\n\t *\r\n\t * _.toInteger(3.2);\r\n\t * // => 3\r\n\t *\r\n\t * _.toInteger(Number.MIN_VALUE);\r\n\t * // => 0\r\n\t *\r\n\t * _.toInteger(Infinity);\r\n\t * // => 1.7976931348623157e+308\r\n\t *\r\n\t * _.toInteger('3.2');\r\n\t * // => 3\r\n\t */\r\n\tfunction toInteger(value) {\r\n\t  var result = toFinite(value),\r\n\t      remainder = result % 1;\r\n\r\n\t  return result === result ? (remainder ? result - remainder : result) : 0;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Converts `value` to a number.\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @since 4.0.0\r\n\t * @category Lang\r\n\t * @param {*} value The value to process.\r\n\t * @returns {number} Returns the number.\r\n\t * @example\r\n\t *\r\n\t * _.toNumber(3.2);\r\n\t * // => 3.2\r\n\t *\r\n\t * _.toNumber(Number.MIN_VALUE);\r\n\t * // => 5e-324\r\n\t *\r\n\t * _.toNumber(Infinity);\r\n\t * // => Infinity\r\n\t *\r\n\t * _.toNumber('3.2');\r\n\t * // => 3.2\r\n\t */\r\n\tfunction toNumber(value) {\r\n\t  if (typeof value == 'number') {\r\n\t    return value;\r\n\t  }\r\n\t  if (isSymbol(value)) {\r\n\t    return NAN;\r\n\t  }\r\n\t  if (isObject(value)) {\r\n\t    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\r\n\t    value = isObject(other) ? (other + '') : other;\r\n\t  }\r\n\t  if (typeof value != 'string') {\r\n\t    return value === 0 ? value : +value;\r\n\t  }\r\n\t  value = value.replace(reTrim, '');\r\n\t  var isBinary = reIsBinary.test(value);\r\n\t  return (isBinary || reIsOctal.test(value))\r\n\t    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n\t    : (reIsBadHex.test(value) ? NAN : +value);\r\n\t}\r\n\r\n\treturn  {\r\n\t\ttoFinite : toFinite,\r\n\t\ttoNumber : toNumber,\r\n\t\ttoInteger : toInteger\r\n\t}\r\n});\ndefine('skylark-langx/objects',[\r\n\t\"./types\",\r\n    \"./numbers\"\r\n],function(types,numbers){\r\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty,\r\n        slice = Array.prototype.slice,\r\n        isBoolean = types.isBoolean,\r\n        isFunction = types.isFunction,\r\n\t\tisObject = types.isObject,\r\n\t\tisPlainObject = types.isPlainObject,\r\n\t\tisArray = types.isArray,\r\n        isArrayLike = types.isArrayLike,\r\n        isString = types.isString,\r\n        toInteger = numbers.toInteger;\r\n\r\n     // An internal function for creating assigner functions.\r\n    function createAssigner(keysFunc, defaults) {\r\n        return function(obj) {\r\n          var length = arguments.length;\r\n          if (defaults) obj = Object(obj);  \r\n          if (length < 2 || obj == null) return obj;\r\n          for (var index = 1; index < length; index++) {\r\n            var source = arguments[index],\r\n                keys = keysFunc(source),\r\n                l = keys.length;\r\n            for (var i = 0; i < l; i++) {\r\n              var key = keys[i];\r\n              if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n            }\r\n          }\r\n          return obj;\r\n       };\r\n    }\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    var eq, deepEq;\r\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\r\n\r\n    eq = function(a, b, aStack, bStack) {\r\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n        if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n        // `null` or `undefined` only equal to itself (strict comparison).\r\n        if (a == null || b == null) return false;\r\n        // `NaN`s are equivalent, but non-reflexive.\r\n        if (a !== a) return b !== b;\r\n        // Exhaust primitive checks\r\n        var type = typeof a;\r\n        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n        return deepEq(a, b, aStack, bStack);\r\n    };\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    deepEq = function(a, b, aStack, bStack) {\r\n        // Unwrap any wrapped objects.\r\n        //if (a instanceof _) a = a._wrapped;\r\n        //if (b instanceof _) b = b._wrapped;\r\n        // Compare `[[Class]]` names.\r\n        var className = toString.call(a);\r\n        if (className !== toString.call(b)) return false;\r\n        switch (className) {\r\n            // Strings, numbers, regular expressions, dates, and booleans are compared by value.\r\n            case '[object RegExp]':\r\n            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n            case '[object String]':\r\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n                // equivalent to `new String(\"5\")`.\r\n                return '' + a === '' + b;\r\n            case '[object Number]':\r\n                // `NaN`s are equivalent, but non-reflexive.\r\n                // Object(NaN) is equivalent to NaN.\r\n                if (+a !== +a) return +b !== +b;\r\n                // An `egal` comparison is performed for other numeric values.\r\n                return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n            case '[object Date]':\r\n            case '[object Boolean]':\r\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n                // millisecond representations. Note that invalid dates with millisecond representations\r\n                // of `NaN` are not equivalent.\r\n                return +a === +b;\r\n            case '[object Symbol]':\r\n                return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n        }\r\n\r\n        var areArrays = className === '[object Array]';\r\n        if (!areArrays) {\r\n            if (typeof a != 'object' || typeof b != 'object') return false;\r\n            // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n            // from different frames are.\r\n            var aCtor = a.constructor, bCtor = b.constructor;\r\n            if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\r\n                               isFunction(bCtor) && bCtor instanceof bCtor)\r\n                          && ('constructor' in a && 'constructor' in b)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n        // Initializing stack of traversed objects.\r\n        // It's done here since we only need them for objects and arrays comparison.\r\n        aStack = aStack || [];\r\n        bStack = bStack || [];\r\n        var length = aStack.length;\r\n        while (length--) {\r\n            // Linear search. Performance is inversely proportional to the number of\r\n            // unique nested structures.\r\n            if (aStack[length] === a) return bStack[length] === b;\r\n        }\r\n\r\n        // Add the first object to the stack of traversed objects.\r\n        aStack.push(a);\r\n        bStack.push(b);\r\n\r\n        // Recursively compare objects and arrays.\r\n        if (areArrays) {\r\n            // Compare array lengths to determine if a deep comparison is necessary.\r\n            length = a.length;\r\n            if (length !== b.length) return false;\r\n            // Deep compare the contents, ignoring non-numeric properties.\r\n            while (length--) {\r\n                if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n            }\r\n        } else {\r\n            // Deep compare objects.\r\n            var keys = Object.keys(a), key;\r\n            length = keys.length;\r\n            // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n            if (Object.keys(b).length !== length) return false;\r\n            while (length--) {\r\n                // Deep compare each member\r\n                key = keys[length];\r\n                if (!(b[key]!==undefined && eq(a[key], b[key], aStack, bStack))) return false;\r\n            }\r\n        }\r\n        // Remove the first object from the stack of traversed objects.\r\n        aStack.pop();\r\n        bStack.pop();\r\n        return true;\r\n    };\r\n\r\n    // Retrieve all the property names of an object.\r\n    function allKeys(obj) {\r\n        if (!isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function each(obj, callback) {\r\n        var length, key, i, undef, value;\r\n\r\n        if (obj) {\r\n            length = obj.length;\r\n\r\n            if (length === undef) {\r\n                // Loop object items\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        value = obj[key];\r\n                        if (callback.call(value, key, value) === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Loop array items\r\n                for (i = 0; i < length; i++) {\r\n                    value = obj[i];\r\n                    if (callback.call(value, i, value) === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function extend(target) {\r\n        var deep, args = slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n            mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    }\r\n\r\n    // Retrieve the names of an object's own properties.\r\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n    function keys(obj) {\r\n        if (isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) if (has(obj, key)) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function has(obj, path) {\r\n        if (!isArray(path)) {\r\n            return obj != null && hasOwnProperty.call(obj, path);\r\n        }\r\n        var length = path.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var key = path[i];\r\n            if (obj == null || !hasOwnProperty.call(obj, key)) {\r\n                return false;\r\n            }\r\n            obj = obj[key];\r\n        }\r\n        return !!length;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\r\n     * checked for a substring of `value`, otherwise\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\r\n     * the offset from the end of `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\r\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\r\n     * @example\r\n     *\r\n     * _.includes([1, 2, 3], 1);\r\n     * // => true\r\n     *\r\n     * _.includes([1, 2, 3], 1, 2);\r\n     * // => false\r\n     *\r\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\r\n     * // => true\r\n     *\r\n     * _.includes('abcd', 'bc');\r\n     * // => true\r\n     */\r\n    function includes(collection, value, fromIndex, guard) {\r\n      collection = isArrayLike(collection) ? collection : values(collection);\r\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\r\n\r\n      var length = collection.length;\r\n      if (fromIndex < 0) {\r\n        fromIndex = nativeMax(length + fromIndex, 0);\r\n      }\r\n      return isString(collection)\r\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\r\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\r\n    }\r\n\r\n\r\n   // Perform a deep comparison to check if two objects are equal.\r\n    function isEqual(a, b) {\r\n        return eq(a, b);\r\n    }\r\n\r\n    // Returns whether an object has a given set of `key:value` pairs.\r\n    function isMatch(object, attrs) {\r\n        var keys = keys(attrs), length = keys.length;\r\n        if (object == null) return !length;\r\n        var obj = Object(object);\r\n        for (var i = 0; i < length; i++) {\r\n          var key = keys[i];\r\n          if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n        }\r\n        return true;\r\n    }    \r\n\r\n    function _mixin(target, source, deep, safe) {\r\n        for (var key in source) {\r\n            //if (!source.hasOwnProperty(key)) {\r\n            //    continue;\r\n            //}\r\n            if (safe && target[key] !== undefined) {\r\n                continue;\r\n            }\r\n            if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\r\n                if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\r\n                    target[key] = {};\r\n                }\r\n                if (isArray(source[key]) && !isArray(target[key])) {\r\n                    target[key] = [];\r\n                }\r\n                _mixin(target[key], source[key], deep, safe);\r\n            } else if (source[key] !== undefined) {\r\n                target[key] = source[key]\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function _parseMixinArgs(args) {\r\n        var params = slice.call(arguments, 0),\r\n            target = params.shift(),\r\n            deep = false;\r\n        if (isBoolean(params[params.length - 1])) {\r\n            deep = params.pop();\r\n        }\r\n\r\n        return {\r\n            target: target,\r\n            sources: params,\r\n            deep: deep\r\n        };\r\n    }\r\n\r\n    function mixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, false);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    function removeItem(items, item) {\r\n        if (isArray(items)) {\r\n            var idx = items.indexOf(item);\r\n            if (idx != -1) {\r\n                items.splice(idx, 1);\r\n            }\r\n        } else if (isPlainObject(items)) {\r\n            for (var key in items) {\r\n                if (items[key] == item) {\r\n                    delete items[key];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function result(obj, path, fallback) {\r\n        if (!isArray(path)) {\r\n            path = [path]\r\n        };\r\n        var length = path.length;\r\n        if (!length) {\r\n          return isFunction(fallback) ? fallback.call(obj) : fallback;\r\n        }\r\n        for (var i = 0; i < length; i++) {\r\n          var prop = obj == null ? void 0 : obj[path[i]];\r\n          if (prop === void 0) {\r\n            prop = fallback;\r\n            i = length; // Ensure we don't continue iterating.\r\n          }\r\n          obj = isFunction(prop) ? prop.call(obj) : prop;\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    function safeMixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, true);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    // Retrieve the values of an object's properties.\r\n    function values(obj) {\r\n        var keys = _.keys(obj);\r\n        var length = keys.length;\r\n        var values = Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            values[i] = obj[keys[i]];\r\n        }\r\n        return values;\r\n    }\r\n\r\n\r\n    \r\n    function clone( /*anything*/ src,checkCloneMethod) {\r\n        var copy;\r\n        if (src === undefined || src === null) {\r\n            copy = src;\r\n        } else if (checkCloneMethod && src.clone) {\r\n            copy = src.clone();\r\n        } else if (isArray(src)) {\r\n            copy = [];\r\n            for (var i = 0; i < src.length; i++) {\r\n                copy.push(clone(src[i]));\r\n            }\r\n        } else if (isPlainObject(src)) {\r\n            copy = {};\r\n            for (var key in src) {\r\n                copy[key] = clone(src[key]);\r\n            }\r\n        } else {\r\n            copy = src;\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n    return {\r\n        allKeys: allKeys,\r\n\r\n        clone: clone,\r\n\r\n        defaults : createAssigner(allKeys, true),\r\n\r\n        each : each,\r\n\r\n        extend : extend,\r\n\r\n        has: has,\r\n\r\n        isEqual: isEqual,   \r\n\r\n        includes: includes,\r\n\r\n        isMatch: isMatch,\r\n\r\n        keys: keys,\r\n\r\n        mixin: mixin,\r\n\r\n        removeItem: removeItem,\r\n\r\n        result : result,\r\n        \r\n        safeMixin: safeMixin,\r\n\r\n        values: values\r\n    };\r\n\r\n\r\n\r\n});\ndefine('skylark-langx/klass',[\r\n    \"./arrays\",\r\n    \"./objects\",\r\n    \"./types\"\r\n],function(arrays,objects,types){\r\n    var uniq = arrays.uniq,\r\n        has = objects.has,\r\n        mixin = objects.mixin,\r\n        isArray = types.isArray,\r\n        isDefined = types.isDefined;\r\n\r\n/* for reference \r\n function klass(props,parent) {\r\n    var ctor = function(){\r\n        this._construct();\r\n    };\r\n    ctor.prototype = props;\r\n    if (parent) {\r\n        ctor._proto_ = parent;\r\n        props.__proto__ = parent.prototype;\r\n    }\r\n    return ctor;\r\n}\r\n\r\n// Type some JavaScript code here.\r\nlet animal = klass({\r\n  _construct(){\r\n      this.name = this.name + \",hi\";\r\n  },\r\n    \r\n  name: \"Animal\",\r\n  eat() {         // [[HomeObject]] == animal\r\n    alert(`${this.name} eats.`);\r\n  }\r\n    \r\n    \r\n});\r\n\r\n\r\nlet rabbit = klass({\r\n  name: \"Rabbit\",\r\n  _construct(){\r\n      super._construct();\r\n  },\r\n  eat() {         // [[HomeObject]] == rabbit\r\n    super.eat();\r\n  }\r\n},animal);\r\n\r\nlet longEar = klass({\r\n  name: \"Long Ear\",\r\n  eat() {         // [[HomeObject]] == longEar\r\n    super.eat();\r\n  }\r\n},rabbit);\r\n*/\r\n    \r\n    function inherit(ctor, base) {\r\n        var f = function() {};\r\n        f.prototype = base.prototype;\r\n\r\n        ctor.prototype = new f();\r\n    }\r\n\r\n    var f1 = function() {\r\n        function extendClass(ctor, props, options) {\r\n            // Copy the properties to the prototype of the class.\r\n            var proto = ctor.prototype,\r\n                _super = ctor.superclass.prototype,\r\n                noOverrided = options && options.noOverrided,\r\n                overrides = options && options.overrides || {};\r\n\r\n            for (var name in props) {\r\n                if (name === \"constructor\") {\r\n                    continue;\r\n                }\r\n\r\n                // Check if we're overwriting an existing function\r\n                var prop = props[name];\r\n                if (typeof props[name] == \"function\") {\r\n                    proto[name] =  !prop._constructor && !noOverrided && typeof _super[name] == \"function\" ?\r\n                          (function(name, fn, superFn) {\r\n                            return function() {\r\n                                var tmp = this.overrided;\r\n\r\n                                // Add a new ._super() method that is the same method\r\n                                // but on the super-class\r\n                                this.overrided = superFn;\r\n\r\n                                // The method only need to be bound temporarily, so we\r\n                                // remove it when we're done executing\r\n                                var ret = fn.apply(this, arguments);\r\n\r\n                                this.overrided = tmp;\r\n\r\n                                return ret;\r\n                            };\r\n                        })(name, prop, _super[name]) :\r\n                        prop;\r\n                } else if (types.isPlainObject(prop) && prop!==null && (prop.get)) {\r\n                    Object.defineProperty(proto,name,prop);\r\n                } else {\r\n                    proto[name] = prop;\r\n                }\r\n            }\r\n            return ctor;\r\n        }\r\n\r\n        function serialMixins(ctor,mixins) {\r\n            var result = [];\r\n\r\n            mixins.forEach(function(mixin){\r\n                if (has(mixin,\"__mixins__\")) {\r\n                     throw new Error(\"nested mixins\");\r\n                }\r\n                var clss = [];\r\n                while (mixin) {\r\n                    clss.unshift(mixin);\r\n                    mixin = mixin.superclass;\r\n                }\r\n                result = result.concat(clss);\r\n            });\r\n\r\n            result = uniq(result);\r\n\r\n            result = result.filter(function(mixin){\r\n                var cls = ctor;\r\n                while (cls) {\r\n                    if (mixin === cls) {\r\n                        return false;\r\n                    }\r\n                    if (has(cls,\"__mixins__\")) {\r\n                        var clsMixines = cls[\"__mixins__\"];\r\n                        for (var i=0; i<clsMixines.length;i++) {\r\n                            if (clsMixines[i]===mixin) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    cls = cls.superclass;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (result.length>0) {\r\n                return result;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function mergeMixins(ctor,mixins) {\r\n            var newCtor =ctor;\r\n            for (var i=0;i<mixins.length;i++) {\r\n                var xtor = new Function();\r\n                xtor.prototype = Object.create(newCtor.prototype);\r\n                xtor.__proto__ = newCtor;\r\n                xtor.superclass = null;\r\n                mixin(xtor.prototype,mixins[i].prototype);\r\n                xtor.prototype.__mixin__ = mixins[i];\r\n                newCtor = xtor;\r\n            }\r\n\r\n            return newCtor;\r\n        }\r\n\r\n        function _constructor ()  {\r\n            if (this._construct) {\r\n                return this._construct.apply(this, arguments);\r\n            } else  if (this.init) {\r\n                return this.init.apply(this, arguments);\r\n            }\r\n        }\r\n\r\n        return function createClass(props, parent, mixins,options) {\r\n            if (isArray(parent)) {\r\n                options = mixins;\r\n                mixins = parent;\r\n                parent = null;\r\n            }\r\n            parent = parent || Object;\r\n\r\n            if (isDefined(mixins) && !isArray(mixins)) {\r\n                options = mixins;\r\n                mixins = false;\r\n            }\r\n\r\n            var innerParent = parent;\r\n\r\n            if (mixins) {\r\n                mixins = serialMixins(innerParent,mixins);\r\n            }\r\n\r\n            if (mixins) {\r\n                innerParent = mergeMixins(innerParent,mixins);\r\n            }\r\n\r\n            var klassName = props.klassName || \"\",\r\n                ctor = new Function(\r\n                    \"return function \" + klassName + \"() {\" +\r\n                    \"var inst = this,\" +\r\n                    \" ctor = arguments.callee;\" +\r\n                    \"if (!(inst instanceof ctor)) {\" +\r\n                    \"inst = Object.create(ctor.prototype);\" +\r\n                    \"}\" +\r\n                    \"return ctor._constructor.apply(inst, arguments) || inst;\" + \r\n                    \"}\"\r\n                )();\r\n\r\n\r\n            // Populate our constructed prototype object\r\n            ctor.prototype = Object.create(innerParent.prototype);\r\n\r\n            // Enforce the constructor to be what we expect\r\n            ctor.prototype.constructor = ctor;\r\n            ctor.superclass = parent;\r\n\r\n            // And make this class extendable\r\n            ctor.__proto__ = innerParent;\r\n\r\n\r\n            if (!ctor._constructor) {\r\n                ctor._constructor = _constructor;\r\n            } \r\n\r\n            if (mixins) {\r\n                ctor.__mixins__ = mixins;\r\n            }\r\n\r\n            if (!ctor.partial) {\r\n                ctor.partial = function(props, options) {\r\n                    return extendClass(this, props, options);\r\n                };\r\n            }\r\n            if (!ctor.inherit) {\r\n                ctor.inherit = function(props, mixins,options) {\r\n                    return createClass(props, this, mixins,options);\r\n                };\r\n            }\r\n\r\n            ctor.partial(props, options);\r\n\r\n            return ctor;\r\n        };\r\n    }\r\n\r\n    var createClass = f1();\r\n\r\n    return createClass;\r\n});\ndefine('skylark-langx/ArrayStore',[\r\n    \"./klass\"\r\n],function(klass){\r\n    var SimpleQueryEngine = function(query, options){\r\n        // summary:\r\n        //      Simple query engine that matches using filter functions, named filter\r\n        //      functions or objects by name-value on a query object hash\r\n        //\r\n        // description:\r\n        //      The SimpleQueryEngine provides a way of getting a QueryResults through\r\n        //      the use of a simple object hash as a filter.  The hash will be used to\r\n        //      match properties on data objects with the corresponding value given. In\r\n        //      other words, only exact matches will be returned.\r\n        //\r\n        //      This function can be used as a template for more complex query engines;\r\n        //      for example, an engine can be created that accepts an object hash that\r\n        //      contains filtering functions, or a string that gets evaluated, etc.\r\n        //\r\n        //      When creating a new dojo.store, simply set the store's queryEngine\r\n        //      field as a reference to this function.\r\n        //\r\n        // query: Object\r\n        //      An object hash with fields that may match fields of items in the store.\r\n        //      Values in the hash will be compared by normal == operator, but regular expressions\r\n        //      or any object that provides a test() method are also supported and can be\r\n        //      used to match strings by more complex expressions\r\n        //      (and then the regex's or object's test() method will be used to match values).\r\n        //\r\n        // options: dojo/store/api/Store.QueryOptions?\r\n        //      An object that contains optional information such as sort, start, and count.\r\n        //\r\n        // returns: Function\r\n        //      A function that caches the passed query under the field \"matches\".  See any\r\n        //      of the \"query\" methods on dojo.stores.\r\n        //\r\n        // example:\r\n        //      Define a store with a reference to this engine, and set up a query method.\r\n        //\r\n        //  |   var myStore = function(options){\r\n        //  |       //  ...more properties here\r\n        //  |       this.queryEngine = SimpleQueryEngine;\r\n        //  |       //  define our query method\r\n        //  |       this.query = function(query, options){\r\n        //  |           return QueryResults(this.queryEngine(query, options)(this.data));\r\n        //  |       };\r\n        //  |   };\r\n\r\n        // create our matching query function\r\n        switch(typeof query){\r\n            default:\r\n                throw new Error(\"Can not query with a \" + typeof query);\r\n            case \"object\": case \"undefined\":\r\n                var queryObject = query;\r\n                query = function(object){\r\n                    for(var key in queryObject){\r\n                        var required = queryObject[key];\r\n                        if(required && required.test){\r\n                            // an object can provide a test method, which makes it work with regex\r\n                            if(!required.test(object[key], object)){\r\n                                return false;\r\n                            }\r\n                        }else if(required != object[key]){\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                };\r\n                break;\r\n            case \"string\":\r\n                // named query\r\n                if(!this[query]){\r\n                    throw new Error(\"No filter function \" + query + \" was found in store\");\r\n                }\r\n                query = this[query];\r\n                // fall through\r\n            case \"function\":\r\n                // fall through\r\n        }\r\n        \r\n        function filter(arr, callback, thisObject){\r\n            // summary:\r\n            //      Returns a new Array with those items from arr that match the\r\n            //      condition implemented by callback.\r\n            // arr: Array\r\n            //      the array to iterate over.\r\n            // callback: Function|String\r\n            //      a function that is invoked with three arguments (item,\r\n            //      index, array). The return of this function is expected to\r\n            //      be a boolean which determines whether the passed-in item\r\n            //      will be included in the returned array.\r\n            // thisObject: Object?\r\n            //      may be used to scope the call to callback\r\n            // returns: Array\r\n            // description:\r\n            //      This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when\r\n            //      run over sparse arrays, this implementation passes the \"holes\" in the sparse array to\r\n            //      the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array.\r\n            //      For more details, see:\r\n            //      https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter\r\n            // example:\r\n            //  | // returns [2, 3, 4]\r\n            //  | array.filter([1, 2, 3, 4], function(item){ return item>1; });\r\n\r\n            // TODO: do we need \"Ctr\" here like in map()?\r\n            var i = 0, l = arr && arr.length || 0, out = [], value;\r\n            if(l && typeof arr == \"string\") arr = arr.split(\"\");\r\n            if(typeof callback == \"string\") callback = cache[callback] || buildFn(callback);\r\n            if(thisObject){\r\n                for(; i < l; ++i){\r\n                    value = arr[i];\r\n                    if(callback.call(thisObject, value, i, arr)){\r\n                        out.push(value);\r\n                    }\r\n                }\r\n            }else{\r\n                for(; i < l; ++i){\r\n                    value = arr[i];\r\n                    if(callback(value, i, arr)){\r\n                        out.push(value);\r\n                    }\r\n                }\r\n            }\r\n            return out; // Array\r\n        }\r\n\r\n        function execute(array){\r\n            // execute the whole query, first we filter\r\n            var results = filter(array, query);\r\n            // next we sort\r\n            var sortSet = options && options.sort;\r\n            if(sortSet){\r\n                results.sort(typeof sortSet == \"function\" ? sortSet : function(a, b){\r\n                    for(var sort, i=0; sort = sortSet[i]; i++){\r\n                        var aValue = a[sort.attribute];\r\n                        var bValue = b[sort.attribute];\r\n                        // valueOf enables proper comparison of dates\r\n                        aValue = aValue != null ? aValue.valueOf() : aValue;\r\n                        bValue = bValue != null ? bValue.valueOf() : bValue;\r\n                        if (aValue != bValue){\r\n                            // modified by lwf 2016/07/09\r\n                            //return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;\r\n                            return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;\r\n                        }\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n            // now we paginate\r\n            if(options && (options.start || options.count)){\r\n                var total = results.length;\r\n                results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));\r\n                results.total = total;\r\n            }\r\n            return results;\r\n        }\r\n        execute.matches = query;\r\n        return execute;\r\n    };\r\n\r\n    var QueryResults = function(results){\r\n        // summary:\r\n        //      A function that wraps the results of a store query with additional\r\n        //      methods.\r\n        // description:\r\n        //      QueryResults is a basic wrapper that allows for array-like iteration\r\n        //      over any kind of returned data from a query.  While the simplest store\r\n        //      will return a plain array of data, other stores may return deferreds or\r\n        //      promises; this wrapper makes sure that *all* results can be treated\r\n        //      the same.\r\n        //\r\n        //      Additional methods include `forEach`, `filter` and `map`.\r\n        // results: Array|dojo/promise/Promise\r\n        //      The result set as an array, or a promise for an array.\r\n        // returns:\r\n        //      An array-like object that can be used for iterating over.\r\n        // example:\r\n        //      Query a store and iterate over the results.\r\n        //\r\n        //  |   store.query({ prime: true }).forEach(function(item){\r\n        //  |       //  do something\r\n        //  |   });\r\n\r\n        if(!results){\r\n            return results;\r\n        }\r\n\r\n        var isPromise = !!results.then;\r\n        // if it is a promise it may be frozen\r\n        if(isPromise){\r\n            results = Object.delegate(results);\r\n        }\r\n        function addIterativeMethod(method){\r\n            // Always add the iterative methods so a QueryResults is\r\n            // returned whether the environment is ES3 or ES5\r\n            results[method] = function(){\r\n                var args = arguments;\r\n                var result = Deferred.when(results, function(results){\r\n                    //Array.prototype.unshift.call(args, results);\r\n                    return QueryResults(Array.prototype[method].apply(results, args));\r\n                });\r\n                // forEach should only return the result of when()\r\n                // when we're wrapping a promise\r\n                if(method !== \"forEach\" || isPromise){\r\n                    return result;\r\n                }\r\n            };\r\n        }\r\n\r\n        addIterativeMethod(\"forEach\");\r\n        addIterativeMethod(\"filter\");\r\n        addIterativeMethod(\"map\");\r\n        if(results.total == null){\r\n            results.total = Deferred.when(results, function(results){\r\n                return results.length;\r\n            });\r\n        }\r\n        return results; // Object\r\n    };\r\n\r\n    var ArrayStore = klass({\r\n        \"klassName\": \"ArrayStore\",\r\n\r\n        \"queryEngine\": SimpleQueryEngine,\r\n        \r\n        \"idProperty\": \"id\",\r\n\r\n\r\n        get: function(id){\r\n            // summary:\r\n            //      Retrieves an object by its identity\r\n            // id: Number\r\n            //      The identity to use to lookup the object\r\n            // returns: Object\r\n            //      The object in the store that matches the given id.\r\n            return this.data[this.index[id]];\r\n        },\r\n\r\n        getIdentity: function(object){\r\n            return object[this.idProperty];\r\n        },\r\n\r\n        put: function(object, options){\r\n            var data = this.data,\r\n                index = this.index,\r\n                idProperty = this.idProperty;\r\n            var id = object[idProperty] = (options && \"id\" in options) ? options.id : idProperty in object ? object[idProperty] : Math.random();\r\n            if(id in index){\r\n                // object exists\r\n                if(options && options.overwrite === false){\r\n                    throw new Error(\"Object already exists\");\r\n                }\r\n                // replace the entry in data\r\n                data[index[id]] = object;\r\n            }else{\r\n                // add the new object\r\n                index[id] = data.push(object) - 1;\r\n            }\r\n            return id;\r\n        },\r\n\r\n        add: function(object, options){\r\n            (options = options || {}).overwrite = false;\r\n            // call put with overwrite being false\r\n            return this.put(object, options);\r\n        },\r\n\r\n        remove: function(id){\r\n            // summary:\r\n            //      Deletes an object by its identity\r\n            // id: Number\r\n            //      The identity to use to delete the object\r\n            // returns: Boolean\r\n            //      Returns true if an object was removed, falsy (undefined) if no object matched the id\r\n            var index = this.index;\r\n            var data = this.data;\r\n            if(id in index){\r\n                data.splice(index[id], 1);\r\n                // now we have to reindex\r\n                this.setData(data);\r\n                return true;\r\n            }\r\n        },\r\n        query: function(query, options){\r\n            // summary:\r\n            //      Queries the store for objects.\r\n            // query: Object\r\n            //      The query to use for retrieving objects from the store.\r\n            // options: dojo/store/api/Store.QueryOptions?\r\n            //      The optional arguments to apply to the resultset.\r\n            // returns: dojo/store/api/Store.QueryResults\r\n            //      The results of the query, extended with iterative methods.\r\n            //\r\n            // example:\r\n            //      Given the following store:\r\n            //\r\n            //  |   var store = new Memory({\r\n            //  |       data: [\r\n            //  |           {id: 1, name: \"one\", prime: false },\r\n            //  |           {id: 2, name: \"two\", even: true, prime: true},\r\n            //  |           {id: 3, name: \"three\", prime: true},\r\n            //  |           {id: 4, name: \"four\", even: true, prime: false},\r\n            //  |           {id: 5, name: \"five\", prime: true}\r\n            //  |       ]\r\n            //  |   });\r\n            //\r\n            //  ...find all items where \"prime\" is true:\r\n            //\r\n            //  |   var results = store.query({ prime: true });\r\n            //\r\n            //  ...or find all items where \"even\" is true:\r\n            //\r\n            //  |   var results = store.query({ even: true });\r\n            return QueryResults(this.queryEngine(query, options)(this.data));\r\n        },\r\n\r\n        setData: function(data){\r\n            // summary:\r\n            //      Sets the given data as the source for this store, and indexes it\r\n            // data: Object[]\r\n            //      An array of objects to use as the source of data.\r\n            if(data.items){\r\n                // just for convenience with the data format IFRS expects\r\n                this.idProperty = data.identifier || this.idProperty;\r\n                data = this.data = data.items;\r\n            }else{\r\n                this.data = data;\r\n            }\r\n            this.index = {};\r\n            for(var i = 0, l = data.length; i < l; i++){\r\n                this.index[data[i][this.idProperty]] = i;\r\n            }\r\n        },\r\n\r\n        init: function(options) {\r\n            for(var i in options){\r\n                this[i] = options[i];\r\n            }\r\n            this.setData(this.data || []);\r\n        }\r\n\r\n    });\r\n\r\n\treturn ArrayStore;\r\n});\ndefine('skylark-langx/aspect',[\r\n],function(){\r\n\r\n  var undefined, nextId = 0;\r\n    function advise(dispatcher, type, advice, receiveArguments){\r\n        var previous = dispatcher[type];\r\n        var around = type == \"around\";\r\n        var signal;\r\n        if(around){\r\n            var advised = advice(function(){\r\n                return previous.advice(this, arguments);\r\n            });\r\n            signal = {\r\n                remove: function(){\r\n                    if(advised){\r\n                        advised = dispatcher = advice = null;\r\n                    }\r\n                },\r\n                advice: function(target, args){\r\n                    return advised ?\r\n                        advised.apply(target, args) :  // called the advised function\r\n                        previous.advice(target, args); // cancelled, skip to next one\r\n                }\r\n            };\r\n        }else{\r\n            // create the remove handler\r\n            signal = {\r\n                remove: function(){\r\n                    if(signal.advice){\r\n                        var previous = signal.previous;\r\n                        var next = signal.next;\r\n                        if(!next && !previous){\r\n                            delete dispatcher[type];\r\n                        }else{\r\n                            if(previous){\r\n                                previous.next = next;\r\n                            }else{\r\n                                dispatcher[type] = next;\r\n                            }\r\n                            if(next){\r\n                                next.previous = previous;\r\n                            }\r\n                        }\r\n\r\n                        // remove the advice to signal that this signal has been removed\r\n                        dispatcher = advice = signal.advice = null;\r\n                    }\r\n                },\r\n                id: nextId++,\r\n                advice: advice,\r\n                receiveArguments: receiveArguments\r\n            };\r\n        }\r\n        if(previous && !around){\r\n            if(type == \"after\"){\r\n                // add the listener to the end of the list\r\n                // note that we had to change this loop a little bit to workaround a bizarre IE10 JIT bug\r\n                while(previous.next && (previous = previous.next)){}\r\n                previous.next = signal;\r\n                signal.previous = previous;\r\n            }else if(type == \"before\"){\r\n                // add to beginning\r\n                dispatcher[type] = signal;\r\n                signal.next = previous;\r\n                previous.previous = signal;\r\n            }\r\n        }else{\r\n            // around or first one just replaces\r\n            dispatcher[type] = signal;\r\n        }\r\n        return signal;\r\n    }\r\n    function aspect(type){\r\n        return function(target, methodName, advice, receiveArguments){\r\n            var existing = target[methodName], dispatcher;\r\n            if(!existing || existing.target != target){\r\n                // no dispatcher in place\r\n                target[methodName] = dispatcher = function(){\r\n                    var executionId = nextId;\r\n                    // before advice\r\n                    var args = arguments;\r\n                    var before = dispatcher.before;\r\n                    while(before){\r\n                        args = before.advice.apply(this, args) || args;\r\n                        before = before.next;\r\n                    }\r\n                    // around advice\r\n                    if(dispatcher.around){\r\n                        var results = dispatcher.around.advice(this, args);\r\n                    }\r\n                    // after advice\r\n                    var after = dispatcher.after;\r\n                    while(after && after.id < executionId){\r\n                        if(after.receiveArguments){\r\n                            var newResults = after.advice.apply(this, args);\r\n                            // change the return value only if a new value was returned\r\n                            results = newResults === undefined ? results : newResults;\r\n                        }else{\r\n                            results = after.advice.call(this, results, args);\r\n                        }\r\n                        after = after.next;\r\n                    }\r\n                    return results;\r\n                };\r\n                if(existing){\r\n                    dispatcher.around = {advice: function(target, args){\r\n                        return existing.apply(target, args);\r\n                    }};\r\n                }\r\n                dispatcher.target = target;\r\n            }\r\n            var results = advise((dispatcher || existing), type, advice, receiveArguments);\r\n            advice = null;\r\n            return results;\r\n        };\r\n    }\r\n\r\n    return {\r\n        after: aspect(\"after\"),\r\n \r\n        around: aspect(\"around\"),\r\n        \r\n        before: aspect(\"before\")\r\n    };\r\n});\ndefine('skylark-langx/funcs',[\r\n    \"./objects\",\r\n\t\"./types\"\r\n],function(objects,types){\r\n\tvar mixin = objects.mixin,\r\n        slice = Array.prototype.slice,\r\n        isFunction = types.isFunction,\r\n        isString = types.isString;\r\n\r\n    function defer(fn) {\r\n        if (requestAnimationFrame) {\r\n            requestAnimationFrame(fn);\r\n        } else {\r\n            setTimeoutout(fn);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function noop() {\r\n    }\r\n\r\n    function proxy(fn, context) {\r\n        var args = (2 in arguments) && slice.call(arguments, 2)\r\n        if (isFunction(fn)) {\r\n            var proxyFn = function() {\r\n                return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);\r\n            }\r\n            return proxyFn;\r\n        } else if (isString(context)) {\r\n            if (args) {\r\n                args.unshift(fn[context], fn)\r\n                return proxy.apply(null, args)\r\n            } else {\r\n                return proxy(fn[context], fn);\r\n            }\r\n        } else {\r\n            throw new TypeError(\"expected function\");\r\n        }\r\n    }\r\n\r\n    function debounce(fn, wait) {\r\n        var timeout;\r\n        return function () {\r\n            var context = this, args = arguments;\r\n            var later = function () {\r\n                timeout = null;\r\n                fn.apply(context, args);\r\n            };\r\n            if (timeout) clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n   \r\n    var delegate = (function() {\r\n        // boodman/crockford delegation w/ cornford optimization\r\n        function TMP() {}\r\n        return function(obj, props) {\r\n            TMP.prototype = obj;\r\n            var tmp = new TMP();\r\n            TMP.prototype = null;\r\n            if (props) {\r\n                mixin(tmp, props);\r\n            }\r\n            return tmp; // Object\r\n        };\r\n    })();\r\n\r\n\r\n    return {\r\n        debounce: debounce,\r\n\r\n        delegate: delegate,\r\n\r\n        defer: defer,\r\n\r\n        noop : noop,\r\n\r\n        proxy: proxy,\r\n\r\n        returnTrue: function() {\r\n            return true;\r\n        },\r\n\r\n        returnFalse: function() {\r\n            return false;\r\n        }\r\n    };\r\n});\ndefine('skylark-langx/Deferred',[\r\n    \"./arrays\",\r\n\t\"./funcs\",\r\n    \"./objects\"\r\n],function(arrays,funcs,objects){\r\n    \"use strict\";\r\n    \r\n    var  PGLISTENERS = Symbol ? Symbol() : '__pglisteners',\r\n         PGNOTIFIES = Symbol ? Symbol() : '__pgnotifies';\r\n\r\n    var slice = Array.prototype.slice,\r\n        proxy = funcs.proxy,\r\n        makeArray = arrays.makeArray,\r\n        result = objects.result,\r\n        mixin = objects.mixin;\r\n\r\n    mixin(Promise.prototype,{\r\n        always: function(handler) {\r\n            //this.done(handler);\r\n            //this.fail(handler);\r\n            this.then(handler,handler);\r\n            return this;\r\n        },\r\n        done : function() {\r\n            for (var i = 0;i<arguments.length;i++) {\r\n                this.then(arguments[i]);\r\n            }\r\n            return this;\r\n        },\r\n        fail : function(handler) { \r\n            //return mixin(Promise.prototype.catch.call(this,handler),added);\r\n            //return this.then(null,handler);\r\n            this.catch(handler);\r\n            return this;\r\n         }\r\n    });\r\n\r\n\r\n    var Deferred = function() {\r\n        var self = this,\r\n            p = this.promise = new Promise(function(resolve, reject) {\r\n                self._resolve = resolve;\r\n                self._reject = reject;\r\n            });\r\n\r\n        wrapPromise(p,self);\r\n\r\n        this[PGLISTENERS] = [];\r\n        this[PGNOTIFIES] = [];\r\n\r\n        //this.resolve = Deferred.prototype.resolve.bind(this);\r\n        //this.reject = Deferred.prototype.reject.bind(this);\r\n        //this.progress = Deferred.prototype.progress.bind(this);\r\n\r\n    };\r\n\r\n    function wrapPromise(p,d) {\r\n        var   added = {\r\n                state : function() {\r\n                    if (d.isResolved()) {\r\n                        return 'resolved';\r\n                    }\r\n                    if (d.isRejected()) {\r\n                        return 'rejected';\r\n                    }\r\n                    return 'pending';\r\n                },\r\n                then : function(onResolved,onRejected,onProgress) {\r\n                    if (onProgress) {\r\n                        this.progress(onProgress);\r\n                    }\r\n                    return wrapPromise(Promise.prototype.then.call(this,\r\n                            onResolved && function(args) {\r\n                                if (args && args.__ctx__ !== undefined) {\r\n                                    return onResolved.apply(args.__ctx__,args);\r\n                                } else {\r\n                                    return onResolved(args);\r\n                                }\r\n                            },\r\n                            onRejected && function(args){\r\n                                if (args && args.__ctx__ !== undefined) {\r\n                                    return onRejected.apply(args.__ctx__,args);\r\n                                } else {\r\n                                    return onRejected(args);\r\n                                }\r\n                            }));\r\n                },\r\n                progress : function(handler) {\r\n                    d[PGNOTIFIES].forEach(function (value) {\r\n                        handler(value);\r\n                    });\r\n                    d[PGLISTENERS].push(handler);\r\n                    return this;\r\n                }\r\n\r\n            };\r\n\r\n        added.pipe = added.then;\r\n        return mixin(p,added);\r\n\r\n    }\r\n\r\n    Deferred.prototype.resolve = function(value) {\r\n        var args = slice.call(arguments);\r\n        return this.resolveWith(null,args);\r\n    };\r\n\r\n    Deferred.prototype.resolveWith = function(context,args) {\r\n        args = args ? makeArray(args) : []; \r\n        args.__ctx__ = context;\r\n        this._resolve(args);\r\n        this._resolved = true;\r\n        return this;\r\n    };\r\n\r\n    Deferred.prototype.notify = function(value) {\r\n        try {\r\n            this[PGNOTIFIES].push(value);\r\n\r\n            return this[PGLISTENERS].forEach(function (listener) {\r\n                return listener(value);\r\n            });\r\n        } catch (error) {\r\n          this.reject(error);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    Deferred.prototype.reject = function(reason) {\r\n        var args = slice.call(arguments);\r\n        return this.rejectWith(null,args);\r\n    };\r\n\r\n    Deferred.prototype.rejectWith = function(context,args) {\r\n        args = args ? makeArray(args) : []; \r\n        args.__ctx__ = context;\r\n        this._reject(args);\r\n        this._rejected = true;\r\n        return this;\r\n    };\r\n\r\n    Deferred.prototype.isResolved = function() {\r\n        return !!this._resolved;\r\n    };\r\n\r\n    Deferred.prototype.isRejected = function() {\r\n        return !!this._rejected;\r\n    };\r\n\r\n    Deferred.prototype.then = function(callback, errback, progback) {\r\n        var p = result(this,\"promise\");\r\n        return p.then(callback, errback, progback);\r\n    };\r\n\r\n    Deferred.prototype.progress = function(progback){\r\n        var p = result(this,\"promise\");\r\n        return p.progress(progback);\r\n    };\r\n   \r\n    Deferred.prototype.catch = function(errback) {\r\n        var p = result(this,\"promise\");\r\n        return p.catch(errback);\r\n    };\r\n\r\n\r\n    Deferred.prototype.done  = function() {\r\n        var p = result(this,\"promise\");\r\n        return p.done.apply(p,arguments);\r\n    };\r\n\r\n    Deferred.prototype.fail = function(errback) {\r\n        var p = result(this,\"promise\");\r\n        return p.fail(errback);\r\n    };\r\n\r\n\r\n    Deferred.all = function(array) {\r\n        //return wrapPromise(Promise.all(array));\r\n        var d = new Deferred();\r\n        Promise.all(array).then(d.resolve.bind(d),d.reject.bind(d));\r\n        return result(d,\"promise\");\r\n    };\r\n\r\n    Deferred.first = function(array) {\r\n        return wrapPromise(Promise.race(array));\r\n    };\r\n\r\n\r\n    Deferred.when = function(valueOrPromise, callback, errback, progback) {\r\n        var receivedPromise = valueOrPromise && typeof valueOrPromise.then === \"function\";\r\n        var nativePromise = receivedPromise && valueOrPromise instanceof Promise;\r\n\r\n        if (!receivedPromise) {\r\n            if (arguments.length > 1) {\r\n                return callback ? callback(valueOrPromise) : valueOrPromise;\r\n            } else {\r\n                return new Deferred().resolve(valueOrPromise);\r\n            }\r\n        } else if (!nativePromise) {\r\n            var deferred = new Deferred(valueOrPromise.cancel);\r\n            valueOrPromise.then(proxy(deferred.resolve,deferred), proxy(deferred.reject,deferred), deferred.notify);\r\n            valueOrPromise = deferred.promise;\r\n        }\r\n\r\n        if (callback || errback || progback) {\r\n            return valueOrPromise.then(callback, errback, progback);\r\n        }\r\n        return valueOrPromise;\r\n    };\r\n\r\n    Deferred.reject = function(err) {\r\n        var d = new Deferred();\r\n        d.reject(err);\r\n        return d.promise;\r\n    };\r\n\r\n    Deferred.resolve = function(data) {\r\n        var d = new Deferred();\r\n        d.resolve.apply(d,arguments);\r\n        return d.promise;\r\n    };\r\n\r\n    Deferred.immediate = Deferred.resolve;\r\n\r\n    return Deferred;\r\n});\ndefine('skylark-langx/async',[\r\n    \"./Deferred\",\r\n    \"./objects\"\r\n],function(Deferred,objects){\r\n    var each = objects.each;\r\n    \r\n    var async = {\r\n        parallel : function(arr,args,ctx) {\r\n            var rets = [];\r\n            ctx = ctx || null;\r\n            args = args || [];\r\n\r\n            each(arr,function(i,func){\r\n                rets.push(func.apply(ctx,args));\r\n            });\r\n\r\n            return Deferred.all(rets);\r\n        },\r\n\r\n        series : function(arr,args,ctx) {\r\n            var rets = [],\r\n                d = new Deferred(),\r\n                p = d.promise;\r\n\r\n            ctx = ctx || null;\r\n            args = args || [];\r\n\r\n            d.resolve();\r\n            each(arr,function(i,func){\r\n                p = p.then(function(){\r\n                    return func.apply(ctx,args);\r\n                });\r\n                rets.push(p);\r\n            });\r\n\r\n            return Deferred.all(rets);\r\n        },\r\n\r\n        waterful : function(arr,args,ctx) {\r\n            var d = new Deferred(),\r\n                p = d.promise;\r\n\r\n            ctx = ctx || null;\r\n            args = args || [];\r\n\r\n            d.resolveWith(ctx,args);\r\n\r\n            each(arr,function(i,func){\r\n                p = p.then(func);\r\n            });\r\n            return p;\r\n        }\r\n    };\r\n\r\n\treturn async;\t\r\n});\ndefine('skylark-langx/datetimes',[],function(){\r\n     function parseMilliSeconds(str) {\r\n\r\n        var strs = str.split(' ');\r\n        var number = parseInt(strs[0]);\r\n\r\n        if (isNaN(number)){\r\n            return 0;\r\n        }\r\n\r\n        var min = 60000 * 60;\r\n\r\n        switch (strs[1].trim().replace(/\\./g, '')) {\r\n            case 'minutes':\r\n            case 'minute':\r\n            case 'min':\r\n            case 'mm':\r\n            case 'm':\r\n                return 60000 * number;\r\n            case 'hours':\r\n            case 'hour':\r\n            case 'HH':\r\n            case 'hh':\r\n            case 'h':\r\n            case 'H':\r\n                return min * number;\r\n            case 'seconds':\r\n            case 'second':\r\n            case 'sec':\r\n            case 'ss':\r\n            case 's':\r\n                return 1000 * number;\r\n            case 'days':\r\n            case 'day':\r\n            case 'DD':\r\n            case 'dd':\r\n            case 'd':\r\n                return (min * 24) * number;\r\n            case 'months':\r\n            case 'month':\r\n            case 'MM':\r\n            case 'M':\r\n                return (min * 24 * 28) * number;\r\n            case 'weeks':\r\n            case 'week':\r\n            case 'W':\r\n            case 'w':\r\n                return (min * 24 * 7) * number;\r\n            case 'years':\r\n            case 'year':\r\n            case 'yyyy':\r\n            case 'yy':\r\n            case 'y':\r\n                return (min * 24 * 365) * number;\r\n            default:\r\n                return 0;\r\n        }\r\n    };\r\n\t\r\n\treturn {\r\n\t\tparseMilliSeconds\r\n\t};\r\n});\ndefine('skylark-langx/Evented',[\r\n    \"./klass\",\r\n    \"./arrays\",\r\n    \"./objects\",\r\n\t\"./types\"\r\n],function(klass,arrays,objects,types){\r\n\tvar slice = Array.prototype.slice,\r\n        compact = arrays.compact,\r\n        isDefined = types.isDefined,\r\n        isPlainObject = types.isPlainObject,\r\n\t\tisFunction = types.isFunction,\r\n\t\tisString = types.isString,\r\n\t\tisEmptyObject = types.isEmptyObject,\r\n\t\tmixin = objects.mixin;\r\n\r\n    var Evented = klass({\r\n        on: function(events, selector, data, callback, ctx, /*used internally*/ one) {\r\n            var self = this,\r\n                _hub = this._hub || (this._hub = {});\r\n\r\n            if (isPlainObject(events)) {\r\n                ctx = callback;\r\n                each(events, function(type, fn) {\r\n                    self.on(type, selector, data, fn, ctx, one);\r\n                });\r\n                return this;\r\n            }\r\n\r\n            if (!isString(selector) && !isFunction(callback)) {\r\n                ctx = callback;\r\n                callback = data;\r\n                data = selector;\r\n                selector = undefined;\r\n            }\r\n\r\n            if (isFunction(data)) {\r\n                ctx = callback;\r\n                callback = data;\r\n                data = null;\r\n            }\r\n\r\n            if (isString(events)) {\r\n                events = events.split(/\\s/)\r\n            }\r\n\r\n            events.forEach(function(name) {\r\n                (_hub[name] || (_hub[name] = [])).push({\r\n                    fn: callback,\r\n                    selector: selector,\r\n                    data: data,\r\n                    ctx: ctx,\r\n                    one: one\r\n                });\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        one: function(events, selector, data, callback, ctx) {\r\n            return this.on(events, selector, data, callback, ctx, 1);\r\n        },\r\n\r\n        trigger: function(e /*,argument list*/ ) {\r\n            if (!this._hub) {\r\n                return this;\r\n            }\r\n\r\n            var self = this;\r\n\r\n            if (isString(e)) {\r\n                e = new CustomEvent(e);\r\n            }\r\n\r\n            Object.defineProperty(e,\"target\",{\r\n                value : this\r\n            });\r\n\r\n            var args = slice.call(arguments, 1);\r\n            if (isDefined(args)) {\r\n                args = [e].concat(args);\r\n            } else {\r\n                args = [e];\r\n            }\r\n            [e.type || e.name, \"all\"].forEach(function(eventName) {\r\n                var listeners = self._hub[eventName];\r\n                if (!listeners) {\r\n                    return;\r\n                }\r\n\r\n                var len = listeners.length,\r\n                    reCompact = false;\r\n\r\n                for (var i = 0; i < len; i++) {\r\n                    var listener = listeners[i];\r\n                    if (e.data) {\r\n                        if (listener.data) {\r\n                            e.data = mixin({}, listener.data, e.data);\r\n                        }\r\n                    } else {\r\n                        e.data = listener.data || null;\r\n                    }\r\n                    listener.fn.apply(listener.ctx, args);\r\n                    if (listener.one) {\r\n                        listeners[i] = null;\r\n                        reCompact = true;\r\n                    }\r\n                }\r\n\r\n                if (reCompact) {\r\n                    self._hub[eventName] = compact(listeners);\r\n                }\r\n\r\n            });\r\n            return this;\r\n        },\r\n\r\n        listened: function(event) {\r\n            var evtArr = ((this._hub || (this._events = {}))[event] || []);\r\n            return evtArr.length > 0;\r\n        },\r\n\r\n        listenTo: function(obj, event, callback, /*used internally*/ one) {\r\n            if (!obj) {\r\n                return this;\r\n            }\r\n\r\n            // Bind callbacks on obj,\r\n            if (isString(callback)) {\r\n                callback = this[callback];\r\n            }\r\n\r\n            if (one) {\r\n                obj.one(event, callback, this);\r\n            } else {\r\n                obj.on(event, callback, this);\r\n            }\r\n\r\n            //keep track of them on listening.\r\n            var listeningTo = this._listeningTo || (this._listeningTo = []),\r\n                listening;\r\n\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                if (listeningTo[i].obj == obj) {\r\n                    listening = listeningTo[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (!listening) {\r\n                listeningTo.push(\r\n                    listening = {\r\n                        obj: obj,\r\n                        events: {}\r\n                    }\r\n                );\r\n            }\r\n            var listeningEvents = listening.events,\r\n                listeningEvent = listeningEvents[event] = listeningEvents[event] || [];\r\n            if (listeningEvent.indexOf(callback) == -1) {\r\n                listeningEvent.push(callback);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        listenToOnce: function(obj, event, callback) {\r\n            return this.listenTo(obj, event, callback, 1);\r\n        },\r\n\r\n        off: function(events, callback) {\r\n            var _hub = this._hub || (this._hub = {});\r\n            if (isString(events)) {\r\n                events = events.split(/\\s/)\r\n            }\r\n\r\n            events.forEach(function(name) {\r\n                var evts = _hub[name];\r\n                var liveEvents = [];\r\n\r\n                if (evts && callback) {\r\n                    for (var i = 0, len = evts.length; i < len; i++) {\r\n                        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\r\n                            liveEvents.push(evts[i]);\r\n                    }\r\n                }\r\n\r\n                if (liveEvents.length) {\r\n                    _hub[name] = liveEvents;\r\n                } else {\r\n                    delete _hub[name];\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n        unlistenTo: function(obj, event, callback) {\r\n            var listeningTo = this._listeningTo;\r\n            if (!listeningTo) {\r\n                return this;\r\n            }\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                var listening = listeningTo[i];\r\n\r\n                if (obj && obj != listening.obj) {\r\n                    continue;\r\n                }\r\n\r\n                var listeningEvents = listening.events;\r\n                for (var eventName in listeningEvents) {\r\n                    if (event && event != eventName) {\r\n                        continue;\r\n                    }\r\n\r\n                    var listeningEvent = listeningEvents[eventName];\r\n\r\n                    for (var j = 0; j < listeningEvent.length; j++) {\r\n                        if (!callback || callback == listeningEvent[i]) {\r\n                            listening.obj.off(eventName, listeningEvent[i], this);\r\n                            listeningEvent[i] = null;\r\n                        }\r\n                    }\r\n\r\n                    listeningEvent = listeningEvents[eventName] = compact(listeningEvent);\r\n\r\n                    if (isEmptyObject(listeningEvent)) {\r\n                        listeningEvents[eventName] = null;\r\n                    }\r\n\r\n                }\r\n\r\n                if (isEmptyObject(listeningEvents)) {\r\n                    listeningTo[i] = null;\r\n                }\r\n            }\r\n\r\n            listeningTo = this._listeningTo = compact(listeningTo);\r\n            if (isEmptyObject(listeningTo)) {\r\n                this._listeningTo = null;\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n\treturn Evented;\r\n\r\n});\ndefine('skylark-langx/strings',[\r\n],function(){\r\n\r\n     /*\r\n     * Converts camel case into dashes.\r\n     * @param {String} str\r\n     * @return {String}\r\n     * @exapmle marginTop -> margin-top\r\n     */\r\n    function dasherize(str) {\r\n        return str.replace(/::/g, '/')\r\n            .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n            .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n            .replace(/_/g, '-')\r\n            .toLowerCase();\r\n    }\r\n\r\n    function deserializeValue(value) {\r\n        try {\r\n            return value ?\r\n                value == \"true\" ||\r\n                (value == \"false\" ? false :\r\n                    value == \"null\" ? null :\r\n                    +value + \"\" == value ? +value :\r\n                    /^[\\[\\{]/.test(value) ? JSON.parse(value) :\r\n                    value) : value;\r\n        } catch (e) {\r\n            return value;\r\n        }\r\n    }\r\n\r\n\r\n    function trim(str) {\r\n        return str == null ? \"\" : String.prototype.trim.call(str);\r\n    }\r\n    function substitute( /*String*/ template,\r\n        /*Object|Array*/\r\n        map,\r\n        /*Function?*/\r\n        transform,\r\n        /*Object?*/\r\n        thisObject) {\r\n        // summary:\r\n        //    Performs parameterized substitutions on a string. Throws an\r\n        //    exception if any parameter is unmatched.\r\n        // template:\r\n        //    a string with expressions in the form `${key}` to be replaced or\r\n        //    `${key:format}` which specifies a format function. keys are case-sensitive.\r\n        // map:\r\n        //    hash to search for substitutions\r\n        // transform:\r\n        //    a function to process all parameters before substitution takes\r\n\r\n\r\n        thisObject = thisObject || window;\r\n        transform = transform ?\r\n            proxy(thisObject, transform) : function(v) {\r\n                return v;\r\n            };\r\n\r\n        function getObject(key, map) {\r\n            if (key.match(/\\./)) {\r\n                var retVal,\r\n                    getValue = function(keys, obj) {\r\n                        var _k = keys.pop();\r\n                        if (_k) {\r\n                            if (!obj[_k]) return null;\r\n                            return getValue(keys, retVal = obj[_k]);\r\n                        } else {\r\n                            return retVal;\r\n                        }\r\n                    };\r\n                return getValue(key.split(\".\").reverse(), map);\r\n            } else {\r\n                return map[key];\r\n            }\r\n        }\r\n\r\n        return template.replace(/\\$\\{([^\\s\\:\\}]+)(?:\\:([^\\s\\:\\}]+))?\\}/g,\r\n            function(match, key, format) {\r\n                var value = getObject(key, map);\r\n                if (format) {\r\n                    value = getObject(format, thisObject).call(thisObject, value, key);\r\n                }\r\n                return transform(value, key).toString();\r\n            }); // String\r\n    }\r\n\r\n    var idCounter = 0;\r\n    function uniqueId (prefix) {\r\n        var id = ++idCounter + '';\r\n        return prefix ? prefix + id : id;\r\n    }\r\n\r\n\treturn {\r\n        camelCase: function(str) {\r\n            return str.replace(/-([\\da-z])/g, function(a) {\r\n                return a.toUpperCase().replace('-', '');\r\n            });\r\n        },\r\n\r\n        dasherize: dasherize,\r\n\r\n        deserializeValue: deserializeValue,\r\n\r\n        lowerFirst: function(str) {\r\n            return str.charAt(0).toLowerCase() + str.slice(1);\r\n        },\r\n\r\n        serializeValue: function(value) {\r\n            return JSON.stringify(value)\r\n        },\r\n\r\n\r\n        substitute: substitute,\r\n\r\n        trim: trim,\r\n\r\n        uniqueId: uniqueId,\r\n\r\n        upperFirst: function(str) {\r\n            return str.charAt(0).toUpperCase() + str.slice(1);\r\n        }\r\n\t} ; \r\n\r\n});\ndefine('skylark-langx/Xhr',[\r\n    \"./arrays\",\r\n    \"./Deferred\",\r\n    \"./Evented\",\r\n    \"./objects\",\r\n    \"./funcs\",\r\n    \"./types\"\r\n],function(arrays,Deferred,Evented,objects,funcs,types){\r\n    var each = objects.each,\r\n        mixin = objects.mixin,\r\n        noop = funcs.noop,\r\n        isArray = types.isArray,\r\n        isFunction = types.isFunction,\r\n        isPlainObject = types.isPlainObject,\r\n        type = types.type;\r\n \r\n     var getAbsoluteUrl = (function() {\r\n        var a;\r\n\r\n        return function(url) {\r\n            if (!a) a = document.createElement('a');\r\n            a.href = url;\r\n\r\n            return a.href;\r\n        };\r\n    })();\r\n   \r\n    var Xhr = (function(){\r\n        var jsonpID = 0,\r\n            key,\r\n            name,\r\n            rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            scriptTypeRE = /^(?:text|application)\\/javascript/i,\r\n            xmlTypeRE = /^(?:text|application)\\/xml/i,\r\n            jsonType = 'application/json',\r\n            htmlType = 'text/html',\r\n            blankRE = /^\\s*$/;\r\n\r\n        var XhrDefaultOptions = {\r\n            async: true,\r\n\r\n            // Default type of request\r\n            type: 'GET',\r\n            // Callback that is executed before request\r\n            beforeSend: noop,\r\n            // Callback that is executed if the request succeeds\r\n            success: noop,\r\n            // Callback that is executed the the server drops error\r\n            error: noop,\r\n            // Callback that is executed on request complete (both: error and success)\r\n            complete: noop,\r\n            // The context for the callbacks\r\n            context: null,\r\n            // Whether to trigger \"global\" Ajax events\r\n            global: true,\r\n\r\n            // MIME types mapping\r\n            // IIS returns Javascript as \"application/x-javascript\"\r\n            accepts: {\r\n                script: 'text/javascript, application/javascript, application/x-javascript',\r\n                json: 'application/json',\r\n                xml: 'application/xml, text/xml',\r\n                html: 'text/html',\r\n                text: 'text/plain'\r\n            },\r\n            // Whether the request is to another domain\r\n            crossDomain: false,\r\n            // Default timeout\r\n            timeout: 0,\r\n            // Whether data should be serialized to string\r\n            processData: true,\r\n            // Whether the browser should be allowed to cache GET responses\r\n            cache: true,\r\n\r\n            xhrFields : {\r\n                withCredentials : true\r\n            }\r\n        };\r\n\r\n        function mimeToDataType(mime) {\r\n            if (mime) {\r\n                mime = mime.split(';', 2)[0];\r\n            }\r\n            if (mime) {\r\n                if (mime == htmlType) {\r\n                    return \"html\";\r\n                } else if (mime == jsonType) {\r\n                    return \"json\";\r\n                } else if (scriptTypeRE.test(mime)) {\r\n                    return \"script\";\r\n                } else if (xmlTypeRE.test(mime)) {\r\n                    return \"xml\";\r\n                }\r\n            }\r\n            return \"text\";\r\n        }\r\n\r\n        function appendQuery(url, query) {\r\n            if (query == '') return url\r\n            return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n        }\r\n\r\n        // serialize payload and append it to the URL for GET requests\r\n        function serializeData(options) {\r\n            options.data = options.data || options.query;\r\n            if (options.processData && options.data && type(options.data) != \"string\") {\r\n                options.data = param(options.data, options.traditional);\r\n            }\r\n            if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) {\r\n                options.url = appendQuery(options.url, options.data);\r\n                options.data = undefined;\r\n            }\r\n        }\r\n\r\n        function serialize(params, obj, traditional, scope) {\r\n            var t, array = isArray(obj),\r\n                hash = isPlainObject(obj)\r\n            each(obj, function(key, value) {\r\n                t =type(value);\r\n                if (scope) key = traditional ? scope :\r\n                    scope + '[' + (hash || t == 'object' || t == 'array' ? key : '') + ']'\r\n                // handle data in serializeArray() format\r\n                if (!scope && array) params.add(value.name, value.value)\r\n                // recurse into nested objects\r\n                else if (t == \"array\" || (!traditional && t == \"object\"))\r\n                    serialize(params, value, traditional, key)\r\n                else params.add(key, value)\r\n            })\r\n        }\r\n\r\n        var param = function(obj, traditional) {\r\n            var params = []\r\n            params.add = function(key, value) {\r\n                if (isFunction(value)) value = value()\r\n                if (value == null) value = \"\"\r\n                this.push(escape(key) + '=' + escape(value))\r\n            }\r\n            serialize(params, obj, traditional)\r\n            return params.join('&').replace(/%20/g, '+')\r\n        };\r\n\r\n        var Xhr = Evented.inherit({\r\n            klassName : \"Xhr\",\r\n\r\n            _request  : function(args) {\r\n                var _ = this._,\r\n                    self = this,\r\n                    options = mixin({},XhrDefaultOptions,_.options,args),\r\n                    xhr = _.xhr = new XMLHttpRequest();\r\n\r\n                serializeData(options)\r\n\r\n                var dataType = options.dataType || options.handleAs,\r\n                    mime = options.mimeType || options.accepts[dataType],\r\n                    headers = options.headers,\r\n                    xhrFields = options.xhrFields,\r\n                    isFormData = options.data && options.data instanceof FormData,\r\n                    basicAuthorizationToken = options.basicAuthorizationToken,\r\n                    type = options.type,\r\n                    url = options.url,\r\n                    async = options.async,\r\n                    user = options.user , \r\n                    password = options.password,\r\n                    deferred = new Deferred(),\r\n                    contentType = isFormData ? false : 'application/x-www-form-urlencoded';\r\n\r\n                if (xhrFields) {\r\n                    for (name in xhrFields) {\r\n                        xhr[name] = xhrFields[name];\r\n                    }\r\n                }\r\n\r\n                if (mime && mime.indexOf(',') > -1) {\r\n                    mime = mime.split(',', 2)[0];\r\n                }\r\n                if (mime && xhr.overrideMimeType) {\r\n                    xhr.overrideMimeType(mime);\r\n                }\r\n\r\n                //if (dataType) {\r\n                //    xhr.responseType = dataType;\r\n                //}\r\n\r\n                var finish = function() {\r\n                    xhr.onloadend = noop;\r\n                    xhr.onabort = noop;\r\n                    xhr.onprogress = noop;\r\n                    xhr.ontimeout = noop;\r\n                    xhr = null;\r\n                }\r\n                var onloadend = function() {\r\n                    var result, error = false\r\n                    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && getAbsoluteUrl(url).startsWith('file:'))) {\r\n                        dataType = dataType || mimeToDataType(options.mimeType || xhr.getResponseHeader('content-type'));\r\n\r\n                        result = xhr.responseText;\r\n                        try {\r\n                            if (dataType == 'script') {\r\n                                eval(result);\r\n                            } else if (dataType == 'xml') {\r\n                                result = xhr.responseXML;\r\n                            } else if (dataType == 'json') {\r\n                                result = blankRE.test(result) ? null : JSON.parse(result);\r\n                            } else if (dataType == \"blob\") {\r\n                                result = Blob([xhrObj.response]);\r\n                            } else if (dataType == \"arraybuffer\") {\r\n                                result = xhr.reponse;\r\n                            }\r\n                        } catch (e) { \r\n                            error = e;\r\n                        }\r\n\r\n                        if (error) {\r\n                            deferred.reject(error,xhr.status,xhr);\r\n                        } else {\r\n                            deferred.resolve(result,xhr.status,xhr);\r\n                        }\r\n                    } else {\r\n                        deferred.reject(new Error(xhr.statusText),xhr.status,xhr);\r\n                    }\r\n                    finish();\r\n                };\r\n\r\n                var onabort = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"abort\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n \r\n                var ontimeout = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"timeout\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n\r\n                var onprogress = function(evt) {\r\n                    if (deferred) {\r\n                        deferred.notify(evt,xhr.status,xhr);\r\n                    }\r\n                }\r\n\r\n                xhr.onloadend = onloadend;\r\n                xhr.onabort = onabort;\r\n                xhr.ontimeout = ontimeout;\r\n                xhr.onprogress = onprogress;\r\n\r\n                xhr.open(type, url, async, user, password);\r\n               \r\n                if (headers) {\r\n                    for ( var key in headers) {\r\n                        var value = headers[key];\r\n \r\n                        if(key.toLowerCase() === 'content-type'){\r\n                            contentType = headers[hdr];\r\n                        } else {\r\n                           xhr.setRequestHeader(key, value);\r\n                        }\r\n                    }\r\n                }   \r\n\r\n                if  (contentType && contentType !== false){\r\n                    xhr.setRequestHeader('Content-Type', contentType);\r\n                }\r\n\r\n                if(!headers || !('X-Requested-With' in headers)){\r\n                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n                }\r\n\r\n\r\n                //If basicAuthorizationToken is defined set its value into \"Authorization\" header\r\n                if (basicAuthorizationToken) {\r\n                    xhr.setRequestHeader(\"Authorization\", basicAuthorizationToken);\r\n                }\r\n\r\n                xhr.send(options.data ? options.data : null);\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            \"abort\": function() {\r\n                var _ = this._,\r\n                    xhr = _.xhr;\r\n\r\n                if (xhr) {\r\n                    xhr.abort();\r\n                }    \r\n            },\r\n\r\n\r\n            \"request\": function(args) {\r\n                return this._request(args);\r\n            },\r\n\r\n            get : function(args) {\r\n                args = args || {};\r\n                args.type = \"GET\";\r\n                return this._request(args);\r\n            },\r\n\r\n            post : function(args) {\r\n                args = args || {};\r\n                args.type = \"POST\";\r\n                return this._request(args);\r\n            },\r\n\r\n            patch : function(args) {\r\n                args = args || {};\r\n                args.type = \"PATCH\";\r\n                return this._request(args);\r\n            },\r\n\r\n            put : function(args) {\r\n                args = args || {};\r\n                args.type = \"PUT\";\r\n                return this._request(args);\r\n            },\r\n\r\n            del : function(args) {\r\n                args = args || {};\r\n                args.type = \"DELETE\";\r\n                return this._request(args);\r\n            },\r\n\r\n            \"init\": function(options) {\r\n                this._ = {\r\n                    options : options || {}\r\n                };\r\n            }\r\n        });\r\n\r\n        [\"request\",\"get\",\"post\",\"put\",\"del\",\"patch\"].forEach(function(name){\r\n            Xhr[name] = function(url,args) {\r\n                var xhr = new Xhr({\"url\" : url});\r\n                return xhr[name](args);\r\n            };\r\n        });\r\n\r\n        Xhr.defaultOptions = XhrDefaultOptions;\r\n        Xhr.param = param;\r\n\r\n        return Xhr;\r\n    })();\r\n\r\n\treturn Xhr;\t\r\n});\ndefine('skylark-langx/Restful',[\r\n    \"./Evented\",\r\n    \"./objects\",\r\n    \"./strings\",\r\n    \"./Xhr\"\r\n],function(Evented,objects,strings,Xhr){\r\n    var mixin = objects.mixin,\r\n        substitute = strings.substitute;\r\n\r\n    var Restful = Evented.inherit({\r\n        \"klassName\" : \"Restful\",\r\n\r\n        \"idAttribute\": \"id\",\r\n        \r\n        getBaseUrl : function(args) {\r\n            //$$baseEndpoint : \"/files/${fileId}/comments\",\r\n            var baseEndpoint = substitute(this.baseEndpoint,args),\r\n                baseUrl = this.server + this.basePath + baseEndpoint;\r\n            if (args[this.idAttribute]!==undefined) {\r\n                baseUrl = baseUrl + \"/\" + args[this.idAttribute]; \r\n            }\r\n            return baseUrl;\r\n        },\r\n        _head : function(args) {\r\n            //get resource metadata .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n        },\r\n        _get : function(args) {\r\n            //get resource ,one or list .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, null if list\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            return Xhr.get(this.getBaseUrl(args),args);\r\n        },\r\n        _post  : function(args,verb) {\r\n            //create or move resource .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            //verb : the verb ,ex: copy,touch,trash,untrash,watch\r\n            var url = this.getBaseUrl(args);\r\n            if (verb) {\r\n                url = url + \"/\" + verb;\r\n            }\r\n            return Xhr.post(url, args);\r\n        },\r\n\r\n        _put  : function(args,verb) {\r\n            //update resource .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            //verb : the verb ,ex: copy,touch,trash,untrash,watch\r\n            var url = this.getBaseUrl(args);\r\n            if (verb) {\r\n                url = url + \"/\" + verb;\r\n            }\r\n            return Xhr.put(url, args);\r\n        },\r\n\r\n        _delete : function(args) {\r\n            //delete resource . \r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}         \r\n\r\n            // HTTP request : DELETE http://center.utilhub.com/registry/v1/apps/{appid}\r\n            var url = this.getBaseUrl(args);\r\n            return Xhr.del(url);\r\n        },\r\n\r\n        _patch : function(args){\r\n            //update resource metadata. \r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            var url = this.getBaseUrl(args);\r\n            return Xhr.patch(url, args);\r\n        },\r\n        query: function(params) {\r\n            \r\n            return this._post(params);\r\n        },\r\n\r\n        retrieve: function(params) {\r\n            return this._get(params);\r\n        },\r\n\r\n        create: function(params) {\r\n            return this._post(params);\r\n        },\r\n\r\n        update: function(params) {\r\n            return this._put(params);\r\n        },\r\n\r\n        delete: function(params) {\r\n            // HTTP request : DELETE http://center.utilhub.com/registry/v1/apps/{appid}\r\n            return this._delete(params);\r\n        },\r\n\r\n        patch: function(params) {\r\n           // HTTP request : PATCH http://center.utilhub.com/registry/v1/apps/{appid}\r\n            return this._patch(params);\r\n        },\r\n        init: function(params) {\r\n            mixin(this,params);\r\n //           this._xhr = XHRx();\r\n       }\r\n    });\r\n\r\n    return Restful;\r\n});\ndefine('skylark-langx/Stateful',[\r\n\t\"./Evented\",\r\n  \"./strings\",\r\n  \"./objects\"\r\n],function(Evented,strings,objects){\r\n    var isEqual = objects.isEqual,\r\n        mixin = objects.mixin,\r\n        result = objects.result,\r\n        isEmptyObject = objects.isEmptyObject,\r\n        clone = objects.clone,\r\n        uniqueId = strings.uniqueId;\r\n\r\n    var Stateful = Evented.inherit({\r\n        _construct : function(attributes, options) {\r\n            var attrs = attributes || {};\r\n            options || (options = {});\r\n            this.cid = uniqueId(this.cidPrefix);\r\n            this.attributes = {};\r\n            if (options.collection) this.collection = options.collection;\r\n            if (options.parse) attrs = this.parse(attrs, options) || {};\r\n            var defaults = result(this, 'defaults');\r\n            attrs = mixin({}, defaults, attrs);\r\n            this.set(attrs, options);\r\n            this.changed = {};\r\n        },\r\n\r\n        // A hash of attributes whose current and previous value differ.\r\n        changed: null,\r\n\r\n        // The value returned during the last failed validation.\r\n        validationError: null,\r\n\r\n        // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\r\n        // CouchDB users may want to set this to `\"_id\"`.\r\n        idAttribute: 'id',\r\n\r\n        // The prefix is used to create the client id which is used to identify models locally.\r\n        // You may want to override this if you're experiencing name clashes with model ids.\r\n        cidPrefix: 'c',\r\n\r\n\r\n        // Return a copy of the model's `attributes` object.\r\n        toJSON: function(options) {\r\n          return clone(this.attributes);\r\n        },\r\n\r\n\r\n        // Get the value of an attribute.\r\n        get: function(attr) {\r\n          return this.attributes[attr];\r\n        },\r\n\r\n        // Returns `true` if the attribute contains a value that is not null\r\n        // or undefined.\r\n        has: function(attr) {\r\n          return this.get(attr) != null;\r\n        },\r\n\r\n        // Set a hash of model attributes on the object, firing `\"change\"`. This is\r\n        // the core primitive operation of a model, updating the data and notifying\r\n        // anyone who needs to know about the change in state. The heart of the beast.\r\n        set: function(key, val, options) {\r\n          if (key == null) return this;\r\n\r\n          // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n          var attrs;\r\n          if (typeof key === 'object') {\r\n            attrs = key;\r\n            options = val;\r\n          } else {\r\n            (attrs = {})[key] = val;\r\n          }\r\n\r\n          options || (options = {});\r\n\r\n          // Run validation.\r\n          if (!this._validate(attrs, options)) return false;\r\n\r\n          // Extract attributes and options.\r\n          var unset      = options.unset;\r\n          var silent     = options.silent;\r\n          var changes    = [];\r\n          var changing   = this._changing;\r\n          this._changing = true;\r\n\r\n          if (!changing) {\r\n            this._previousAttributes = clone(this.attributes);\r\n            this.changed = {};\r\n          }\r\n\r\n          var current = this.attributes;\r\n          var changed = this.changed;\r\n          var prev    = this._previousAttributes;\r\n\r\n          // For each `set` attribute, update or delete the current value.\r\n          for (var attr in attrs) {\r\n            val = attrs[attr];\r\n            if (!isEqual(current[attr], val)) changes.push(attr);\r\n            if (!isEqual(prev[attr], val)) {\r\n              changed[attr] = val;\r\n            } else {\r\n              delete changed[attr];\r\n            }\r\n            unset ? delete current[attr] : current[attr] = val;\r\n          }\r\n\r\n          // Update the `id`.\r\n          if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\r\n\r\n          // Trigger all relevant attribute changes.\r\n          if (!silent) {\r\n            if (changes.length) this._pending = options;\r\n            for (var i = 0; i < changes.length; i++) {\r\n              this.trigger('change:' + changes[i], this, current[changes[i]], options);\r\n            }\r\n          }\r\n\r\n          // You might be wondering why there's a `while` loop here. Changes can\r\n          // be recursively nested within `\"change\"` events.\r\n          if (changing) return this;\r\n          if (!silent) {\r\n            while (this._pending) {\r\n              options = this._pending;\r\n              this._pending = false;\r\n              this.trigger('change', this, options);\r\n            }\r\n          }\r\n          this._pending = false;\r\n          this._changing = false;\r\n          return this;\r\n        },\r\n\r\n        // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\r\n        // if the attribute doesn't exist.\r\n        unset: function(attr, options) {\r\n          return this.set(attr, void 0, mixin({}, options, {unset: true}));\r\n        },\r\n\r\n        // Clear all attributes on the model, firing `\"change\"`.\r\n        clear: function(options) {\r\n          var attrs = {};\r\n          for (var key in this.attributes) attrs[key] = void 0;\r\n          return this.set(attrs, mixin({}, options, {unset: true}));\r\n        },\r\n\r\n        // Determine if the model has changed since the last `\"change\"` event.\r\n        // If you specify an attribute name, determine if that attribute has changed.\r\n        hasChanged: function(attr) {\r\n          if (attr == null) return !isEmptyObject(this.changed);\r\n          return this.changed[attr] !== undefined;\r\n        },\r\n\r\n        // Return an object containing all the attributes that have changed, or\r\n        // false if there are no changed attributes. Useful for determining what\r\n        // parts of a view need to be updated and/or what attributes need to be\r\n        // persisted to the server. Unset attributes will be set to undefined.\r\n        // You can also pass an attributes object to diff against the model,\r\n        // determining if there *would be* a change.\r\n        changedAttributes: function(diff) {\r\n          if (!diff) return this.hasChanged() ? clone(this.changed) : false;\r\n          var old = this._changing ? this._previousAttributes : this.attributes;\r\n          var changed = {};\r\n          for (var attr in diff) {\r\n            var val = diff[attr];\r\n            if (isEqual(old[attr], val)) continue;\r\n            changed[attr] = val;\r\n          }\r\n          return !isEmptyObject(changed) ? changed : false;\r\n        },\r\n\r\n        // Get the previous value of an attribute, recorded at the time the last\r\n        // `\"change\"` event was fired.\r\n        previous: function(attr) {\r\n          if (attr == null || !this._previousAttributes) return null;\r\n          return this._previousAttributes[attr];\r\n        },\r\n\r\n        // Get all of the attributes of the model at the time of the previous\r\n        // `\"change\"` event.\r\n        previousAttributes: function() {\r\n          return clone(this._previousAttributes);\r\n        },\r\n\r\n        // Create a new model with identical attributes to this one.\r\n        clone: function() {\r\n          return new this.constructor(this.attributes);\r\n        },\r\n\r\n        // A model is new if it has never been saved to the server, and lacks an id.\r\n        isNew: function() {\r\n          return !this.has(this.idAttribute);\r\n        },\r\n\r\n        // Check if the model is currently in a valid state.\r\n        isValid: function(options) {\r\n          return this._validate({}, mixin({}, options, {validate: true}));\r\n        },\r\n\r\n        // Run validation against the next complete set of model attributes,\r\n        // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\r\n        _validate: function(attrs, options) {\r\n          if (!options.validate || !this.validate) return true;\r\n          attrs = mixin({}, this.attributes, attrs);\r\n          var error = this.validationError = this.validate(attrs, options) || null;\r\n          if (!error) return true;\r\n          this.trigger('invalid', this, error, mixin(options, {validationError: error}));\r\n          return false;\r\n        }\r\n    });\r\n\r\n\treturn Stateful;\r\n});\ndefine('skylark-langx/langx',[\r\n    \"./skylark\",\r\n    \"./arrays\",\r\n    \"./ArrayStore\",\r\n    \"./aspect\",\r\n    \"./async\",\r\n    \"./datetimes\",\r\n    \"./Deferred\",\r\n    \"./Evented\",\r\n    \"./funcs\",\r\n    \"./klass\",\r\n    \"./numbers\",\r\n    \"./objects\",\r\n    \"./Restful\",\r\n    \"./Stateful\",\r\n    \"./strings\",\r\n    \"./types\",\r\n    \"./Xhr\"\r\n], function(skylark,arrays,ArrayStore,aspect,async,datetimes,Deferred,Evented,funcs,klass,numbers,objects,Restful,Stateful,strings,types,Xhr) {\r\n    \"use strict\";\r\n    var toString = {}.toString,\r\n        concat = Array.prototype.concat,\r\n        indexOf = Array.prototype.indexOf,\r\n        slice = Array.prototype.slice,\r\n        filter = Array.prototype.filter,\r\n        mixin = objects.mixin,\r\n        safeMixin = objects.safeMixin,\r\n        isFunction = types.isFunction;\r\n\r\n\r\n    function createEvent(type, props) {\r\n        var e = new CustomEvent(type, props);\r\n\r\n        return safeMixin(e, props);\r\n    }\r\n    \r\n\r\n    function funcArg(context, arg, idx, payload) {\r\n        return isFunction(arg) ? arg.call(context, idx, payload) : arg;\r\n    }\r\n\r\n    function getQueryParams(url) {\r\n        var url = url || window.location.href,\r\n            segs = url.split(\"?\"),\r\n            params = {};\r\n\r\n        if (segs.length > 1) {\r\n            segs[1].split(\"&\").forEach(function(queryParam) {\r\n                var nv = queryParam.split('=');\r\n                params[nv[0]] = nv[1];\r\n            });\r\n        }\r\n        return params;\r\n    }\r\n\r\n\r\n    function toPixel(value) {\r\n        // style values can be floats, client code may want\r\n        // to round for integer pixels.\r\n        return parseFloat(value) || 0;\r\n    }\r\n\r\n\r\n    var _uid = 1;\r\n\r\n    function uid(obj) {\r\n        return obj._uid || (obj._uid = _uid++);\r\n    }\r\n\r\n    function langx() {\r\n        return langx;\r\n    }\r\n\r\n    mixin(langx, {\r\n        createEvent : createEvent,\r\n\r\n        funcArg: funcArg,\r\n\r\n        getQueryParams: getQueryParams,\r\n\r\n        toPixel: toPixel,\r\n\r\n        uid: uid,\r\n\r\n        URL: typeof window !== \"undefined\" ? window.URL || window.webkitURL : null\r\n\r\n    });\r\n\r\n\r\n    mixin(langx, arrays,aspect,datetimes,funcs,numbers,objects,strings,types,{\r\n        ArrayStore : ArrayStore,\r\n\r\n        async : async,\r\n        \r\n        Deferred: Deferred,\r\n\r\n        Evented: Evented,\r\n\r\n        klass : klass,\r\n\r\n        Restful: Restful,\r\n        \r\n        Stateful: Stateful,\r\n\r\n        Xhr: Xhr\r\n\r\n    });\r\n\r\n    return skylark.langx = langx;\r\n});\ndefine('skylark-utils-codec/codec',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n\tvar codec = skylark.codec = {\r\n\r\n\t};\r\n\r\n\treturn codec;\r\n});\ndefine('skylark-utils-codec/base64',[\r\n    \"skylark-langx/langx\",\r\n    \"./codec\"\r\n], function(langx,codec) {\r\n\r\n    var base64 = function() {\r\n        return base64;\r\n    }\r\n\r\n\tvar p=\"=\";\r\n\tvar tab=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n\tbase64.encode=function(/* byte[] */ba){\r\n\t\t// summary:\r\n\t\t//\t\tEncode an array of bytes as a base64-encoded string\r\n\t\tvar s=[], l=ba.length;\r\n\t\tvar rm=l%3;\r\n\t\tvar x=l-rm;\r\n\t\tfor (var i=0; i<x;){\r\n\t\t\tvar t=ba[i++]<<16|ba[i++]<<8|ba[i++];\r\n\t\t\ts.push(tab.charAt((t>>>18)&0x3f));\r\n\t\t\ts.push(tab.charAt((t>>>12)&0x3f));\r\n\t\t\ts.push(tab.charAt((t>>>6)&0x3f));\r\n\t\t\ts.push(tab.charAt(t&0x3f));\r\n\t\t}\r\n\t\t//\tdeal with trailers, based on patch from Peter Wood.\r\n\t\tswitch(rm){\r\n\t\t\tcase 2:{\r\n\t\t\t\tvar t=ba[i++]<<16|ba[i++]<<8;\r\n\t\t\t\ts.push(tab.charAt((t>>>18)&0x3f));\r\n\t\t\t\ts.push(tab.charAt((t>>>12)&0x3f));\r\n\t\t\t\ts.push(tab.charAt((t>>>6)&0x3f));\r\n\t\t\t\ts.push(p);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 1:{\r\n\t\t\t\tvar t=ba[i++]<<16;\r\n\t\t\t\ts.push(tab.charAt((t>>>18)&0x3f));\r\n\t\t\t\ts.push(tab.charAt((t>>>12)&0x3f));\r\n\t\t\t\ts.push(p);\r\n\t\t\t\ts.push(p);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn s.join(\"\");\t//\tstring\r\n\t};\r\n\r\n\tbase64.decode=function(/* string */str){\r\n\t\t// summary:\r\n\t\t//\t\tConvert a base64-encoded string to an array of bytes\r\n\t\tvar s=str.split(\"\"), out=[];\r\n\t\tvar l=s.length;\r\n\t\twhile(s[--l]==p){ }\t//\tstrip off trailing padding\r\n\t\tfor (var i=0; i<l;){\r\n\t\t\tvar t=tab.indexOf(s[i++])<<18;\r\n\t\t\tif(i<=l){ t|=tab.indexOf(s[i++])<<12 };\r\n\t\t\tif(i<=l){ t|=tab.indexOf(s[i++])<<6 };\r\n\t\t\tif(i<=l){ t|=tab.indexOf(s[i++]) };\r\n\t\t\tout.push((t>>>16)&0xff);\r\n\t\t\tout.push((t>>>8)&0xff);\r\n\t\t\tout.push(t&0xff);\r\n\t\t}\r\n\t\t//\tstrip off any null bytes\r\n\t\twhile(out[out.length-1]==0){ out.pop(); }\r\n\t\treturn out;\t//\tbyte[]\r\n\t};\r\n\r\n    return codec.base64 = base64;\r\n});\r\n\ndefine('skylark-utils-stream/streams',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n\r\n\r\n\r\n\r\n    var streams = function() {\r\n        return streams;\r\n    }\r\n\r\n    langx.mixin(streams,{\r\n    \t\"Stream\" : Stream,\r\n        \"DecodeStream\" : DecodeStream\r\n    });\r\n\r\n    return skylark.streams = streams;\r\n});\r\n\ndefine('skylark-utils-stream/Stream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\"\r\n], function(skylark, langx,streams) {\r\n\r\n   \tvar Stream = langx.Evented.inherit({\r\n        klassName: \"Stream\",\r\n        init: function(arrayBuffer, start, length, dict) {\r\n\t        this.bytes = new Uint8Array(arrayBuffer);\r\n\t        this.start = start || 0;\r\n\t        this.pos = this.start;\r\n\t        this.end = (start + length) || this.bytes.length;\r\n\t        this.dict = dict;\r\n        },\r\n\r\n\r\n        length : {\r\n        \tget : function() {\r\n            \treturn this.end - this.start;\r\n        \t}\r\n        },\r\n\r\n        getByte: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return this.bytes[this.pos++];\r\n        },\r\n        // returns subarray of original buffer\r\n        // should only be read\r\n        getBytes: function (length) {\r\n            var bytes = this.bytes;\r\n            var pos = this.pos;\r\n            var strEnd = this.end;\r\n\r\n            if (!length)\r\n                return bytes.subarray(pos, strEnd);\r\n\r\n            var end = pos + length;\r\n            if (end > strEnd)\r\n                end = strEnd;\r\n\r\n            this.pos = end;\r\n            return bytes.subarray(pos, end);\r\n        },\r\n\r\n        lookChar: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return String.fromCharCode(this.bytes[this.pos]);\r\n        },\r\n        getChar: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return String.fromCharCode(this.bytes[this.pos++]);\r\n        },\r\n        skip: function (n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n        reset: function () {\r\n            this.pos = this.start;\r\n        },\r\n        moveStart: function () {\r\n            this.start = this.pos;\r\n        },\r\n        makeSubStream: function (start, length, dict) {\r\n            return new Stream(this.bytes.buffer, start, length, dict);\r\n        },\r\n        isStream: true\r\n    });\r\n    \r\n    return streams.Stream = Stream;\r\n\t\r\n});\r\n\ndefine('skylark-utils-stream/DecodeStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./Stream\"\r\n], function(skylark, langx, streams, Stream) {\r\n\r\n    var DecodeStream = Stream.inherit({\r\n        klassName : \"DecodeStream\",\r\n\r\n        init : function() {\r\n            this.pos = 0;\r\n            this.bufferLength = 0;\r\n            this.eof = false;\r\n            this.buffer = null;     \r\n        },\r\n\r\n        ensureBuffer: function(requested) {\r\n            var buffer = this.buffer;\r\n            var current = buffer ? buffer.byteLength : 0;\r\n            if (requested < current)\r\n                return buffer;\r\n            var size = 512;\r\n            while (size < requested)\r\n                size <<= 1;\r\n            var buffer2 = new Uint8Array(size);\r\n            for (var i = 0; i < current; ++i)\r\n                buffer2[i] = buffer[i];\r\n            return (this.buffer = buffer2);\r\n        },\r\n        getByte: function () {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return this.buffer[this.pos++];\r\n        },\r\n        getBytes: function(length) {\r\n            var end, pos = this.pos;\r\n\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n\r\n                while (!this.eof && this.bufferLength < end)\r\n                    this.readBlock();\r\n\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd)\r\n                    end = bufEnd;\r\n            } else {\r\n                while (!this.eof)\r\n                    this.readBlock();\r\n\r\n                end = this.bufferLength;\r\n\r\n                // checking if bufferLength is still 0 then\r\n                // the buffer has to be initialized\r\n                if (!end)\r\n                    this.buffer = new Uint8Array(0);\r\n            }\r\n\r\n            this.pos = end;\r\n            return this.buffer.subarray(pos, end);\r\n        },\r\n        lookChar: function() {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return String.fromCharCode(this.buffer[this.pos]);\r\n        },\r\n        getChar: function () {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return String.fromCharCode(this.buffer[this.pos++]);\r\n        },\r\n        makeSubStream: function (start, length, dict) {\r\n            var end = start + length;\r\n            while (this.bufferLength <= end && !this.eof)\r\n                this.readBlock();\r\n            return new Stream(this.buffer, start, length, dict);\r\n        },\r\n        skip: function (n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n        reset: function () {\r\n            this.pos = 0;\r\n        }\r\n\r\n    });\r\n\r\n    return stream.DecodeStream = DecodeStream;\r\n\r\n});\r\n\ndefine('skylark-utils-codec/jbig2',[\n  \"skylark-langx/langx\",\n  \"skylark-utils-stream/DecodeStream\",\n  \"./codec\"\n],function(langx,DecodeStream,codec){\n  'use strict';\n\n   //The module code is based from mozilla/pdf.js/\n   // original : https://github.com/mozilla/pdf.js/blob/master/src/core/jbig2.js\n   // license  : Apache 2\n\n  // Annex E. Arithmetic Coding\n\n    var QeTable = [\n      {qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1},\n      {qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0},\n      {qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0},\n      {qe: 0x0AC1, nmps: 4, nlps: 12, switchFlag: 0},\n      {qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0},\n      {qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0},\n      {qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1},\n      {qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0},\n      {qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0},\n      {qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0},\n      {qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0},\n      {qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0},\n      {qe: 0x1C01, nmps: 13, nlps: 20, switchFlag: 0},\n      {qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0},\n      {qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1},\n      {qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0},\n      {qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0},\n      {qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0},\n      {qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0},\n      {qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0},\n      {qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0},\n      {qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0},\n      {qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0},\n      {qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0},\n      {qe: 0x1C01, nmps: 25, nlps: 22, switchFlag: 0},\n      {qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0},\n      {qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0},\n      {qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0},\n      {qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0},\n      {qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0},\n      {qe: 0x0AC1, nmps: 31, nlps: 28, switchFlag: 0},\n      {qe: 0x09C1, nmps: 32, nlps: 29, switchFlag: 0},\n      {qe: 0x08A1, nmps: 33, nlps: 30, switchFlag: 0},\n      {qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0},\n      {qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0},\n      {qe: 0x02A1, nmps: 36, nlps: 33, switchFlag: 0},\n      {qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0},\n      {qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0},\n      {qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0},\n      {qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0},\n      {qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0},\n      {qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0},\n      {qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0},\n      {qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0},\n      {qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0},\n      {qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0},\n      {qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0}\n    ];\n\n  var ArithmeticDecoder = langx.klass({\n      \"klassName\" : \"ArithmeticDecoder\",\n\n      byteIn: function ArithmeticDecoder_byteIn() {\n        var data = this.data;\n        var bp = this.bp;\n        if (data[bp] == 0xFF) {\n          var b1 = data[bp + 1];\n          if (b1 > 0x8F) {\n            this.clow += 0xFF00;\n            this.ct = 8;\n          } else {\n            bp++;\n            this.clow += (data[bp] << 9);\n            this.ct = 7;\n            this.bp = bp;\n          }\n        } else {\n          bp++;\n          this.clow += bp < this.dataEnd ? (data[bp] << 8) : 0xFF00;\n          this.ct = 8;\n          this.bp = bp;\n        }\n        if (this.clow > 0xFFFF) {\n          this.chigh += (this.clow >> 16);\n          this.clow &= 0xFFFF;\n        }\n      },\n      readBit: function ArithmeticDecoder_readBit(contexts, pos) {\n        // contexts are packed into 1 byte: \n        // highest 7 bits carry cx.index, lowest bit carries cx.mps\n        var cx_index = contexts[pos] >> 1, cx_mps = contexts[pos] & 1;\n        var qeTableIcx = QeTable[cx_index];\n        var qeIcx = qeTableIcx.qe;\n        var nmpsIcx = qeTableIcx.nmps;\n        var nlpsIcx = qeTableIcx.nlps;\n        var switchIcx = qeTableIcx.switchFlag;\n        var d;\n        this.a -= qeIcx;\n\n        if (this.chigh < qeIcx) {\n          // exchangeLps\n          if (this.a < qeIcx) {\n            this.a = qeIcx;\n            d = cx_mps;\n            cx_index = nmpsIcx;\n          } else {\n            this.a = qeIcx;\n            d = 1 - cx_mps;\n            if (switchIcx) {\n              cx_mps = d;\n            }\n            cx_index = nlpsIcx;\n          }\n        } else {\n          this.chigh -= qeIcx;\n          if ((this.a & 0x8000) !== 0) {\n            return cx_mps;\n          }\n          // exchangeMps\n          if (this.a < qeIcx) {\n            d = 1 - cx_mps;\n            if (switchIcx) {\n              cx_mps = d;\n            }\n            cx_index = nlpsIcx;\n          } else {\n            d = cx_mps;\n            cx_index = nmpsIcx;\n          }\n        }\n        // renormD;\n        do {\n          if (this.ct === 0)\n            this.byteIn();\n\n          this.a <<= 1;\n          this.chigh = ((this.chigh << 1) & 0xFFFF) | ((this.clow >> 15) & 1);\n          this.clow = (this.clow << 1) & 0xFFFF;\n          this.ct--;\n        } while ((this.a & 0x8000) === 0);\n\n        contexts[pos] = cx_index << 1 | cx_mps;\n        return d;\n      },\n  \n      \"init\" : function (data, start, end) {\n        this.data = data;\n        this.bp = start;\n        this.dataEnd = end;\n\n        this.chigh = data[start];\n        this.clow = 0;\n\n        this.byteIn();\n\n        this.chigh = ((this.chigh << 7) & 0xFFFF) | ((this.clow >> 9) & 0x7F);\n        this.clow = (this.clow << 7) & 0xFFFF;\n        this.ct -= 7;\n        this.a = 0x8000;\n    }\n\n  });\n\n\n   // Utility data structures\n  var ContextCache = langx.klass({\n    getContexts: function(id) {\n      if (id in this)\n        return this[id];\n      return (this[id] = new Int8Array(1<<16));\n    }\n  });\n\n  var DecodingContext = langx.klass({\n    \"decoder\" : {\n      get : function() {\n        var decoder = new ArithmeticDecoder(this.data, this.start, this.end);\n        return shadow(this, 'decoder', decoder);\n      }\n    },\n    \"contextCache\" : {\n      get : function() {\n        var cache = new ContextCache();\n        return shadow(this, 'contextCache', cache);\n      }\n    },\n    \"init\" : function (data, start, end) {\n      this.data = data;\n      this.start = start;\n      this.end = end;\n    }\n\n\n  });\n\n  // Annex A. Arithmetic Integer Decoding Procedure\n  // A.2 Procedure for decoding values\n  function decodeInteger(contextCache, procedure, decoder) {\n    var contexts = contextCache.getContexts(procedure);\n\n    var prev = 1;\n    var state = 1, v = 0, s;\n    var toRead = 32, offset = 4436; // defaults for state 7\n    while (state) {\n      var bit = decoder.readBit(contexts, prev);\n      prev = prev < 256 ? (prev << 1) | bit :\n        (((prev << 1) | bit) & 511) | 256;\n      switch (state) {\n        case 1:\n          s = !!bit;\n          break;\n        case 2:\n          if (bit) break;\n          state = 7;\n          toRead = 2;\n          offset = 0;\n          break;\n        case 3:\n          if (bit) break;\n          state = 7;\n          toRead = 4;\n          offset = 4;\n          break;\n        case 4:\n          if (bit) break;\n          state = 7;\n          toRead = 6;\n          offset = 20;\n          break;\n        case 5:\n          if (bit) break;\n          state = 7;\n          toRead = 8;\n          offset = 84;\n          break;\n        case 6:\n          if (bit) break;\n          state = 7;\n          toRead = 12;\n          offset = 340;\n          break;\n        default:\n          v = v * 2 + bit;\n          if (--toRead === 0)\n            state = 0;\n          continue;\n      }\n      state++;\n    }\n    v += offset;\n    return !s ? v : v > 0 ? -v : null;\n  }\n\n  // A.3 The IAID decoding procedure\n  function decodeIAID(contextCache, decoder, codeLength) {\n    var contexts = contextCache.getContexts('IAID');\n\n    var prev = 1;\n    for (var i = 0; i < codeLength; i++) {\n      var bit = decoder.readBit(contexts, prev);\n      prev = (prev * 2) + bit;\n    }\n    if (codeLength < 31)\n      return prev & ((1 << codeLength) - 1);\n    else\n      return prev - Math.pow(2, codeLength);\n  }\n\n  // 7.3 Segment types\n  var SegmentTypes = [\n    'SymbolDictionary', null, null, null, 'IntermediateTextRegion', null,\n    'ImmediateTextRegion', 'ImmediateLosslessTextRegion', null, null, null,\n    null, null, null, null, null, 'patternDictionary', null, null, null,\n    'IntermediateHalftoneRegion', null, 'ImmediateHalftoneRegion',\n    'ImmediateLosslessHalftoneRegion', null, null, null, null, null, null, null,\n    null, null, null, null, null, 'IntermediateGenericRegion', null,\n    'ImmediateGenericRegion', 'ImmediateLosslessGenericRegion',\n    'IntermediateGenericRefinementRegion', null,\n    'ImmediateGenericRefinementRegion',\n    'ImmediateLosslessGenericRefinementRegion', null, null, null, null,\n    'PageInformation', 'EndOfPage', 'EndOfStripe', 'EndOfFile', 'Profiles',\n    'Tables', null, null, null, null, null, null, null, null,\n    'Extension'\n  ];\n\n  var CodingTemplates = [\n    [{x: -1, y: -2}, {x: 0, y: -2}, {x: 1, y: -2}, {x: -2, y: -1},\n     {x: -1, y: -1}, {x: 0, y: -1}, {x: 1, y: -1}, {x: 2, y: -1},\n     {x: -4, y: 0}, {x: -3, y: 0}, {x: -2, y: 0}, {x: -1, y: 0}],\n    [{x: -1, y: -2}, {x: 0, y: -2}, {x: 1, y: -2}, {x: 2, y: -2},\n     {x: -2, y: -1}, {x: -1, y: -1}, {x: 0, y: -1}, {x: 1, y: -1},\n     {x: 2, y: -1}, {x: -3, y: 0}, {x: -2, y: 0}, {x: -1, y: 0}],\n    [{x: -1, y: -2}, {x: 0, y: -2}, {x: 1, y: -2}, {x: -2, y: -1},\n     {x: -1, y: -1}, {x: 0, y: -1}, {x: 1, y: -1}, {x: -2, y: 0},\n     {x: -1, y: 0}],\n    [{x: -3, y: -1}, {x: -2, y: -1}, {x: -1, y: -1}, {x: 0, y: -1},\n     {x: 1, y: -1}, {x: -4, y: 0}, {x: -3, y: 0}, {x: -2, y: 0}, {x: -1, y: 0}]\n  ];\n\n  var RefinementTemplates = [\n    {\n      coding: [{x: 0, y: -1}, {x: 1, y: -1}, {x: -1, y: 0}],\n      reference: [{x: 0, y: -1}, {x: 1, y: -1}, {x: -1, y: 0}, {x: 0, y: 0},\n                  {x: 1, y: 0}, {x: -1, y: 1}, {x: 0, y: 1}, {x: 1, y: 1}]\n    },\n    {\n      coding: [{x: -1, y: -1}, {x: 0, y: -1}, {x: 1, y: -1}, {x: -1, y: 0}],\n      reference: [{x: 0, y: -1}, {x: -1, y: 0}, {x: 0, y: 0}, {x: 1, y: 0},\n                  {x: 0, y: 1}, {x: 1, y: 1}]\n    }\n  ];\n\n  var ReusedContexts = [\n    0x1CD3, // '00111001101' (template) + '0011' (at),\n    0x079A, // '001111001101' + '0',\n    0x00E3, // '001110001' + '1',\n    0x018B  // '011000101' + '1'\n  ];\n\n  var RefinementReusedContexts = [\n    0x0020, // '000' + '0' (coding) + '00010000' + '0' (reference)\n    0x0008  // '0000' + '001000'\n  ];\n\n  function log2(x) {\n    var n = 1, i = 0;\n    while (x > n) {\n      n <<= 1;\n      i++;\n    }\n    return i;\n  }\n\n  function readInt32(data, start) {\n    return (data[start] << 24) | (data[start + 1] << 16) |\n           (data[start + 2] << 8) | data[start + 3];\n  }\n\n  function readUint32(data, start) {\n    var value = readInt32(data, start);\n    return value & 0x80000000 ? (value + 4294967296) : value;\n  }\n\n  function readUint16(data, start) {\n    return (data[start] << 8) | data[start + 1];\n  }\n\n  function readInt8(data, start) {\n    return (data[start] << 24) >> 24;\n  }\n\n  // 6.2 Generic Region Decoding Procedure\n  function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at,\n                        decodingContext) {\n    if (mmr)\n      error('JBIG2 error: MMR encoding is not supported');\n\n    var useskip = !!skip;\n    var template = CodingTemplates[templateIndex].concat(at);\n    var templateLength = template.length;\n    var templateX = new Int32Array(templateLength);\n    var templateY = new Int32Array(templateLength);\n    for (var k = 0; k < templateLength; k++) {\n      templateX[k] = template[k].x;\n      templateY[k] = template[k].y;\n    }\n\n    var pseudoPixelContext = ReusedContexts[templateIndex];\n    var bitmap = [];\n\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts('GB');\n\n    var ltp = 0;\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n      }\n      if (ltp) {\n        bitmap.push(bitmap[bitmap.length - 1]); // duplicate previous row\n        continue;\n      }\n      var row = new Uint8Array(width);\n      bitmap.push(row);\n      for (var j = 0; j < width; j++) {\n        if (useskip && skip[i][j]) {\n          row[j] = 0;\n          continue;\n        }\n        var contextLabel = 0;\n        for (var k = 0; k < templateLength; k++) {\n          var i0 = i + templateY[k], j0 = j + templateX[k];\n          if (i0 < 0 || j0 < 0 || j0 >= width)\n            contextLabel <<= 1; // out of bound pixel\n          else\n            contextLabel = (contextLabel << 1) | bitmap[i0][j0];\n        }\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n    return bitmap;\n  }\n\n  // 6.3.2 Generic Refinement Region Decoding Procedure\n  function decodeRefinement(width, height, templateIndex, referenceBitmap,\n                            offsetX, offsetY, prediction, at,\n                            decodingContext) {\n    var codingTemplate = RefinementTemplates[templateIndex].coding;\n    if (templateIndex === 0)\n      codingTemplate = codingTemplate.concat([at[0]]);\n    var codingTemplateLength = codingTemplate.length;\n    var codingTemplateX = new Int32Array(codingTemplateLength);\n    var codingTemplateY = new Int32Array(codingTemplateLength);\n    for (var k = 0; k < codingTemplateLength; k++) {\n      codingTemplateX[k] = codingTemplate[k].x;\n      codingTemplateY[k] = codingTemplate[k].y;\n    }\n    var referenceTemplate = RefinementTemplates[templateIndex].reference;\n    if (templateIndex === 0)\n      referenceTemplate = referenceTemplate.concat([at[1]]);\n    var referenceTemplateLength = referenceTemplate.length;\n    var referenceTemplateX = new Int32Array(referenceTemplateLength);\n    var referenceTemplateY = new Int32Array(referenceTemplateLength);\n    for (var k = 0; k < referenceTemplateLength; k++) {\n      referenceTemplateX[k] = referenceTemplate[k].x;\n      referenceTemplateY[k] = referenceTemplate[k].y;\n    }\n    var referenceWidth = referenceBitmap[0].length;\n    var referenceHeight = referenceBitmap.length;\n\n    var pseudoPixelContext = RefinementReusedContexts[templateIndex];\n    var bitmap = [];\n\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts('GR');\n\n    var ltp = 0;\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n      }\n      var row = new Uint8Array(width);\n      bitmap.push(row);\n      for (var j = 0; j < width; j++) {\n        if (ltp)\n          error('JBIG2 error: prediction is not supported');\n\n        var contextLabel = 0;\n        for (var k = 0; k < codingTemplateLength; k++) {\n          var i0 = i + codingTemplateY[k], j0 = j + codingTemplateX[k];\n          if (i0 < 0 || j0 < 0 || j0 >= width)\n            contextLabel <<= 1; // out of bound pixel\n          else\n            contextLabel = (contextLabel << 1) | bitmap[i0][j0];\n        }\n        for (var k = 0; k < referenceTemplateLength; k++) {\n          var i0 = i + referenceTemplateY[k] + offsetY;\n          var j0 = j + referenceTemplateX[k] + offsetX;\n          if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth)\n            contextLabel <<= 1; // out of bound pixel\n          else\n            contextLabel = (contextLabel << 1) | referenceBitmap[i0][j0];\n        }\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  // 6.5.5 Decoding the symbol dictionary\n  function decodeSymbolDictionary(huffman, refinement, symbols,\n                                  numberOfNewSymbols, numberOfExportedSymbols,\n                                  huffmanTables, templateIndex, at,\n                                  refinementTemplateIndex, refinementAt,\n                                  decodingContext) {\n    if (huffman)\n      error('JBIG2 error: huffman is not supported');\n\n    var newSymbols = [];\n    var currentHeight = 0;\n    var symbolCodeLength = log2(symbols.length + numberOfNewSymbols);\n\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n\n    while (newSymbols.length < numberOfNewSymbols) {\n      var deltaHeight = decodeInteger(contextCache, 'IADH', decoder); // 6.5.6\n      currentHeight += deltaHeight;\n      var currentWidth = 0;\n      var totalWidth = 0;\n      while (true) {\n        var deltaWidth = decodeInteger(contextCache, 'IADW', decoder); // 6.5.7\n        if (deltaWidth === null)\n          break; // OOB\n        currentWidth += deltaWidth;\n        totalWidth += currentWidth;\n        var bitmap;\n        if (refinement) {\n          // 6.5.8.2 Refinement/aggregate-coded symbol bitmap\n          var numberOfInstances = decodeInteger(contextCache, 'IAAI', decoder);\n          if (numberOfInstances > 1)\n            error('JBIG2 error: number of instances > 1 is not supported');\n          var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n          var rdx = decodeInteger(contextCache, 'IARDX', decoder); // 6.4.11.3\n          var rdy = decodeInteger(contextCache, 'IARDY', decoder); // 6.4.11.4\n          var symbol = symbolId < symbols.length ? symbols[symbolId] :\n            newSymbols[symbolId - symbols.length];\n          bitmap = decodeRefinement(currentWidth, currentHeight,\n            refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt,\n            decodingContext);\n        } else {\n          // 6.5.8.1 Direct-coded symbol bitmap\n          bitmap = decodeBitmap(false, currentWidth, currentHeight,\n            templateIndex, false, null, at, decodingContext);\n        }\n        newSymbols.push(bitmap);\n      }\n    }\n    // 6.5.10 Exported symbols\n    var exportedSymbols = [];\n    var flags = [], currentFlag = false;\n    var totalSymbolsLength = symbols.length + numberOfNewSymbols;\n    while (flags.length < totalSymbolsLength) {\n      var runLength = decodeInteger(contextCache, 'IAEX', decoder);\n      while (runLength--)\n        flags.push(currentFlag);\n      currentFlag = !currentFlag;\n    }\n    for (var i = 0, ii = symbols.length; i < ii; i++)\n      if (flags[i]) exportedSymbols.push(symbols[i]);\n    for (var j = 0; j < numberOfNewSymbols; i++, j++)\n      if (flags[i]) exportedSymbols.push(newSymbols[j]);\n    return exportedSymbols;\n  }\n\n  function decodeTextRegion(huffman, refinement, width, height,\n                            defaultPixelValue, numberOfSymbolInstances,\n                            stripSize, inputSymbols, symbolCodeLength,\n                            transposed, dsOffset, referenceCorner,\n                            combinationOperator, huffmanTables,\n                            refinementTemplateIndex, refinementAt,\n                            decodingContext) {\n    if (huffman)\n      error('JBIG2 error: huffman is not supported');\n\n    // Prepare bitmap\n    var bitmap = [];\n    for (var i = 0; i < height; i++) {\n      var row = new Uint8Array(width);\n      if (defaultPixelValue) {\n        for (var j = 0; j < width; j++)\n          row[j] = defaultPixelValue;\n      }\n      bitmap.push(row);\n    }\n\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n    var stripT = -decodeInteger(contextCache, 'IADT', decoder); // 6.4.6\n    var firstS = 0;\n    var i = 0;\n    while (i < numberOfSymbolInstances) {\n      var deltaT = decodeInteger(contextCache, 'IADT', decoder); // 6.4.6\n      stripT += deltaT;\n\n      var deltaFirstS = decodeInteger(contextCache, 'IAFS', decoder); // 6.4.7\n      firstS += deltaFirstS;\n      var currentS = firstS;\n      do {\n        var currentT = stripSize == 1 ? 0 :\n          decodeInteger(contextCache, 'IAIT', decoder); // 6.4.9\n        var t = stripSize * stripT + currentT;\n        var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n        var applyRefinement = refinement &&\n          decodeInteger(contextCache, 'IARI', decoder);\n        var symbolBitmap = inputSymbols[symbolId];\n        var symbolWidth = symbolBitmap[0].length;\n        var symbolHeight = symbolBitmap.length;\n        if (applyRefinement) {\n          var rdw = decodeInteger(contextCache, 'IARDW', decoder); // 6.4.11.1\n          var rdh = decodeInteger(contextCache, 'IARDH', decoder); // 6.4.11.2\n          var rdx = decodeInteger(contextCache, 'IARDX', decoder); // 6.4.11.3\n          var rdy = decodeInteger(contextCache, 'IARDY', decoder); // 6.4.11.4\n          symbolWidth += rdw;\n          symbolHeight += rdh;\n          symbolBitmap = decodeRefinement(symbolWidth, symbolHeight,\n            refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx,\n            (rdh >> 1) + rdy, false, refinementAt,\n            decodingContext);\n        }\n        var offsetT = t - ((referenceCorner & 1) ? 0 : symbolHeight);\n        var offsetS = currentS - ((referenceCorner & 2) ? symbolWidth : 0);\n        if (transposed) {\n          // Place Symbol Bitmap from T1,S1  \n          for (var s2 = 0; s2 < symbolHeight; s2++) {\n            var row = bitmap[offsetS + s2];\n            if (!row) {\n              continue;\n            }\n            var symbolRow = symbolBitmap[s2];\n            // To ignore Parts of Symbol bitmap which goes\n            // outside bitmap region\n            var maxWidth = Math.min(width - offsetT, symbolWidth);\n            switch (combinationOperator) {\n              case 0: // OR\n                for (var t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] |= symbolRow[t2];\n                }\n                break;\n              case 2: // XOR\n                for (var t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] ^= symbolRow[t2];\n                }\n                break;\n              default:\n                error('JBIG2 error: operator ' + combinationOperator +\n                      ' is not supported');\n            }\n          }\n          currentS += symbolHeight - 1;\n        } else {\n          for (var t2 = 0; t2 < symbolHeight; t2++) {\n            var row = bitmap[offsetT + t2];\n            if (!row) {\n              continue;\n            }\n            var symbolRow = symbolBitmap[t2];\n            switch (combinationOperator) {\n              case 0: // OR\n                for (var s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] |= symbolRow[s2];\n                }\n                break;\n              case 2: // XOR\n                for (var s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] ^= symbolRow[s2];\n                }\n                break;\n              default:\n                error('JBIG2 error: operator ' + combinationOperator +\n                      ' is not supported');\n            }\n          }\n          currentS += symbolWidth - 1;\n        }\n        i++;\n        var deltaS = decodeInteger(contextCache, 'IADS', decoder); // 6.4.8\n        if (deltaS === null)\n          break; // OOB\n        currentS += deltaS + dsOffset;\n      } while (true);\n    }\n    return bitmap;\n  }\n\n  function readSegmentHeader(data, start) {\n    var segmentHeader = {};\n    segmentHeader.number = readUint32(data, start);\n    var flags = data[start + 4];\n    var segmentType = flags & 0x3F;\n    if (!SegmentTypes[segmentType])\n      error('JBIG2 error: invalid segment type: ' + segmentType);\n    segmentHeader.type = segmentType;\n    segmentHeader.typeName = SegmentTypes[segmentType];\n    segmentHeader.deferredNonRetain = !!(flags & 0x80);\n    var pageAssociationFieldSize = !!(flags & 0x40);\n    var referredFlags = data[start + 5];\n    var referredToCount = (referredFlags >> 5) & 7;\n    var retainBits = [referredFlags & 31];\n    var position = start + 6;\n    if (referredFlags == 7) {\n      referredToCount = readInt32(data, position - 1) & 0x1FFFFFFF;\n      position += 3;\n      var bytes = (referredToCount + 7) >> 3;\n      retainBits[0] = data[position++];\n      while (--bytes > 0) {\n        retainBits.push(data[position++]);\n      }\n    } else if (referredFlags == 5 || referredFlags == 6)\n      error('JBIG2 error: invalid referred-to flags');\n    segmentHeader.retainBits = retainBits;\n    var referredToSegmentNumberSize = segmentHeader.number <= 256 ? 1 :\n      segmentHeader.number <= 65536 ? 2 : 4;\n    var referredTo = [];\n    for (var i = 0; i < referredToCount; i++) {\n      var number = referredToSegmentNumberSize == 1 ? data[position] :\n        referredToSegmentNumberSize == 2 ? readUint16(data, position) :\n        readUint32(data, position);\n      referredTo.push(number);\n      position += referredToSegmentNumberSize;\n    }\n    segmentHeader.referredTo = referredTo;\n    if (!pageAssociationFieldSize)\n      segmentHeader.pageAssociation = data[position++];\n    else {\n      segmentHeader.pageAssociation = readUint32(data, position);\n      position += 4;\n    }\n    segmentHeader.length = readUint32(data, position);\n    position += 4;\n    if (segmentHeader.length == 0xFFFFFFFF) {\n      // 7.2.7 Segment data length, unknown segment length\n      if (segmentType === 38) { // ImmediateGenericRegion\n        var genericRegionInfo = readRegionSegmentInformation(data, position);\n        var genericRegionSegmentFlags = data[position +\n          RegionSegmentInformationFieldLength];\n        var genericRegionMmr = !!(genericRegionSegmentFlags & 1);\n        // searching for the segment end\n        var searchPatternLength = 6;\n        var searchPattern = new Uint8Array(searchPatternLength);\n        if (!genericRegionMmr) {\n          searchPattern[0] = 0xFF;\n          searchPattern[1] = 0xAC;\n        }\n        searchPattern[2] = (genericRegionInfo.height >>> 24) & 0xFF;\n        searchPattern[3] = (genericRegionInfo.height >> 16) & 0xFF;\n        searchPattern[4] = (genericRegionInfo.height >> 8) & 0xFF;\n        searchPattern[5] = genericRegionInfo.height & 0xFF;\n        for (var i = position, ii = data.length; i < ii; i++) {\n          var j = 0;\n          while (j < searchPatternLength && searchPattern[j] === data[i + j]) {\n            j++;\n          }\n          if (j == searchPatternLength) {\n            segmentHeader.length = i + searchPatternLength;\n            break;\n          }\n        }\n        if (segmentHeader.length == 0xFFFFFFFF) {\n          error('JBIG2 error: segment end was not found');\n        }\n      } else {\n        error('JBIG2 error: invalid unknown segment length');\n      }\n    }\n    segmentHeader.headerEnd = position;\n    return segmentHeader;\n  }\n\n  function readSegments(header, data, start, end) {\n    var segments = [];\n    var position = start;\n    while (position < end) {\n      var segmentHeader = readSegmentHeader(data, position);\n      position = segmentHeader.headerEnd;\n      var segment = {\n        header: segmentHeader,\n        data: data\n      };\n      if (!header.randomAccess) {\n        segment.start = position;\n        position += segmentHeader.length;\n        segment.end = position;\n      }\n      segments.push(segment);\n      if (segmentHeader.type == 51)\n        break; // end of file is found\n    }\n    if (header.randomAccess) {\n      for (var i = 0, ii = segments.length; i < ii; i++) {\n        segments[i].start = position;\n        position += segments[i].header.length;\n        segments[i].end = position;\n      }\n    }\n    return segments;\n  }\n\n  // 7.4.1 Region segment information field\n  function readRegionSegmentInformation(data, start) {\n    return {\n      width: readUint32(data, start),\n      height: readUint32(data, start + 4),\n      x: readUint32(data, start + 8),\n      y: readUint32(data, start + 12),\n      combinationOperator: data[start + 16] & 7\n    };\n  }\n  var RegionSegmentInformationFieldLength = 17;\n\n  function processSegment(segment, visitor) {\n    var header = segment.header;\n\n    var data = segment.data, position = segment.start, end = segment.end;\n    var args;\n    switch (header.type) {\n      case 0: // SymbolDictionary\n        // 7.4.2 Symbol dictionary segment syntax\n        var dictionary = {};\n        var dictionaryFlags = readUint16(data, position); // 7.4.2.1.1\n        dictionary.huffman = !!(dictionaryFlags & 1);\n        dictionary.refinement = !!(dictionaryFlags & 2);\n        dictionary.huffmanDHSelector = (dictionaryFlags >> 2) & 3;\n        dictionary.huffmanDWSelector = (dictionaryFlags >> 4) & 3;\n        dictionary.bitmapSizeSelector = (dictionaryFlags >> 6) & 1;\n        dictionary.aggregationInstancesSelector = (dictionaryFlags >> 7) & 1;\n        dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);\n        dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);\n        dictionary.template = (dictionaryFlags >> 10) & 3;\n        dictionary.refinementTemplate = (dictionaryFlags >> 12) & 1;\n        position += 2;\n        if (!dictionary.huffman) {\n          var atLength = dictionary.template === 0 ? 4 : 1;\n          var at = [];\n          for (var i = 0; i < atLength; i++) {\n            at.push({\n              x: readInt8(data, position),\n              y: readInt8(data, position + 1)\n            });\n            position += 2;\n          }\n          dictionary.at = at;\n        }\n        if (dictionary.refinement && !dictionary.refinementTemplate) {\n          var at = [];\n          for (var i = 0; i < 2; i++) {\n            at.push({\n              x: readInt8(data, position),\n              y: readInt8(data, position + 1)\n            });\n            position += 2;\n          }\n          dictionary.refinementAt = at;\n        }\n        dictionary.numberOfExportedSymbols = readUint32(data, position);\n        position += 4;\n        dictionary.numberOfNewSymbols = readUint32(data, position);\n        position += 4;\n        args = [dictionary, header.number, header.referredTo,\n                data, position, end];\n        break;\n      case 6: // ImmediateTextRegion\n      case 7: // ImmediateLosslessTextRegion\n        var textRegion = {};\n        textRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var textRegionSegmentFlags = readUint16(data, position);\n        position += 2;\n        textRegion.huffman = !!(textRegionSegmentFlags & 1);\n        textRegion.refinement = !!(textRegionSegmentFlags & 2);\n        textRegion.stripSize = 1 << ((textRegionSegmentFlags >> 2) & 3);\n        textRegion.referenceCorner = (textRegionSegmentFlags >> 4) & 3;\n        textRegion.transposed = !!(textRegionSegmentFlags & 64);\n        textRegion.combinationOperator = (textRegionSegmentFlags >> 7) & 3;\n        textRegion.defaultPixelValue = (textRegionSegmentFlags >> 9) & 1;\n        textRegion.dsOffset = (textRegionSegmentFlags << 17) >> 27;\n        textRegion.refinementTemplate = (textRegionSegmentFlags >> 15) & 1;\n        if (textRegion.huffman) {\n          var textRegionHuffmanFlags = readUint16(data, position);\n          position += 2;\n          textRegion.huffmanFS = (textRegionHuffmanFlags) & 3;\n          textRegion.huffmanDS = (textRegionHuffmanFlags >> 2) & 3;\n          textRegion.huffmanDT = (textRegionHuffmanFlags >> 4) & 3;\n          textRegion.huffmanRefinementDW = (textRegionHuffmanFlags >> 6) & 3;\n          textRegion.huffmanRefinementDH = (textRegionHuffmanFlags >> 8) & 3;\n          textRegion.huffmanRefinementDX = (textRegionHuffmanFlags >> 10) & 3;\n          textRegion.huffmanRefinementDY = (textRegionHuffmanFlags >> 12) & 3;\n          textRegion.huffmanRefinementSizeSelector =\n            !!(textRegionHuffmanFlags & 14);\n        }\n        if (textRegion.refinement && !textRegion.refinementTemplate) {\n          var at = [];\n          for (var i = 0; i < 2; i++) {\n            at.push({\n              x: readInt8(data, position),\n              y: readInt8(data, position + 1)\n            });\n            position += 2;\n          }\n          textRegion.refinementAt = at;\n        }\n        textRegion.numberOfSymbolInstances = readUint32(data, position);\n        position += 4;\n        // TODO 7.4.3.1.7 Symbol ID Huffman table decoding\n        if (textRegion.huffman)\n          error('JBIG2 error: huffman is not supported');\n        args = [textRegion, header.referredTo, data, position, end];\n        break;\n      case 38: // ImmediateGenericRegion\n      case 39: // ImmediateLosslessGenericRegion\n        var genericRegion = {};\n        genericRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var genericRegionSegmentFlags = data[position++];\n        genericRegion.mmr = !!(genericRegionSegmentFlags & 1);\n        genericRegion.template = (genericRegionSegmentFlags >> 1) & 3;\n        genericRegion.prediction = !!(genericRegionSegmentFlags & 8);\n        if (!genericRegion.mmr) {\n          var atLength = genericRegion.template === 0 ? 4 : 1;\n          var at = [];\n          for (var i = 0; i < atLength; i++) {\n            at.push({\n              x: readInt8(data, position),\n              y: readInt8(data, position + 1)\n            });\n            position += 2;\n          }\n          genericRegion.at = at;\n        }\n        args = [genericRegion, data, position, end];\n        break;\n      case 48: // PageInformation\n        var pageInfo = {\n          width: readUint32(data, position),\n          height: readUint32(data, position + 4),\n          resolutionX: readUint32(data, position + 8),\n          resolutionY: readUint32(data, position + 12)\n        };\n        if (pageInfo.height == 0xFFFFFFFF)\n          delete pageInfo.height;\n        var pageSegmentFlags = data[position + 16];\n        var pageStripingInformatiom = readUint16(data, position + 17);\n        pageInfo.lossless = !!(pageSegmentFlags & 1);\n        pageInfo.refinement = !!(pageSegmentFlags & 2);\n        pageInfo.defaultPixelValue = (pageSegmentFlags >> 2) & 1;\n        pageInfo.combinationOperator = (pageSegmentFlags >> 3) & 3;\n        pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);\n        pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);\n        args = [pageInfo];\n        break;\n      case 49: // EndOfPage\n        break;\n      case 50: // EndOfStripe\n        break;\n      case 51: // EndOfFile\n        break;\n      case 62: // 7.4.15 defines 2 extension types which\n               // are comments and can be ignored.\n        break;\n      default:\n        error('JBIG2 error: segment type ' + header.typeName + '(' +\n              header.type + ') is not implemented');\n    }\n    var callbackName = 'on' + header.typeName;\n    if (callbackName in visitor)\n      visitor[callbackName].apply(visitor, args);\n  }\n\n  function processSegments(segments, visitor) {\n    for (var i = 0, ii = segments.length; i < ii; i++)\n      processSegment(segments[i], visitor);\n  }\n\n  function parseJbig2(data, start, end) {\n    var position = start;\n    if (data[position] != 0x97 || data[position + 1] != 0x4A ||\n        data[position + 2] != 0x42 || data[position + 3] != 0x32 ||\n        data[position + 4] != 0x0D || data[position + 5] != 0x0A ||\n        data[position + 6] != 0x1A || data[position + 7] != 0x0A)\n      error('JBIG2 error: invalid header');\n    var header = {};\n    position += 8;\n    var flags = data[position++];\n    header.randomAccess = !(flags & 1);\n    if (!(flags & 2)) {\n      header.numberOfPages = readUint32(data, position);\n      position += 4;\n    }\n    var segments = readSegments(header, data, position, end);\n    error('Not implemented');\n    // processSegments(segments, new SimpleSegmentVisitor());\n  }\n\n  function parseJbig2Chunks(chunks) {\n    var visitor = new SimpleSegmentVisitor();\n    for (var i = 0, ii = chunks.length; i < ii; i++) {\n      var chunk = chunks[i];\n      var segments = readSegments({}, chunk.data, chunk.start, chunk.end);\n      processSegments(segments, visitor);\n    }\n    return visitor.buffer;\n  }\n\n  var SimpleSegmentVisitor = langx.klass({\n    onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {\n      this.currentPageInfo = info;\n      var rowSize = (info.width + 7) >> 3;\n      var buffer = new Uint8Array(rowSize * info.height);\n      var fill = info.defaultPixelValue ? 0xFF : 0;\n      for (var i = 0, ii = buffer.length; i < ii; i++)\n        buffer[i] = fill;\n      this.buffer = buffer;\n    },\n    drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {\n      var pageInfo = this.currentPageInfo;\n      var width = regionInfo.width, height = regionInfo.height;\n      var rowSize = (pageInfo.width + 7) >> 3;\n      var combinationOperator = pageInfo.combinationOperatorOverride ?\n        regionInfo.combinationOperator : pageInfo.combinationOperator;\n      var buffer = this.buffer;\n      for (var i = 0; i < height; i++) {\n        var mask = 128 >> (regionInfo.x & 7);\n        var offset = (i + regionInfo.y) * rowSize + (regionInfo.x >> 3);\n        switch (combinationOperator) {\n          case 0: // OR\n            for (var j = 0; j < width; j++) {\n              buffer[offset] |= bitmap[i][j] ? mask : 0;\n              mask >>= 1;\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n            break;\n          case 2: // XOR\n            for (var j = 0; j < width; j++) {\n              buffer[offset] ^= bitmap[i][j] ? mask : 0;\n              mask >>= 1;\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n            break;\n          default:\n            error('JBIG2 error: operator ' + combinationOperator +\n                  ' is not supported');\n        }\n      }\n    },\n    onImmediateGenericRegion:\n      function SimpleSegmentVisitor_onImmediateGenericRegion(region, data,\n                                                             start, end) {\n      var regionInfo = region.info;\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height,\n                                region.template, region.prediction, null,\n                                region.at, decodingContext);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessGenericRegion:\n      function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {\n      this.onImmediateGenericRegion.apply(this, arguments);\n    },\n    onSymbolDictionary:\n      function SimpleSegmentVisitor_onSymbolDictionary(dictionary,\n                                                       currentSegment,\n                                                       referredSegments,\n                                                       data, start, end) {\n      var huffmanTables;\n      if (dictionary.huffman)\n        error('JBIG2 error: huffman is not supported');\n\n      // Combines exported symbols from all referred segments\n      var symbols = this.symbols;\n      if (!symbols)\n        this.symbols = symbols = {};\n\n      var inputSymbols = [];\n      for (var i = 0, ii = referredSegments.length; i < ii; i++)\n        inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);\n\n      var decodingContext = new DecodingContext(data, start, end);\n      symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman,\n        dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols,\n        dictionary.numberOfExportedSymbols, huffmanTables,\n        dictionary.template, dictionary.at,\n        dictionary.refinementTemplate, dictionary.refinementAt,\n        decodingContext);\n    },\n    onImmediateTextRegion:\n      function SimpleSegmentVisitor_onImmediateTextRegion(region,\n                                                          referredSegments,\n                                                          data, start, end) {\n      var regionInfo = region.info;\n      var huffmanTables;\n\n      // Combines exported symbols from all referred segments\n      var symbols = this.symbols;\n      var inputSymbols = [];\n      for (var i = 0, ii = referredSegments.length; i < ii; i++)\n        inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);\n      var symbolCodeLength = log2(inputSymbols.length);\n\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeTextRegion(region.huffman, region.refinement,\n        regionInfo.width, regionInfo.height, region.defaultPixelValue,\n        region.numberOfSymbolInstances, region.stripSize, inputSymbols,\n        symbolCodeLength, region.transposed, region.dsOffset,\n        region.referenceCorner, region.combinationOperator, huffmanTables,\n        region.refinementTemplate, region.refinementAt, decodingContext);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessTextRegion:\n      function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {\n        this.onImmediateTextRegion.apply(this, arguments);\n    }\n  });\n\n  var Jbig2Image = langx.klass({\n    parseChunks: function Jbig2Image_parseChunks(chunks) {\n      return parseJbig2Chunks(chunks);\n    }\n  });\n\n  /**\n   * For JBIG2's we use a library to decode these images and\n   * the stream behaves like all the other DecodeStreams.\n   */\n  var Jbig2Stream = DecodeStream.inherit({\n      klassName : \"Jbig2Stream\",\n\n      init : function(bytes, dict) {\n        this.dict = dict;\n        this.bytes = bytes;\n\n          this.overrided();          \n      },\n\n    ensureBuffer : function(req) {\n        if (this.bufferLength)\n            return;\n\n        var jbig2Image = new Jbig2Image();\n\n        var chunks = [],\n            decodeParams = this.dict.get('DecodeParms');\n        if (decodeParams && decodeParams.has('JBIG2Globals')) {\n            var globalsStream = decodeParams.get('JBIG2Globals');\n            var globals = globalsStream.getBytes();\n            chunks.push({\n                data: globals,\n                start: 0,\n                end: globals.length\n            });\n        }\n        chunks.push({\n            data: this.bytes,\n            start: 0,\n            end: this.bytes.length\n        });\n        var data = jbig2Image.parseChunks(chunks);\n        var dataLength = data.length;\n\n        // JBIG2 had black as 1 and white as 0, inverting the colors\n        for (var i = 0; i < dataLength; i++)\n            data[i] ^= 0xFF;\n\n        this.buffer = data;\n        this.bufferLength = dataLength;\n    },\n    getChar : function() {\n        error('internal error: getChar is not valid on Jbig2Stream');\n    }\n  });\n\n\n  return codec.jbig2 = {\n    \"Jbig2Image\" : Jbig2Image,\n    \"Jbig2Stream\" : Jbig2Stream\n  };\n});\n\ndefine('skylark-utils-codec/jpeg',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-stream/DecodeStream\",\r\n  \"./codec\"\r\n],function(langx,DecodeStream,codec){\r\n  'use strict';\r\n\r\n   //The module code is based from mozilla/pdf.js/\r\n   // original : https://github.com/mozilla/pdf.js/blob/master/src/core/jpeg.js\r\n   // license  : Apache 2\r\n\r\n  var dctZigZag = new Uint8Array([\r\n     0,\r\n     1,  8,\r\n    16,  9,  2,\r\n     3, 10, 17, 24,\r\n    32, 25, 18, 11, 4,\r\n     5, 12, 19, 26, 33, 40,\r\n    48, 41, 34, 27, 20, 13,  6,\r\n     7, 14, 21, 28, 35, 42, 49, 56,\r\n    57, 50, 43, 36, 29, 22, 15,\r\n    23, 30, 37, 44, 51, 58,\r\n    59, 52, 45, 38, 31,\r\n    39, 46, 53, 60,\r\n    61, 54, 47,\r\n    55, 62,\r\n    63\r\n  ]);\r\n\r\n  var dctCos1  =  4017;   // cos(pi/16)\r\n  var dctSin1  =   799;   // sin(pi/16)\r\n  var dctCos3  =  3406;   // cos(3*pi/16)\r\n  var dctSin3  =  2276;   // sin(3*pi/16)\r\n  var dctCos6  =  1567;   // cos(6*pi/16)\r\n  var dctSin6  =  3784;   // sin(6*pi/16)\r\n  var dctSqrt2 =  5793;   // sqrt(2)\r\n  var dctSqrt1d2 = 2896;  // sqrt(2) / 2\r\n\r\n  function buildHuffmanTable(codeLengths, values) {\r\n    var k = 0, code = [], i, j, length = 16;\r\n    while (length > 0 && !codeLengths[length - 1]) {\r\n      length--;\r\n    }\r\n    code.push({children: [], index: 0});\r\n    var p = code[0], q;\r\n    for (i = 0; i < length; i++) {\r\n      for (j = 0; j < codeLengths[i]; j++) {\r\n        p = code.pop();\r\n        p.children[p.index] = values[k];\r\n        while (p.index > 0) {\r\n          p = code.pop();\r\n        }\r\n        p.index++;\r\n        code.push(p);\r\n        while (code.length <= i) {\r\n          code.push(q = {children: [], index: 0});\r\n          p.children[p.index] = q.children;\r\n          p = q;\r\n        }\r\n        k++;\r\n      }\r\n      if (i + 1 < length) {\r\n        // p here points to last code\r\n        code.push(q = {children: [], index: 0});\r\n        p.children[p.index] = q.children;\r\n        p = q;\r\n      }\r\n    }\r\n    return code[0].children;\r\n  }\r\n\r\n  function getBlockBufferOffset(component, row, col) {\r\n    return 64 * ((component.blocksPerLine + 1) * row + col);\r\n  }\r\n\r\n  function decodeScan(data, offset, frame, components, resetInterval,\r\n                      spectralStart, spectralEnd, successivePrev, successive) {\r\n    var precision = frame.precision;\r\n    var samplesPerLine = frame.samplesPerLine;\r\n    var scanLines = frame.scanLines;\r\n    var mcusPerLine = frame.mcusPerLine;\r\n    var progressive = frame.progressive;\r\n    var maxH = frame.maxH, maxV = frame.maxV;\r\n\r\n    var startOffset = offset, bitsData = 0, bitsCount = 0;\r\n\r\n    function readBit() {\r\n      if (bitsCount > 0) {\r\n        bitsCount--;\r\n        return (bitsData >> bitsCount) & 1;\r\n      }\r\n      bitsData = data[offset++];\r\n      if (bitsData === 0xFF) {\r\n        var nextByte = data[offset++];\r\n        if (nextByte) {\r\n          throw 'unexpected marker: ' +\r\n            ((bitsData << 8) | nextByte).toString(16);\r\n        }\r\n        // unstuff 0\r\n      }\r\n      bitsCount = 7;\r\n      return bitsData >>> 7;\r\n    }\r\n\r\n    function decodeHuffman(tree) {\r\n      var node = tree;\r\n      while (true) {\r\n        node = node[readBit()];\r\n        if (typeof node === 'number') {\r\n          return node;\r\n        }\r\n        if (typeof node !== 'object') {\r\n          throw 'invalid huffman sequence';\r\n        }\r\n      }\r\n    }\r\n\r\n    function receive(length) {\r\n      var n = 0;\r\n      while (length > 0) {\r\n        n = (n << 1) | readBit();\r\n        length--;\r\n      }\r\n      return n;\r\n    }\r\n\r\n    function receiveAndExtend(length) {\r\n      if (length === 1) {\r\n        return readBit() === 1 ? 1 : -1;\r\n      }\r\n      var n = receive(length);\r\n      if (n >= 1 << (length - 1)) {\r\n        return n;\r\n      }\r\n      return n + (-1 << length) + 1;\r\n    }\r\n\r\n    function decodeBaseline(component, offset) {\r\n      var t = decodeHuffman(component.huffmanTableDC);\r\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\r\n      component.blockData[offset] = (component.pred += diff);\r\n      var k = 1;\r\n      while (k < 64) {\r\n        var rs = decodeHuffman(component.huffmanTableAC);\r\n        var s = rs & 15, r = rs >> 4;\r\n        if (s === 0) {\r\n          if (r < 15) {\r\n            break;\r\n          }\r\n          k += 16;\r\n          continue;\r\n        }\r\n        k += r;\r\n        var z = dctZigZag[k];\r\n        component.blockData[offset + z] = receiveAndExtend(s);\r\n        k++;\r\n      }\r\n    }\r\n\r\n    function decodeDCFirst(component, offset) {\r\n      var t = decodeHuffman(component.huffmanTableDC);\r\n      var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);\r\n      component.blockData[offset] = (component.pred += diff);\r\n    }\r\n\r\n    function decodeDCSuccessive(component, offset) {\r\n      component.blockData[offset] |= readBit() << successive;\r\n    }\r\n\r\n    var eobrun = 0;\r\n    function decodeACFirst(component, offset) {\r\n      if (eobrun > 0) {\r\n        eobrun--;\r\n        return;\r\n      }\r\n      var k = spectralStart, e = spectralEnd;\r\n      while (k <= e) {\r\n        var rs = decodeHuffman(component.huffmanTableAC);\r\n        var s = rs & 15, r = rs >> 4;\r\n        if (s === 0) {\r\n          if (r < 15) {\r\n            eobrun = receive(r) + (1 << r) - 1;\r\n            break;\r\n          }\r\n          k += 16;\r\n          continue;\r\n        }\r\n        k += r;\r\n        var z = dctZigZag[k];\r\n        component.blockData[offset + z] =\r\n          receiveAndExtend(s) * (1 << successive);\r\n        k++;\r\n      }\r\n    }\r\n\r\n    var successiveACState = 0, successiveACNextValue;\r\n    function decodeACSuccessive(component, offset) {\r\n      var k = spectralStart;\r\n      var e = spectralEnd;\r\n      var r = 0;\r\n      var s;\r\n      var rs;\r\n      while (k <= e) {\r\n        var z = dctZigZag[k];\r\n        switch (successiveACState) {\r\n        case 0: // initial state\r\n          rs = decodeHuffman(component.huffmanTableAC);\r\n          s = rs & 15;\r\n          r = rs >> 4;\r\n          if (s === 0) {\r\n            if (r < 15) {\r\n              eobrun = receive(r) + (1 << r);\r\n              successiveACState = 4;\r\n            } else {\r\n              r = 16;\r\n              successiveACState = 1;\r\n            }\r\n          } else {\r\n            if (s !== 1) {\r\n              throw 'invalid ACn encoding';\r\n            }\r\n            successiveACNextValue = receiveAndExtend(s);\r\n            successiveACState = r ? 2 : 3;\r\n          }\r\n          continue;\r\n        case 1: // skipping r zero items\r\n        case 2:\r\n          if (component.blockData[offset + z]) {\r\n            component.blockData[offset + z] += (readBit() << successive);\r\n          } else {\r\n            r--;\r\n            if (r === 0) {\r\n              successiveACState = successiveACState === 2 ? 3 : 0;\r\n            }\r\n          }\r\n          break;\r\n        case 3: // set value for a zero item\r\n          if (component.blockData[offset + z]) {\r\n            component.blockData[offset + z] += (readBit() << successive);\r\n          } else {\r\n            component.blockData[offset + z] =\r\n              successiveACNextValue << successive;\r\n            successiveACState = 0;\r\n          }\r\n          break;\r\n        case 4: // eob\r\n          if (component.blockData[offset + z]) {\r\n            component.blockData[offset + z] += (readBit() << successive);\r\n          }\r\n          break;\r\n        }\r\n        k++;\r\n      }\r\n      if (successiveACState === 4) {\r\n        eobrun--;\r\n        if (eobrun === 0) {\r\n          successiveACState = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    function decodeMcu(component, decode, mcu, row, col) {\r\n      var mcuRow = (mcu / mcusPerLine) | 0;\r\n      var mcuCol = mcu % mcusPerLine;\r\n      var blockRow = mcuRow * component.v + row;\r\n      var blockCol = mcuCol * component.h + col;\r\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\r\n      decode(component, offset);\r\n    }\r\n\r\n    function decodeBlock(component, decode, mcu) {\r\n      var blockRow = (mcu / component.blocksPerLine) | 0;\r\n      var blockCol = mcu % component.blocksPerLine;\r\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\r\n      decode(component, offset);\r\n    }\r\n\r\n    var componentsLength = components.length;\r\n    var component, i, j, k, n;\r\n    var decodeFn;\r\n    if (progressive) {\r\n      if (spectralStart === 0) {\r\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\r\n      } else {\r\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\r\n      }\r\n    } else {\r\n      decodeFn = decodeBaseline;\r\n    }\r\n\r\n    var mcu = 0, marker;\r\n    var mcuExpected;\r\n    if (componentsLength === 1) {\r\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\r\n    } else {\r\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\r\n    }\r\n    if (!resetInterval) {\r\n      resetInterval = mcuExpected;\r\n    }\r\n\r\n    var h, v;\r\n    while (mcu < mcuExpected) {\r\n      // reset interval stuff\r\n      for (i = 0; i < componentsLength; i++) {\r\n        components[i].pred = 0;\r\n      }\r\n      eobrun = 0;\r\n\r\n      if (componentsLength === 1) {\r\n        component = components[0];\r\n        for (n = 0; n < resetInterval; n++) {\r\n          decodeBlock(component, decodeFn, mcu);\r\n          mcu++;\r\n        }\r\n      } else {\r\n        for (n = 0; n < resetInterval; n++) {\r\n          for (i = 0; i < componentsLength; i++) {\r\n            component = components[i];\r\n            h = component.h;\r\n            v = component.v;\r\n            for (j = 0; j < v; j++) {\r\n              for (k = 0; k < h; k++) {\r\n                decodeMcu(component, decodeFn, mcu, j, k);\r\n              }\r\n            }\r\n          }\r\n          mcu++;\r\n        }\r\n      }\r\n\r\n      // find marker\r\n      bitsCount = 0;\r\n      marker = (data[offset] << 8) | data[offset + 1];\r\n      if (marker <= 0xFF00) {\r\n        throw 'marker was not found';\r\n      }\r\n\r\n      if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx\r\n        offset += 2;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return offset - startOffset;\r\n  }\r\n\r\n  // A port of poppler's IDCT method which in turn is taken from:\r\n  //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\r\n  //   'Practical Fast 1-D DCT Algorithms with 11 Multiplications',\r\n  //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\r\n  //   988-991.\r\n  function quantizeAndInverse(component, blockBufferOffset, p) {\r\n    var qt = component.quantizationTable, blockData = component.blockData;\r\n    var v0, v1, v2, v3, v4, v5, v6, v7;\r\n    var p0, p1, p2, p3, p4, p5, p6, p7;\r\n    var t;\r\n\r\n    // inverse DCT on rows\r\n    for (var row = 0; row < 64; row += 8) {\r\n      // gather block data\r\n      p0 = blockData[blockBufferOffset + row];\r\n      p1 = blockData[blockBufferOffset + row + 1];\r\n      p2 = blockData[blockBufferOffset + row + 2];\r\n      p3 = blockData[blockBufferOffset + row + 3];\r\n      p4 = blockData[blockBufferOffset + row + 4];\r\n      p5 = blockData[blockBufferOffset + row + 5];\r\n      p6 = blockData[blockBufferOffset + row + 6];\r\n      p7 = blockData[blockBufferOffset + row + 7];\r\n\r\n      // dequant p0\r\n      p0 *= qt[row];\r\n\r\n      // check for all-zero AC coefficients\r\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\r\n        t = (dctSqrt2 * p0 + 512) >> 10;\r\n        p[row] = t;\r\n        p[row + 1] = t;\r\n        p[row + 2] = t;\r\n        p[row + 3] = t;\r\n        p[row + 4] = t;\r\n        p[row + 5] = t;\r\n        p[row + 6] = t;\r\n        p[row + 7] = t;\r\n        continue;\r\n      }\r\n      // dequant p1 ... p7\r\n      p1 *= qt[row + 1];\r\n      p2 *= qt[row + 2];\r\n      p3 *= qt[row + 3];\r\n      p4 *= qt[row + 4];\r\n      p5 *= qt[row + 5];\r\n      p6 *= qt[row + 6];\r\n      p7 *= qt[row + 7];\r\n\r\n      // stage 4\r\n      v0 = (dctSqrt2 * p0 + 128) >> 8;\r\n      v1 = (dctSqrt2 * p4 + 128) >> 8;\r\n      v2 = p2;\r\n      v3 = p6;\r\n      v4 = (dctSqrt1d2 * (p1 - p7) + 128) >> 8;\r\n      v7 = (dctSqrt1d2 * (p1 + p7) + 128) >> 8;\r\n      v5 = p3 << 4;\r\n      v6 = p5 << 4;\r\n\r\n      // stage 3\r\n      v0 = (v0 + v1 + 1) >> 1;\r\n      v1 = v0 - v1;\r\n      t  = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\r\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\r\n      v3 = t;\r\n      v4 = (v4 + v6 + 1) >> 1;\r\n      v6 = v4 - v6;\r\n      v7 = (v7 + v5 + 1) >> 1;\r\n      v5 = v7 - v5;\r\n\r\n      // stage 2\r\n      v0 = (v0 + v3 + 1) >> 1;\r\n      v3 = v0 - v3;\r\n      v1 = (v1 + v2 + 1) >> 1;\r\n      v2 = v1 - v2;\r\n      t  = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\r\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\r\n      v7 = t;\r\n      t  = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\r\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\r\n      v6 = t;\r\n\r\n      // stage 1\r\n      p[row] = v0 + v7;\r\n      p[row + 7] = v0 - v7;\r\n      p[row + 1] = v1 + v6;\r\n      p[row + 6] = v1 - v6;\r\n      p[row + 2] = v2 + v5;\r\n      p[row + 5] = v2 - v5;\r\n      p[row + 3] = v3 + v4;\r\n      p[row + 4] = v3 - v4;\r\n    }\r\n\r\n    // inverse DCT on columns\r\n    for (var col = 0; col < 8; ++col) {\r\n      p0 = p[col];\r\n      p1 = p[col +  8];\r\n      p2 = p[col + 16];\r\n      p3 = p[col + 24];\r\n      p4 = p[col + 32];\r\n      p5 = p[col + 40];\r\n      p6 = p[col + 48];\r\n      p7 = p[col + 56];\r\n\r\n      // check for all-zero AC coefficients\r\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\r\n        t = (dctSqrt2 * p0 + 8192) >> 14;\r\n        // convert to 8 bit\r\n        t = (t < -2040) ? 0 : (t >= 2024) ? 255 : (t + 2056) >> 4;\r\n        blockData[blockBufferOffset + col] = t;\r\n        blockData[blockBufferOffset + col +  8] = t;\r\n        blockData[blockBufferOffset + col + 16] = t;\r\n        blockData[blockBufferOffset + col + 24] = t;\r\n        blockData[blockBufferOffset + col + 32] = t;\r\n        blockData[blockBufferOffset + col + 40] = t;\r\n        blockData[blockBufferOffset + col + 48] = t;\r\n        blockData[blockBufferOffset + col + 56] = t;\r\n        continue;\r\n      }\r\n\r\n      // stage 4\r\n      v0 = (dctSqrt2 * p0 + 2048) >> 12;\r\n      v1 = (dctSqrt2 * p4 + 2048) >> 12;\r\n      v2 = p2;\r\n      v3 = p6;\r\n      v4 = (dctSqrt1d2 * (p1 - p7) + 2048) >> 12;\r\n      v7 = (dctSqrt1d2 * (p1 + p7) + 2048) >> 12;\r\n      v5 = p3;\r\n      v6 = p5;\r\n\r\n      // stage 3\r\n      // Shift v0 by 128.5 << 5 here, so we don't need to shift p0...p7 when\r\n      // converting to UInt8 range later.\r\n      v0 = ((v0 + v1 + 1) >> 1) + 4112;\r\n      v1 = v0 - v1;\r\n      t  = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\r\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\r\n      v3 = t;\r\n      v4 = (v4 + v6 + 1) >> 1;\r\n      v6 = v4 - v6;\r\n      v7 = (v7 + v5 + 1) >> 1;\r\n      v5 = v7 - v5;\r\n\r\n      // stage 2\r\n      v0 = (v0 + v3 + 1) >> 1;\r\n      v3 = v0 - v3;\r\n      v1 = (v1 + v2 + 1) >> 1;\r\n      v2 = v1 - v2;\r\n      t  = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\r\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\r\n      v7 = t;\r\n      t  = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\r\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\r\n      v6 = t;\r\n\r\n      // stage 1\r\n      p0 = v0 + v7;\r\n      p7 = v0 - v7;\r\n      p1 = v1 + v6;\r\n      p6 = v1 - v6;\r\n      p2 = v2 + v5;\r\n      p5 = v2 - v5;\r\n      p3 = v3 + v4;\r\n      p4 = v3 - v4;\r\n\r\n      // convert to 8-bit integers\r\n      p0 = (p0 < 16) ? 0 : (p0 >= 4080) ? 255 : p0 >> 4;\r\n      p1 = (p1 < 16) ? 0 : (p1 >= 4080) ? 255 : p1 >> 4;\r\n      p2 = (p2 < 16) ? 0 : (p2 >= 4080) ? 255 : p2 >> 4;\r\n      p3 = (p3 < 16) ? 0 : (p3 >= 4080) ? 255 : p3 >> 4;\r\n      p4 = (p4 < 16) ? 0 : (p4 >= 4080) ? 255 : p4 >> 4;\r\n      p5 = (p5 < 16) ? 0 : (p5 >= 4080) ? 255 : p5 >> 4;\r\n      p6 = (p6 < 16) ? 0 : (p6 >= 4080) ? 255 : p6 >> 4;\r\n      p7 = (p7 < 16) ? 0 : (p7 >= 4080) ? 255 : p7 >> 4;\r\n\r\n      // store block data\r\n      blockData[blockBufferOffset + col] = p0;\r\n      blockData[blockBufferOffset + col +  8] = p1;\r\n      blockData[blockBufferOffset + col + 16] = p2;\r\n      blockData[blockBufferOffset + col + 24] = p3;\r\n      blockData[blockBufferOffset + col + 32] = p4;\r\n      blockData[blockBufferOffset + col + 40] = p5;\r\n      blockData[blockBufferOffset + col + 48] = p6;\r\n      blockData[blockBufferOffset + col + 56] = p7;\r\n    }\r\n  }\r\n\r\n  function buildComponentData(frame, component) {\r\n    var blocksPerLine = component.blocksPerLine;\r\n    var blocksPerColumn = component.blocksPerColumn;\r\n    var computationBuffer = new Int16Array(64);\r\n\r\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\r\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\r\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\r\n        quantizeAndInverse(component, offset, computationBuffer);\r\n      }\r\n    }\r\n    return component.blockData;\r\n  }\r\n\r\n  function clamp0to255(a) {\r\n    return a <= 0 ? 0 : a >= 255 ? 255 : a;\r\n  }\r\n\r\n\r\n  var JpegImage = langx.klass({\r\n    parse: function parse(data) {\r\n\r\n      function readUint16() {\r\n        var value = (data[offset] << 8) | data[offset + 1];\r\n        offset += 2;\r\n        return value;\r\n      }\r\n\r\n      function readDataBlock() {\r\n        var length = readUint16();\r\n        var array = data.subarray(offset, offset + length - 2);\r\n        offset += array.length;\r\n        return array;\r\n      }\r\n\r\n      function prepareComponents(frame) {\r\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\r\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\r\n        for (var i = 0; i < frame.components.length; i++) {\r\n          component = frame.components[i];\r\n          var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) *\r\n                                        component.h / frame.maxH);\r\n          var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines  / 8) *\r\n                                          component.v / frame.maxV);\r\n          var blocksPerLineForMcu = mcusPerLine * component.h;\r\n          var blocksPerColumnForMcu = mcusPerColumn * component.v;\r\n\r\n          var blocksBufferSize = 64 * blocksPerColumnForMcu *\r\n                                      (blocksPerLineForMcu + 1);\r\n          component.blockData = new Int16Array(blocksBufferSize);\r\n          component.blocksPerLine = blocksPerLine;\r\n          component.blocksPerColumn = blocksPerColumn;\r\n        }\r\n        frame.mcusPerLine = mcusPerLine;\r\n        frame.mcusPerColumn = mcusPerColumn;\r\n      }\r\n\r\n      var offset = 0, length = data.length;\r\n      var jfif = null;\r\n      var adobe = null;\r\n      var pixels = null;\r\n      var frame, resetInterval;\r\n      var quantizationTables = [];\r\n      var huffmanTablesAC = [], huffmanTablesDC = [];\r\n      var fileMarker = readUint16();\r\n      if (fileMarker !== 0xFFD8) { // SOI (Start of Image)\r\n        throw 'SOI not found';\r\n      }\r\n\r\n      fileMarker = readUint16();\r\n      while (fileMarker !== 0xFFD9) { // EOI (End of image)\r\n        var i, j, l;\r\n        switch(fileMarker) {\r\n          case 0xFFE0: // APP0 (Application Specific)\r\n          case 0xFFE1: // APP1\r\n          case 0xFFE2: // APP2\r\n          case 0xFFE3: // APP3\r\n          case 0xFFE4: // APP4\r\n          case 0xFFE5: // APP5\r\n          case 0xFFE6: // APP6\r\n          case 0xFFE7: // APP7\r\n          case 0xFFE8: // APP8\r\n          case 0xFFE9: // APP9\r\n          case 0xFFEA: // APP10\r\n          case 0xFFEB: // APP11\r\n          case 0xFFEC: // APP12\r\n          case 0xFFED: // APP13\r\n          case 0xFFEE: // APP14\r\n          case 0xFFEF: // APP15\r\n          case 0xFFFE: // COM (Comment)\r\n            var appData = readDataBlock();\r\n\r\n            if (fileMarker === 0xFFE0) {\r\n              if (appData[0] === 0x4A && appData[1] === 0x46 &&\r\n                  appData[2] === 0x49 && appData[3] === 0x46 &&\r\n                  appData[4] === 0) { // 'JFIF\\x00'\r\n                jfif = {\r\n                  version: { major: appData[5], minor: appData[6] },\r\n                  densityUnits: appData[7],\r\n                  xDensity: (appData[8] << 8) | appData[9],\r\n                  yDensity: (appData[10] << 8) | appData[11],\r\n                  thumbWidth: appData[12],\r\n                  thumbHeight: appData[13],\r\n                  thumbData: appData.subarray(14, 14 +\r\n                                              3 * appData[12] * appData[13])\r\n                };\r\n              }\r\n            }\r\n            // TODO APP1 - Exif\r\n            if (fileMarker === 0xFFEE) {\r\n              if (appData[0] === 0x41 && appData[1] === 0x64 &&\r\n                  appData[2] === 0x6F && appData[3] === 0x62 &&\r\n                  appData[4] === 0x65) { // 'Adobe'\r\n                adobe = {\r\n                  version: (appData[5] << 8) | appData[6],\r\n                  flags0: (appData[7] << 8) | appData[8],\r\n                  flags1: (appData[9] << 8) | appData[10],\r\n                  transformCode: appData[11]\r\n                };\r\n              }\r\n            }\r\n            break;\r\n\r\n          case 0xFFDB: // DQT (Define Quantization Tables)\r\n            var quantizationTablesLength = readUint16();\r\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\r\n            var z;\r\n            while (offset < quantizationTablesEnd) {\r\n              var quantizationTableSpec = data[offset++];\r\n              var tableData = new Uint16Array(64);\r\n              if ((quantizationTableSpec >> 4) === 0) { // 8 bit values\r\n                for (j = 0; j < 64; j++) {\r\n                  z = dctZigZag[j];\r\n                  tableData[z] = data[offset++];\r\n                }\r\n              } else if ((quantizationTableSpec >> 4) === 1) { //16 bit\r\n                for (j = 0; j < 64; j++) {\r\n                  z = dctZigZag[j];\r\n                  tableData[z] = readUint16();\r\n                }\r\n              } else {\r\n                throw 'DQT: invalid table spec';\r\n              }\r\n              quantizationTables[quantizationTableSpec & 15] = tableData;\r\n            }\r\n            break;\r\n\r\n          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)\r\n          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)\r\n          case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)\r\n            if (frame) {\r\n              throw 'Only single frame JPEGs supported';\r\n            }\r\n            readUint16(); // skip data length\r\n            frame = {};\r\n            frame.extended = (fileMarker === 0xFFC1);\r\n            frame.progressive = (fileMarker === 0xFFC2);\r\n            frame.precision = data[offset++];\r\n            frame.scanLines = readUint16();\r\n            frame.samplesPerLine = readUint16();\r\n            frame.components = [];\r\n            frame.componentIds = {};\r\n            var componentsCount = data[offset++], componentId;\r\n            var maxH = 0, maxV = 0;\r\n            for (i = 0; i < componentsCount; i++) {\r\n              componentId = data[offset];\r\n              var h = data[offset + 1] >> 4;\r\n              var v = data[offset + 1] & 15;\r\n              if (maxH < h) {\r\n                maxH = h;\r\n              }\r\n              if (maxV < v) {\r\n                maxV = v;\r\n              }\r\n              var qId = data[offset + 2];\r\n              l = frame.components.push({\r\n                h: h,\r\n                v: v,\r\n                quantizationTable: quantizationTables[qId]\r\n              });\r\n              frame.componentIds[componentId] = l - 1;\r\n              offset += 3;\r\n            }\r\n            frame.maxH = maxH;\r\n            frame.maxV = maxV;\r\n            prepareComponents(frame);\r\n            break;\r\n\r\n          case 0xFFC4: // DHT (Define Huffman Tables)\r\n            var huffmanLength = readUint16();\r\n            for (i = 2; i < huffmanLength;) {\r\n              var huffmanTableSpec = data[offset++];\r\n              var codeLengths = new Uint8Array(16);\r\n              var codeLengthSum = 0;\r\n              for (j = 0; j < 16; j++, offset++) {\r\n                codeLengthSum += (codeLengths[j] = data[offset]);\r\n              }\r\n              var huffmanValues = new Uint8Array(codeLengthSum);\r\n              for (j = 0; j < codeLengthSum; j++, offset++) {\r\n                huffmanValues[j] = data[offset];\r\n              }\r\n              i += 17 + codeLengthSum;\r\n\r\n              ((huffmanTableSpec >> 4) === 0 ?\r\n                huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =\r\n                buildHuffmanTable(codeLengths, huffmanValues);\r\n            }\r\n            break;\r\n\r\n          case 0xFFDD: // DRI (Define Restart Interval)\r\n            readUint16(); // skip data length\r\n            resetInterval = readUint16();\r\n            break;\r\n\r\n          case 0xFFDA: // SOS (Start of Scan)\r\n            var scanLength = readUint16();\r\n            var selectorsCount = data[offset++];\r\n            var components = [], component;\r\n            for (i = 0; i < selectorsCount; i++) {\r\n              var componentIndex = frame.componentIds[data[offset++]];\r\n              component = frame.components[componentIndex];\r\n              var tableSpec = data[offset++];\r\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\r\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\r\n              components.push(component);\r\n            }\r\n            var spectralStart = data[offset++];\r\n            var spectralEnd = data[offset++];\r\n            var successiveApproximation = data[offset++];\r\n            var processed = decodeScan(data, offset,\r\n              frame, components, resetInterval,\r\n              spectralStart, spectralEnd,\r\n              successiveApproximation >> 4, successiveApproximation & 15);\r\n            offset += processed;\r\n            break;\r\n\r\n          case 0xFFFF: // Fill bytes\r\n            if (data[offset] !== 0xFF) { // Avoid skipping a valid marker.\r\n              offset--;\r\n            }\r\n            break;\r\n\r\n          default:\r\n            if (data[offset - 3] === 0xFF &&\r\n                data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\r\n              // could be incorrect encoding -- last 0xFF byte of the previous\r\n              // block was eaten by the encoder\r\n              offset -= 3;\r\n              break;\r\n            }\r\n            throw 'unknown JPEG marker ' + fileMarker.toString(16);\r\n        }\r\n        fileMarker = readUint16();\r\n      }\r\n\r\n      this.width = frame.samplesPerLine;\r\n      this.height = frame.scanLines;\r\n      this.jfif = jfif;\r\n      this.adobe = adobe;\r\n      this.components = [];\r\n      for (i = 0; i < frame.components.length; i++) {\r\n        component = frame.components[i];\r\n        this.components.push({\r\n          output: buildComponentData(frame, component),\r\n          scaleX: component.h / frame.maxH,\r\n          scaleY: component.v / frame.maxV,\r\n          blocksPerLine: component.blocksPerLine,\r\n          blocksPerColumn: component.blocksPerColumn\r\n        });\r\n      }\r\n      this.numComponents = this.components.length;\r\n    },\r\n\r\n    _getLinearizedBlockData: function getLinearizedBlockData(width, height) {\r\n      var scaleX = this.width / width, scaleY = this.height / height;\r\n\r\n      var component, componentScaleX, componentScaleY, blocksPerScanline;\r\n      var x, y, i, j, k;\r\n      var index;\r\n      var offset = 0;\r\n      var output;\r\n      var numComponents = this.components.length;\r\n      var dataLength = width * height * numComponents;\r\n      var data = new Uint8Array(dataLength);\r\n      var xScaleBlockOffset = new Uint32Array(width);\r\n      var mask3LSB = 0xfffffff8; // used to clear the 3 LSBs\r\n\r\n      for (i = 0; i < numComponents; i++) {\r\n        component = this.components[i];\r\n        componentScaleX = component.scaleX * scaleX;\r\n        componentScaleY = component.scaleY * scaleY;\r\n        offset = i;\r\n        output = component.output;\r\n        blocksPerScanline = (component.blocksPerLine + 1) << 3;\r\n        // precalculate the xScaleBlockOffset\r\n        for (x = 0; x < width; x++) {\r\n          j = 0 | (x * componentScaleX);\r\n          xScaleBlockOffset[x] = ((j & mask3LSB) << 3) | (j & 7);\r\n        }\r\n        // linearize the blocks of the component\r\n        for (y = 0; y < height; y++) {\r\n          j = 0 | (y * componentScaleY);\r\n          index = blocksPerScanline * (j & mask3LSB) | ((j & 7) << 3);\r\n          for (x = 0; x < width; x++) {\r\n            data[offset] = output[index + xScaleBlockOffset[x]];\r\n            offset += numComponents;\r\n          }\r\n        }\r\n      }\r\n\r\n      // decodeTransform contains pairs of multiplier (-256..256) and additive\r\n      var transform = this.decodeTransform;\r\n      if (transform) {\r\n        for (i = 0; i < dataLength;) {\r\n          for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\r\n            data[i] = ((data[i] * transform[k]) >> 8) + transform[k + 1];\r\n          }\r\n        }\r\n      }\r\n      return data;\r\n    },\r\n\r\n    _isColorConversionNeeded: function isColorConversionNeeded() {\r\n      if (this.adobe && this.adobe.transformCode) {\r\n        // The adobe transform marker overrides any previous setting\r\n        return true;\r\n      } else if (this.numComponents === 3) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    _convertYccToRgb: function convertYccToRgb(data) {\r\n      var Y, Cb, Cr;\r\n      for (var i = 0, length = data.length; i < length; i += 3) {\r\n        Y  = data[i    ];\r\n        Cb = data[i + 1];\r\n        Cr = data[i + 2];\r\n        data[i    ] = clamp0to255(Y - 179.456 + 1.402 * Cr);\r\n        data[i + 1] = clamp0to255(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);\r\n        data[i + 2] = clamp0to255(Y - 226.816 + 1.772 * Cb);\r\n      }\r\n      return data;\r\n    },\r\n\r\n    _convertYcckToRgb: function convertYcckToRgb(data) {\r\n      var Y, Cb, Cr, k;\r\n      var offset = 0;\r\n      for (var i = 0, length = data.length; i < length; i += 4) {\r\n        Y  = data[i];\r\n        Cb = data[i + 1];\r\n        Cr = data[i + 2];\r\n        k = data[i + 3];\r\n\r\n        var r = -122.67195406894 +\r\n          Cb * (-6.60635669420364e-5 * Cb + 0.000437130475926232 * Cr -\r\n                5.4080610064599e-5 * Y + 0.00048449797120281 * k -\r\n                0.154362151871126) +\r\n          Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y -\r\n                0.00477271405408747 * k + 1.53380253221734) +\r\n          Y * (0.000961250184130688 * Y - 0.00266257332283933 * k +\r\n               0.48357088451265) +\r\n          k * (-0.000336197177618394 * k + 0.484791561490776);\r\n\r\n        var g = 107.268039397724 +\r\n          Cb * (2.19927104525741e-5 * Cb - 0.000640992018297945 * Cr +\r\n                0.000659397001245577 * Y + 0.000426105652938837 * k -\r\n                0.176491792462875) +\r\n          Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y +\r\n                0.000770482631801132 * k - 0.151051492775562) +\r\n          Y * (0.00126935368114843 * Y - 0.00265090189010898 * k +\r\n               0.25802910206845) +\r\n          k * (-0.000318913117588328 * k - 0.213742400323665);\r\n\r\n        var b = -20.810012546947 +\r\n          Cb * (-0.000570115196973677 * Cb - 2.63409051004589e-5 * Cr +\r\n                0.0020741088115012 * Y - 0.00288260236853442 * k +\r\n                0.814272968359295) +\r\n          Cr * (-1.53496057440975e-5 * Cr - 0.000132689043961446 * Y +\r\n                0.000560833691242812 * k - 0.195152027534049) +\r\n          Y * (0.00174418132927582 * Y - 0.00255243321439347 * k +\r\n               0.116935020465145) +\r\n          k * (-0.000343531996510555 * k + 0.24165260232407);\r\n\r\n        data[offset++] = clamp0to255(r);\r\n        data[offset++] = clamp0to255(g);\r\n        data[offset++] = clamp0to255(b);\r\n      }\r\n      return data;\r\n    },\r\n\r\n    _convertYcckToCmyk: function convertYcckToCmyk(data) {\r\n      var Y, Cb, Cr;\r\n      for (var i = 0, length = data.length; i < length; i += 4) {\r\n        Y  = data[i];\r\n        Cb = data[i + 1];\r\n        Cr = data[i + 2];\r\n        data[i    ] = clamp0to255(434.456 - Y - 1.402 * Cr);\r\n        data[i + 1] = clamp0to255(119.541 - Y + 0.344 * Cb + 0.714 * Cr);\r\n        data[i + 2] = clamp0to255(481.816 - Y - 1.772 * Cb);\r\n        // K in data[i + 3] is unchanged\r\n      }\r\n      return data;\r\n    },\r\n\r\n    _convertCmykToRgb: function convertCmykToRgb(data) {\r\n      var c, m, y, k;\r\n      var offset = 0;\r\n      var min = -255 * 255 * 255;\r\n      var scale = 1 / 255 / 255;\r\n      for (var i = 0, length = data.length; i < length; i += 4) {\r\n        c = data[i];\r\n        m = data[i + 1];\r\n        y = data[i + 2];\r\n        k = data[i + 3];\r\n\r\n        var r =\r\n          c * (-4.387332384609988 * c + 54.48615194189176 * m +\r\n               18.82290502165302 * y + 212.25662451639585 * k -\r\n               72734.4411664936) +\r\n          m * (1.7149763477362134 * m - 5.6096736904047315 * y -\r\n               17.873870861415444 * k - 1401.7366389350734) +\r\n          y * (-2.5217340131683033 * y - 21.248923337353073 * k +\r\n               4465.541406466231) -\r\n          k * (21.86122147463605 * k + 48317.86113160301);\r\n        var g =\r\n          c * (8.841041422036149 * c + 60.118027045597366 * m +\r\n               6.871425592049007 * y + 31.159100130055922 * k -\r\n               20220.756542821975) +\r\n          m * (-15.310361306967817 * m + 17.575251261109482 * y +\r\n               131.35250912493976 * k - 48691.05921601825) +\r\n          y * (4.444339102852739 * y + 9.8632861493405 * k -\r\n               6341.191035517494) -\r\n          k * (20.737325471181034 * k + 47890.15695978492);\r\n        var b =\r\n          c * (0.8842522430003296 * c + 8.078677503112928 * m +\r\n               30.89978309703729 * y - 0.23883238689178934 * k -\r\n               3616.812083916688) +\r\n          m * (10.49593273432072 * m + 63.02378494754052 * y +\r\n               50.606957656360734 * k - 28620.90484698408) +\r\n          y * (0.03296041114873217 * y + 115.60384449646641 * k -\r\n               49363.43385999684) -\r\n          k * (22.33816807309886 * k + 45932.16563550634);\r\n\r\n        data[offset++] = r >= 0 ? 255 : r <= min ? 0 : 255 + r * scale | 0;\r\n        data[offset++] = g >= 0 ? 255 : g <= min ? 0 : 255 + g * scale | 0;\r\n        data[offset++] = b >= 0 ? 255 : b <= min ? 0 : 255 + b * scale | 0;\r\n      }\r\n      return data;\r\n    },\r\n\r\n    getData: function getData(width, height, forceRGBoutput) {\r\n      if (this.numComponents > 4) {\r\n        throw 'Unsupported color mode';\r\n      }\r\n      // type of data: Uint8Array(width * height * numComponents)\r\n      var data = this._getLinearizedBlockData(width, height);\r\n\r\n      if (this.numComponents === 3) {\r\n        return this._convertYccToRgb(data);\r\n      } else if (this.numComponents === 4) {\r\n        if (this._isColorConversionNeeded()) {\r\n          if (forceRGBoutput) {\r\n            return this._convertYcckToRgb(data);\r\n          } else {\r\n            return this._convertYcckToCmyk(data);\r\n          }\r\n        } else if (forceRGBoutput) {\r\n          return this._convertCmykToRgb(data);\r\n        }\r\n      }\r\n      return data;\r\n    }\r\n  });\r\n\r\n  function isAdobeImage(bytes) {\r\n      var maxBytesScanned = Math.max(bytes.length - 16, 1024);\r\n      // Looking for APP14, 'Adobe'\r\n      for (var i = 0; i < maxBytesScanned; ++i) {\r\n          if (bytes[i] == 0xFF && bytes[i + 1] == 0xEE &&\r\n              bytes[i + 2] == 0x00 && bytes[i + 3] == 0x0E &&\r\n              bytes[i + 4] == 0x41 && bytes[i + 5] == 0x64 &&\r\n              bytes[i + 6] == 0x6F && bytes[i + 7] == 0x62 &&\r\n              bytes[i + 8] == 0x65 && bytes[i + 9] == 0x00)\r\n              return true;\r\n          // scanning until frame tag\r\n          if (bytes[i] == 0xFF && bytes[i + 1] == 0xC0)\r\n              break;\r\n      }\r\n      return false;\r\n  }\r\n\r\n  function fixAdobeImage(bytes) {\r\n      // Inserting 'EMBED' marker after JPEG signature\r\n      var embedMarker = new Uint8Array([0xFF, 0xEC, 0, 8, 0x45, 0x4D, 0x42, 0x45,\r\n          0x44, 0\r\n      ]);\r\n      var newBytes = new Uint8Array(bytes.length + embedMarker.length);\r\n      newBytes.set(bytes, embedMarker.length);\r\n      // copy JPEG header\r\n      newBytes[0] = bytes[0];\r\n      newBytes[1] = bytes[1];\r\n      newBytes.set(embedMarker, 2);\r\n      return newBytes;\r\n  }\r\n\r\n  var JpegStream = DecodeStream.inherit({\r\n      klassName : \"JpegStream\",\r\n\r\n      init : function(bytes, dict, xref) {\r\n        // TODO: per poppler, some images may have 'junk' before that\r\n        // need to be removed\r\n        this.dict = dict;\r\n\r\n        this.isAdobeImage = false;\r\n        this.colorTransform = dict.get('ColorTransform') || -1;\r\n\r\n        if (isAdobeImage(bytes)) {\r\n            this.isAdobeImage = true;\r\n            bytes = fixAdobeImage(bytes);\r\n        }\r\n\r\n        this.bytes = bytes;\r\n\r\n          this.overrided();          \r\n      },\r\n\r\n      ensureBuffer : function(req) {\r\n          if (this.bufferLength)\r\n              return;\r\n          try {\r\n              var jpegImage = new JpegImage();\r\n              if (this.colorTransform != -1)\r\n                  jpegImage.colorTransform = this.colorTransform;\r\n              jpegImage.parse(this.bytes);\r\n              var width = jpegImage.width;\r\n              var height = jpegImage.height;\r\n              var data = jpegImage.getData(width, height);\r\n              this.buffer = data;\r\n              this.bufferLength = data.length;\r\n          } catch (e) {\r\n              error('JPEG error: ' + e);\r\n          }\r\n      },\r\n\r\n      getIR : function () {\r\n          return bytesToString(this.bytes);\r\n      },\r\n\r\n      getChar : function () {\r\n          error('internal error: getChar is not valid on JpegStream');\r\n      },\r\n\r\n      /**\r\n       * Checks if the image can be decoded and displayed by the browser without any\r\n       * further processing such as color space conversions.\r\n       */\r\n      isNativelySupported : function(xref, res) {\r\n              var cs = ColorSpace.parse(this.dict.get('ColorSpace', 'CS'), xref, res);\r\n              // when bug 674619 lands, let's check if browser can do\r\n              // normal cmyk and then we won't need to decode in JS\r\n              if (cs.name === 'DeviceGray' || cs.name === 'DeviceRGB')\r\n                  return true;\r\n              if (cs.name === 'DeviceCMYK' && !this.isAdobeImage &&\r\n                  this.colorTransform < 1)\r\n                  return true;\r\n              return false;\r\n      },\r\n\r\n      /**\r\n       * Checks if the image can be decoded by the browser.\r\n       */\r\n      isNativelyDecodable : function(xref, res) {\r\n              var cs = ColorSpace.parse(this.dict.get('ColorSpace', 'CS'), xref, res);\r\n              var numComps = cs.numComps;\r\n              if (numComps == 1 || numComps == 3)\r\n                  return true;\r\n\r\n              return false;\r\n      }\r\n\r\n  });\r\n\r\n\r\n  return codec.jpeg = {\r\n    \"JpegImage\" :JpegImage,\r\n    \"JpegStream\" : JpegStream\r\n  };\r\n\r\n});\ndefine('skylark-utils-codec/jpx',[\n  \"skylark-langx/langx\",\n  \"skylark-utils-stream/DecodeStream\",\n  \"./codec\"\n],function(langx,DecodeStream,codec){\n  'use strict';\n\nvar JpxImage = (function JpxImageClosure() {\n  // Table E.1\n  var SubbandsGainLog2 = {\n    'LL': 0,\n    'LH': 1,\n    'HL': 1,\n    'HH': 2\n  };\n  function JpxImage() {\n    this.failOnCorruptedImage = false;\n  }\n  JpxImage.prototype = {\n    load: function JpxImage_load(url) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = (function() {\n        // TODO catch parse error\n        var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);\n        this.parse(data);\n        if (this.onload)\n          this.onload();\n      }).bind(this);\n      xhr.send(null);\n    },\n    parse: function JpxImage_parse(data) {\n      function readUint(data, offset, bytes) {\n        var n = 0;\n        for (var i = 0; i < bytes; i++)\n          n = n * 256 + (data[offset + i] & 0xFF);\n        return n;\n      }\n      var position = 0, length = data.length;\n      while (position < length) {\n        var headerSize = 8;\n        var lbox = readUint(data, position, 4);\n        var tbox = readUint(data, position + 4, 4);\n        position += headerSize;\n        if (lbox == 1) {\n          lbox = readUint(data, position, 8);\n          position += 8;\n          headerSize += 8;\n        }\n        if (lbox === 0)\n          lbox = length - position + headerSize;\n        if (lbox < headerSize)\n          error('JPX error: Invalid box field size');\n        var dataLength = lbox - headerSize;\n        var jumpDataLength = true;\n        switch (tbox) {\n          case 0x6A501A1A: // 'jP\\032\\032'\n            // TODO\n            break;\n          case 0x6A703268: // 'jp2h'\n            jumpDataLength = false; // parsing child boxes\n            break;\n          case 0x636F6C72: // 'colr'\n            // TODO\n            break;\n          case 0x6A703263: // 'jp2c'\n            this.parseCodestream(data, position, position + dataLength);\n            break;\n        }\n        if (jumpDataLength)\n          position += dataLength;\n      }\n    },\n    parseCodestream: function JpxImage_parseCodestream(data, start, end) {\n      var context = {};\n      try {\n        var position = start;\n        while (position < end) {\n          var code = readUint16(data, position);\n          position += 2;\n\n          var length = 0, j;\n          switch (code) {\n            case 0xFF4F: // Start of codestream (SOC)\n              context.mainHeader = true;\n              break;\n            case 0xFFD9: // End of codestream (EOC)\n              break;\n            case 0xFF51: // Image and tile size (SIZ)\n              length = readUint16(data, position);\n              var siz = {};\n              siz.Xsiz = readUint32(data, position + 4);\n              siz.Ysiz = readUint32(data, position + 8);\n              siz.XOsiz = readUint32(data, position + 12);\n              siz.YOsiz = readUint32(data, position + 16);\n              siz.XTsiz = readUint32(data, position + 20);\n              siz.YTsiz = readUint32(data, position + 24);\n              siz.XTOsiz = readUint32(data, position + 28);\n              siz.YTOsiz = readUint32(data, position + 32);\n              var componentsCount = readUint16(data, position + 36);\n              siz.Csiz = componentsCount;\n              var components = [];\n              j = position + 38;\n              for (var i = 0; i < componentsCount; i++) {\n                var component = {\n                  precision: (data[j] & 0x7F) + 1,\n                  isSigned: !!(data[j] & 0x80),\n                  XRsiz: data[j + 1],\n                  YRsiz: data[j + 1]\n                };\n                calculateComponentDimensions(component, siz);\n                components.push(component);\n              }\n              context.SIZ = siz;\n              context.components = components;\n              calculateTileGrids(context, components);\n              context.QCC = [];\n              context.COC = [];\n              break;\n            case 0xFF5C: // Quantization default (QCD)\n              length = readUint16(data, position);\n              var qcd = {};\n              j = position + 2;\n              var sqcd = data[j++];\n              var spqcdSize, scalarExpounded;\n              switch (sqcd & 0x1F) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n                default:\n                  throw 'Invalid SQcd value ' + sqcd;\n              }\n              qcd.noQuantization = spqcdSize == 8;\n              qcd.scalarExpounded = scalarExpounded;\n              qcd.guardBits = sqcd >> 5;\n              var spqcds = [];\n              while (j < length + position) {\n                var spqcd = {};\n                if (spqcdSize == 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                  j += 2;\n                }\n                spqcds.push(spqcd);\n              }\n              qcd.SPqcds = spqcds;\n              if (context.mainHeader)\n                context.QCD = qcd;\n              else {\n                context.currentTile.QCD = qcd;\n                context.currentTile.QCC = [];\n              }\n              break;\n            case 0xFF5D: // Quantization component (QCC)\n              length = readUint16(data, position);\n              var qcc = {};\n              j = position + 2;\n              var cqcc;\n              if (context.SIZ.Csiz < 257)\n                cqcc = data[j++];\n              else {\n                cqcc = readUint16(data, j);\n                j += 2;\n              }\n              var sqcd = data[j++];\n              var spqcdSize, scalarExpounded;\n              switch (sqcd & 0x1F) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n                default:\n                  throw 'Invalid SQcd value ' + sqcd;\n              }\n              qcc.noQuantization = spqcdSize == 8;\n              qcc.scalarExpounded = scalarExpounded;\n              qcc.guardBits = sqcd >> 5;\n              var spqcds = [];\n              while (j < length + position) {\n                var spqcd = {};\n                if (spqcdSize == 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                  j += 2;\n                }\n                spqcds.push(spqcd);\n              }\n              qcc.SPqcds = spqcds;\n              if (context.mainHeader)\n                context.QCC[cqcc] = qcc;\n              else\n                context.currentTile.QCC[cqcc] = qcc;\n              break;\n            case 0xFF52: // Coding style default (COD)\n              length = readUint16(data, position);\n              var cod = {};\n              j = position + 2;\n              var scod = data[j++];\n              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n              cod.sopMarkerUsed = !!(scod & 2);\n              cod.ephMarkerUsed = !!(scod & 4);\n              var codingStyle = {};\n              cod.progressionOrder = data[j++];\n              cod.layersCount = readUint16(data, j);\n              j += 2;\n              cod.multipleComponentTransform = data[j++];\n\n              cod.decompositionLevelsCount = data[j++];\n              cod.xcb = (data[j++] & 0xF) + 2;\n              cod.ycb = (data[j++] & 0xF) + 2;\n              var blockStyle = data[j++];\n              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n              cod.resetContextProbabilities = !!(blockStyle & 2);\n              cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n              cod.verticalyStripe = !!(blockStyle & 8);\n              cod.predictableTermination = !!(blockStyle & 16);\n              cod.segmentationSymbolUsed = !!(blockStyle & 32);\n              cod.transformation = data[j++];\n              if (cod.entropyCoderWithCustomPrecincts) {\n                var precinctsSizes = {};\n                while (j < length + position) {\n                  var precinctsSize = data[j];\n                  precinctsSizes.push({\n                    PPx: precinctsSize & 0xF,\n                    PPy: precinctsSize >> 4\n                  });\n                }\n                cod.precinctsSizes = precinctsSizes;\n              }\n\n              if (cod.sopMarkerUsed || cod.ephMarkerUsed ||\n                  cod.selectiveArithmeticCodingBypass ||\n                  cod.resetContextProbabilities ||\n                  cod.terminationOnEachCodingPass ||\n                  cod.verticalyStripe || cod.predictableTermination)\n                throw 'Unsupported COD options: ' +\n                  globalScope.JSON.stringify(cod);\n\n              if (context.mainHeader)\n                context.COD = cod;\n              else {\n                context.currentTile.COD = cod;\n                context.currentTile.COC = [];\n              }\n              break;\n            case 0xFF90: // Start of tile-part (SOT)\n              length = readUint16(data, position);\n              var tile = {};\n              tile.index = readUint16(data, position + 2);\n              tile.length = readUint32(data, position + 4);\n              tile.dataEnd = tile.length + position - 2;\n              tile.partIndex = data[position + 8];\n              tile.partsCount = data[position + 9];\n\n              context.mainHeader = false;\n              if (tile.partIndex === 0) {\n                // reset component specific settings\n                tile.COD = context.COD;\n                tile.COC = context.COC.slice(0); // clone of the global COC\n                tile.QCD = context.QCD;\n                tile.QCC = context.QCC.slice(0); // clone of the global COC\n              }\n              context.currentTile = tile;\n              break;\n            case 0xFF93: // Start of data (SOD)\n              var tile = context.currentTile;\n              if (tile.partIndex === 0) {\n                initializeTile(context, tile.index);\n                buildPackets(context);\n              }\n\n              // moving to the end of the data\n              length = tile.dataEnd - position;\n\n              parseTilePackets(context, data, position, length);\n              break;\n            case 0xFF64: // Comment (COM)\n              length = readUint16(data, position);\n              // skipping content\n              break;\n            default:\n              throw 'Unknown codestream code: ' + code.toString(16);\n          }\n          position += length;\n        }\n      } catch (e) {\n        if (this.failOnCorruptedImage)\n          error('JPX error: ' + e);\n        else\n          warn('JPX error: ' + e + '. Trying to recover');\n      }\n      this.tiles = transformComponents(context);\n      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n      this.componentsCount = context.SIZ.Csiz;\n    }\n  };\n  function readUint32(data, offset) {\n    return (data[offset] << 24) | (data[offset + 1] << 16) |\n      (data[offset + 2] << 8) | data[offset + 3];\n  }\n  function readUint16(data, offset) {\n    return (data[offset] << 8) | data[offset + 1];\n  }\n  function log2(x) {\n    var n = 1, i = 0;\n    while (x > n) {\n      n <<= 1;\n      i++;\n    }\n    return i;\n  }\n  function calculateComponentDimensions(component, siz) {\n    // Section B.2 Component mapping\n    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n    component.width = component.x1 - component.x0;\n    component.height = component.y1 - component.y0;\n  }\n  function calculateTileGrids(context, components) {\n    var siz = context.SIZ;\n    // Section B.3 Division into tile and tile-components\n    var tiles = [];\n    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n    for (var q = 0; q < numYtiles; q++) {\n      for (var p = 0; p < numXtiles; p++) {\n        var tile = {};\n        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n        tile.width = tile.tx1 - tile.tx0;\n        tile.height = tile.ty1 - tile.ty0;\n        tile.components = [];\n        tiles.push(tile);\n      }\n    }\n    context.tiles = tiles;\n\n    var componentsCount = siz.Csiz;\n    for (var i = 0, ii = componentsCount; i < ii; i++) {\n      var component = components[i];\n      var tileComponents = [];\n      for (var j = 0, jj = tiles.length; j < jj; j++) {\n        var tileComponent = {}, tile = tiles[j];\n        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n        tile.components[i] = tileComponent;\n      }\n    }\n  }\n  function getBlocksDimensions(context, component, r) {\n    var codOrCoc = component.codingStyleParameters;\n    var result = {};\n    if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n      result.PPx = 15;\n      result.PPy = 15;\n    } else {\n      result.PPx = codOrCoc.precinctsSizes[r].PPx;\n      result.PPy = codOrCoc.precinctsSizes[r].PPy;\n    }\n    // calculate codeblock size as described in section B.7\n    result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) :\n      Math.min(codOrCoc.xcb, result.PPx);\n    result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) :\n      Math.min(codOrCoc.ycb, result.PPy);\n    return result;\n  }\n  function buildPrecincts(context, resolution, dimensions) {\n    // Section B.6 Division resolution to precincts\n    var precinctWidth = 1 << dimensions.PPx;\n    var precinctHeight = 1 << dimensions.PPy;\n    var numprecinctswide = resolution.trx1 > resolution.trx0 ?\n      Math.ceil(resolution.trx1 / precinctWidth) -\n      Math.floor(resolution.trx0 / precinctWidth) : 0;\n    var numprecinctshigh = resolution.try1 > resolution.try0 ?\n      Math.ceil(resolution.try1 / precinctHeight) -\n      Math.floor(resolution.try0 / precinctHeight) : 0;\n    var numprecincts = numprecinctswide * numprecinctshigh;\n    var precinctXOffset = Math.floor(resolution.trx0 / precinctWidth) *\n      precinctWidth;\n    var precinctYOffset = Math.floor(resolution.try0 / precinctHeight) *\n      precinctHeight;\n    resolution.precinctParameters = {\n      precinctXOffset: precinctXOffset,\n      precinctYOffset: precinctYOffset,\n      precinctWidth: precinctWidth,\n      precinctHeight: precinctHeight,\n      numprecinctswide: numprecinctswide,\n      numprecinctshigh: numprecinctshigh,\n      numprecincts: numprecincts\n    };\n  }\n  function buildCodeblocks(context, subband, dimensions) {\n    // Section B.7 Division sub-band into code-blocks\n    var xcb_ = dimensions.xcb_;\n    var ycb_ = dimensions.ycb_;\n    var codeblockWidth = 1 << xcb_;\n    var codeblockHeight = 1 << ycb_;\n    var cbx0 = Math.floor(subband.tbx0 / codeblockWidth);\n    var cby0 = Math.floor(subband.tby0 / codeblockHeight);\n    var cbx1 = Math.ceil(subband.tbx1 / codeblockWidth);\n    var cby1 = Math.ceil(subband.tby1 / codeblockHeight);\n    var precinctParameters = subband.resolution.precinctParameters;\n    var codeblocks = [];\n    var precincts = [];\n    for (var j = cby0; j < cby1; j++) {\n      for (var i = cbx0; i < cbx1; i++) {\n        var codeblock = {\n          cbx: i,\n          cby: j,\n          tbx0: codeblockWidth * i,\n          tby0: codeblockHeight * j,\n          tbx1: codeblockWidth * (i + 1),\n          tby1: codeblockHeight * (j + 1)\n        };\n        // calculate precinct number\n        var pi = Math.floor((codeblock.tbx0 -\n          precinctParameters.precinctXOffset) /\n          precinctParameters.precinctWidth);\n        var pj = Math.floor((codeblock.tby0 -\n          precinctParameters.precinctYOffset) /\n          precinctParameters.precinctHeight);\n        var precinctNumber = pj +\n          pi * precinctParameters.numprecinctswide;\n        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n        codeblock.precinctNumber = precinctNumber;\n        codeblock.subbandType = subband.type;\n        var coefficientsLength = (codeblock.tbx1_ - codeblock.tbx0_) *\n          (codeblock.tby1_ - codeblock.tby0_);\n        codeblock.Lblock = 3;\n        codeblocks.push(codeblock);\n        // building precinct for the sub-band\n        var precinct;\n        if (precinctNumber in precincts) {\n          precinct = precincts[precinctNumber];\n          precinct.cbxMin = Math.min(precinct.cbxMin, i);\n          precinct.cbyMin = Math.min(precinct.cbyMin, j);\n          precinct.cbxMax = Math.max(precinct.cbxMax, i);\n          precinct.cbyMax = Math.max(precinct.cbyMax, j);\n        } else {\n          precincts[precinctNumber] = precinct = {\n            cbxMin: i,\n            cbyMin: j,\n            cbxMax: i,\n            cbyMax: j\n          };\n        }\n        codeblock.precinct = precinct;\n      }\n    }\n    subband.codeblockParameters = {\n      codeblockWidth: xcb_,\n      codeblockHeight: ycb_,\n      numcodeblockwide: cbx1 - cbx0 + 1,\n      numcodeblockhigh: cby1 - cby1 + 1\n    };\n    subband.codeblocks = codeblocks;\n    for (var i = 0, ii = codeblocks.length; i < ii; i++) {\n      var codeblock = codeblocks[i];\n      var precinctNumber = codeblock.precinctNumber;\n    }\n    subband.precincts = precincts;\n  }\n  function createPacket(resolution, precinctNumber, layerNumber) {\n    var precinctCodeblocks = [];\n    // Section B.10.8 Order of info in packet\n    var subbands = resolution.subbands;\n    // sub-bands already ordered in 'LL', 'HL', 'LH', and 'HH' sequence\n    for (var i = 0, ii = subbands.length; i < ii; i++) {\n      var subband = subbands[i];\n      var codeblocks = subband.codeblocks;\n      for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n        var codeblock = codeblocks[j];\n        if (codeblock.precinctNumber != precinctNumber)\n          continue;\n        precinctCodeblocks.push(codeblock);\n      }\n    }\n    return {\n      layerNumber: layerNumber,\n      codeblocks: precinctCodeblocks\n    };\n  }\n  function LayerResolutionComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var l = 0, r = 0, i = 0, k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.1 Layer-resolution-component-position\n      for (; l < layersCount; l++) {\n        for (; r <= maxDecompositionLevelsCount; r++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n            if (r > component.codingStyleParameters.decompositionLevelsCount)\n              continue;\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n            k = 0;\n          }\n          i = 0;\n        }\n        r = 0;\n      }\n      throw 'Out of packets';\n    };\n  }\n  function ResolutionLayerComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var r = 0, l = 0, i = 0, k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.2 Resolution-layer-component-position\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; l < layersCount; l++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n            if (r > component.codingStyleParameters.decompositionLevelsCount)\n              continue;\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n            k = 0;\n          }\n          i = 0;\n        }\n        l = 0;\n      }\n      throw 'Out of packets';\n    };\n  }\n  function buildPackets(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var componentsCount = siz.Csiz;\n    // Creating resolutions and sub-bands for each component\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount =\n        component.codingStyleParameters.decompositionLevelsCount;\n      // Section B.5 Resolution levels and sub-bands\n      var resolutions = [];\n      var subbands = [];\n      for (var r = 0; r <= decompositionLevelsCount; r++) {\n        var blocksDimensions = getBlocksDimensions(context, component, r);\n        var resolution = {};\n        var scale = 1 << (decompositionLevelsCount - r);\n        resolution.trx0 = Math.ceil(component.tcx0 / scale);\n        resolution.try0 = Math.ceil(component.tcy0 / scale);\n        resolution.trx1 = Math.ceil(component.tcx1 / scale);\n        resolution.try1 = Math.ceil(component.tcy1 / scale);\n        buildPrecincts(context, resolution, blocksDimensions);\n        resolutions.push(resolution);\n\n        var subband;\n        if (r === 0) {\n          // one sub-band (LL) with last decomposition\n          subband = {};\n          subband.type = 'LL';\n          subband.tbx0 = Math.ceil(component.tcx0 / scale);\n          subband.tby0 = Math.ceil(component.tcy0 / scale);\n          subband.tbx1 = Math.ceil(component.tcx1 / scale);\n          subband.tby1 = Math.ceil(component.tcy1 / scale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolution.subbands = [subband];\n        } else {\n          var bscale = 1 << (decompositionLevelsCount - r + 1);\n          var resolutionSubbands = [];\n          // three sub-bands (HL, LH and HH) with rest of decompositions\n          subband = {};\n          subband.type = 'HL';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          subband = {};\n          subband.type = 'LH';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          subband = {};\n          subband.type = 'HH';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          resolution.subbands = resolutionSubbands;\n        }\n      }\n      component.resolutions = resolutions;\n      component.subbands = subbands;\n    }\n    // Generate the packets sequence\n    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n    var packetsIterator;\n    switch (progressionOrder) {\n      case 0:\n        tile.packetsIterator =\n          new LayerResolutionComponentPositionIterator(context);\n        break;\n      case 1:\n        tile.packetsIterator =\n          new ResolutionLayerComponentPositionIterator(context);\n        break;\n      default:\n        throw 'Unsupported progression order ' + progressionOrder;\n    }\n  }\n  function parseTilePackets(context, data, offset, dataLength) {\n    var position = 0;\n    var buffer, bufferSize = 0, skipNextBit = false;\n    function readBits(count) {\n      while (bufferSize < count) {\n        var b = data[offset + position];\n        position++;\n        if (skipNextBit) {\n          buffer = (buffer << 7) | b;\n          bufferSize += 7;\n          skipNextBit = false;\n        } else {\n          buffer = (buffer << 8) | b;\n          bufferSize += 8;\n        }\n        if (b == 0xFF) {\n          skipNextBit = true;\n        }\n      }\n      bufferSize -= count;\n      return (buffer >>> bufferSize) & ((1 << count) - 1);\n    }\n    function alignToByte() {\n      bufferSize = 0;\n      if (skipNextBit) {\n        position++;\n        skipNextBit = false;\n      }\n    }\n    function readCodingpasses() {\n      var value = readBits(1);\n      if (value === 0)\n        return 1;\n      value = (value << 1) | readBits(1);\n      if (value == 0x02)\n        return 2;\n      value = (value << 2) | readBits(2);\n      if (value <= 0x0E)\n        return (value & 0x03) + 3;\n      value = (value << 5) | readBits(5);\n      if (value <= 0x1FE)\n        return (value & 0x1F) + 6;\n      value = (value << 7) | readBits(7);\n      return (value & 0x7F) + 37;\n    }\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var packetsIterator = tile.packetsIterator;\n    while (position < dataLength) {\n      var packet = packetsIterator.nextPacket();\n      if (!readBits(1)) {\n        alignToByte();\n        continue;\n      }\n      var layerNumber = packet.layerNumber;\n      var queue = [];\n      for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n        var codeblock = packet.codeblocks[i];\n        var precinct = codeblock.precinct;\n        var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n        var codeblockRow = codeblock.cby - precinct.cbyMin;\n        var codeblockIncluded = false;\n        var firstTimeInclusion = false;\n        if ('included' in codeblock) {\n          codeblockIncluded = !!readBits(1);\n        } else {\n          // reading inclusion tree\n          var precinct = codeblock.precinct;\n          var inclusionTree, zeroBitPlanesTree;\n          if ('inclusionTree' in precinct) {\n            inclusionTree = precinct.inclusionTree;\n          } else {\n            // building inclusion and zero bit-planes trees\n            var width = precinct.cbxMax - precinct.cbxMin + 1;\n            var height = precinct.cbyMax - precinct.cbyMin + 1;\n            inclusionTree = new InclusionTree(width, height, layerNumber);\n            zeroBitPlanesTree = new TagTree(width, height);\n            precinct.inclusionTree = inclusionTree;\n            precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n          }\n\n          if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {\n            while (true) {\n              if (readBits(1)) {\n                var valueReady = !inclusionTree.nextLevel();\n                if (valueReady) {\n                  codeblock.included = true;\n                  codeblockIncluded = firstTimeInclusion = true;\n                  break;\n                }\n              } else {\n                inclusionTree.incrementValue(layerNumber);\n                break;\n              }\n            }\n          }\n        }\n        if (!codeblockIncluded)\n          continue;\n        if (firstTimeInclusion) {\n          zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n          zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n          while (true) {\n            if (readBits(1)) {\n              var valueReady = !zeroBitPlanesTree.nextLevel();\n              if (valueReady)\n                break;\n            } else\n              zeroBitPlanesTree.incrementValue();\n          }\n          codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n        }\n        var codingpasses = readCodingpasses();\n        while (readBits(1))\n          codeblock.Lblock++;\n        var codingpassesLog2 = log2(codingpasses);\n        // rounding down log2\n        var bits = ((codingpasses < (1 << codingpassesLog2)) ?\n          codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;\n        var codedDataLength = readBits(bits);\n        queue.push({\n          codeblock: codeblock,\n          codingpasses: codingpasses,\n          dataLength: codedDataLength\n        });\n      }\n      alignToByte();\n      while (queue.length > 0) {\n        var packetItem = queue.shift();\n        var codeblock = packetItem.codeblock;\n        if (!('data' in codeblock))\n          codeblock.data = [];\n        codeblock.data.push({\n          data: data,\n          start: offset + position,\n          end: offset + position + packetItem.dataLength,\n          codingpasses: packetItem.codingpasses\n        });\n        position += packetItem.dataLength;\n      }\n    }\n    return position;\n  }\n  function copyCoefficients(coefficients, x0, y0, width, height,\n                            delta, mb, codeblocks, transformation,\n                            segmentationSymbolUsed) {\n    var r = 0.5; // formula (E-6)\n    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n      var codeblock = codeblocks[i];\n      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n      var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n      if (blockWidth === 0 || blockHeight === 0)\n        continue;\n      if (!('data' in codeblock))\n        continue;\n\n      var bitModel, currentCodingpassType;\n      bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType,\n        codeblock.zeroBitPlanes);\n      currentCodingpassType = 2; // first bit plane starts from cleanup\n\n      // collect data\n      var data = codeblock.data, totalLength = 0, codingpasses = 0;\n      for (var q = 0, qq = data.length; q < qq; q++) {\n        var dataItem = data[q];\n        totalLength += dataItem.end - dataItem.start;\n        codingpasses += dataItem.codingpasses;\n      }\n      var encodedData = new Uint8Array(totalLength), k = 0;\n      for (var q = 0, qq = data.length; q < qq; q++) {\n        var dataItem = data[q];\n        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n        encodedData.set(chunk, k);\n        k += chunk.length;\n      }\n      // decoding the item\n      var decoder = new ArithmeticDecoder(encodedData, 0, totalLength);\n      bitModel.setDecoder(decoder);\n\n      for (var q = 0; q < codingpasses; q++) {\n        switch (currentCodingpassType) {\n          case 0:\n            bitModel.runSignificancePropogationPass();\n            break;\n          case 1:\n            bitModel.runMagnitudeRefinementPass();\n            break;\n          case 2:\n            bitModel.runCleanupPass();\n            if (segmentationSymbolUsed)\n              bitModel.checkSegmentationSymbol();\n            break;\n        }\n        currentCodingpassType = (currentCodingpassType + 1) % 3;\n      }\n\n      var offset = (codeblock.tbx0_ - x0) + (codeblock.tby0_ - y0) * width;\n      var position = 0;\n      for (var j = 0; j < blockHeight; j++) {\n        for (var k = 0; k < blockWidth; k++) {\n          var n = (bitModel.coefficentsSign[position] ? -1 : 1) *\n            bitModel.coefficentsMagnitude[position];\n          var nb = bitModel.bitsDecoded[position], correction;\n          if (transformation === 0 || mb > nb) {\n            // use r only if transformation is irreversible or\n            // not all bitplanes were decoded for reversible transformation\n            n += n < 0 ? n - r : n > 0 ? n + r : 0;\n            correction = 1 << (mb - nb);\n          } else\n            correction = 1;\n          coefficients[offset++] = n * correction * delta;\n          position++;\n        }\n        offset += width - blockWidth;\n      }\n    }\n  }\n  function transformTile(context, tile, c) {\n    var component = tile.components[c];\n    var codingStyleParameters = component.codingStyleParameters;\n    var quantizationParameters = component.quantizationParameters;\n    var decompositionLevelsCount =\n      codingStyleParameters.decompositionLevelsCount;\n    var spqcds = quantizationParameters.SPqcds;\n    var scalarExpounded = quantizationParameters.scalarExpounded;\n    var guardBits = quantizationParameters.guardBits;\n    var transformation = codingStyleParameters.transformation;\n    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n    var precision = context.components[c].precision;\n\n    var subbandCoefficients = [];\n    var k = 0, b = 0;\n    for (var i = 0; i <= decompositionLevelsCount; i++) {\n      var resolution = component.resolutions[i];\n\n      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n        var mu, epsilon;\n        if (!scalarExpounded) {\n          // formula E-5\n          mu = spqcds[0].mu;\n          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n        } else {\n          mu = spqcds[b].mu;\n          epsilon = spqcds[b].epsilon;\n        }\n\n        var subband = resolution.subbands[j];\n        var width = subband.tbx1 - subband.tbx0;\n        var height = subband.tby1 - subband.tby0;\n        var gainLog2 = SubbandsGainLog2[subband.type];\n\n        // calulate quantization coefficient (Section E.1.1.1)\n        var delta = Math.pow(2, (precision + gainLog2) - epsilon) *\n          (1 + mu / 2048);\n        var mb = (guardBits + epsilon - 1);\n\n        var coefficients = new Float32Array(width * height);\n        copyCoefficients(coefficients, subband.tbx0, subband.tby0,\n          width, height, delta, mb, subband.codeblocks, transformation,\n          segmentationSymbolUsed);\n\n        subbandCoefficients.push({\n          width: width,\n          height: height,\n          items: coefficients\n        });\n\n        b++;\n      }\n    }\n\n    var transformation = codingStyleParameters.transformation;\n    var transform = transformation === 0 ? new IrreversibleTransform() :\n      new ReversibleTransform();\n    var result = transform.calculate(subbandCoefficients,\n      component.tcx0, component.tcy0);\n    return {\n      left: component.tcx0,\n      top: component.tcy0,\n      width: result.width,\n      height: result.height,\n      items: result.items\n    };\n  }\n  function transformComponents(context) {\n    var siz = context.SIZ;\n    var components = context.components;\n    var componentsCount = siz.Csiz;\n    var resultImages = [];\n    for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n      var tile = context.tiles[i];\n      var result = [];\n      for (var c = 0; c < componentsCount; c++) {\n        var image = transformTile(context, tile, c);\n        result.push(image);\n      }\n\n      // Section G.2.2 Inverse multi component transform\n      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n        var y0items = result[0].items;\n        var y1items = result[1].items;\n        var y2items = result[2].items;\n        for (var j = 0, jj = y0items.length; j < jj; j++) {\n          var y0 = y0items[j], y1 = y1items[j], y2 = y2items[j];\n          var i1 = y0 - ((y2 + y1) >> 2);\n          y1items[j] = i1;\n          y0items[j] = y2 + i1;\n          y2items[j] = y1 + i1;\n        }\n      }\n\n      // Section G.1 DC level shifting to unsigned component values\n      for (var c = 0; c < componentsCount; c++) {\n        var component = components[c];\n        if (component.isSigned)\n          continue;\n\n        var offset = 1 << (component.precision - 1);\n        var tileImage = result[c];\n        var items = tileImage.items;\n        for (var j = 0, jj = items.length; j < jj; j++)\n          items[j] += offset;\n      }\n\n      // To simplify things: shift and clamp output to 8 bit unsigned\n      for (var c = 0; c < componentsCount; c++) {\n        var component = components[c];\n        var offset = component.isSigned ? 128 : 0;\n        var shift = component.precision - 8;\n        var tileImage = result[c];\n        var items = tileImage.items;\n        var data = new Uint8Array(items.length);\n        for (var j = 0, jj = items.length; j < jj; j++) {\n          var value = (items[j] >> shift) + offset;\n          data[j] = value < 0 ? 0 : value > 255 ? 255 : value;\n        }\n        result[c].items = data;\n      }\n\n      resultImages.push(result);\n    }\n    return resultImages;\n  }\n  function initializeTile(context, tileIndex) {\n    var siz = context.SIZ;\n    var componentsCount = siz.Csiz;\n    var tile = context.tiles[tileIndex];\n    var resultTiles = [];\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var qcdOrQcc = c in context.currentTile.QCC ?\n        context.currentTile.QCC[c] : context.currentTile.QCD;\n      component.quantizationParameters = qcdOrQcc;\n      var codOrCoc = c in context.currentTile.COC ?\n        context.currentTile.COC[c] : context.currentTile.COD;\n      component.codingStyleParameters = codOrCoc;\n    }\n    tile.codingStyleDefaultParameters = context.currentTile.COD;\n  }\n\n  // Section B.10.2 Tag trees\n  var TagTree = (function TagTreeClosure() {\n    function TagTree(width, height) {\n      var levelsLength = log2(Math.max(width, height)) + 1;\n      this.levels = [];\n      for (var i = 0; i < levelsLength; i++) {\n        var level = {\n          width: width,\n          height: height,\n          items: []\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n    TagTree.prototype = {\n      reset: function TagTree_reset(i, j) {\n        var currentLevel = 0, value = 0;\n        while (currentLevel < this.levels.length) {\n          var level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          if (index in level.items) {\n            value = level.items[index];\n            break;\n          }\n          level.index = index;\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n        currentLevel--;\n        var level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        this.currentLevel = currentLevel;\n        delete this.value;\n      },\n      incrementValue: function TagTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index]++;\n      },\n      nextLevel: function TagTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        currentLevel--;\n        if (currentLevel < 0) {\n          this.value = value;\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        var level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return TagTree;\n  })();\n\n  var InclusionTree = (function InclusionTreeClosure() {\n    function InclusionTree(width, height,  defaultValue) {\n      var levelsLength = log2(Math.max(width, height)) + 1;\n      this.levels = [];\n      for (var i = 0; i < levelsLength; i++) {\n        var items = new Uint8Array(width * height);\n        for (var j = 0, jj = items.length; j < jj; j++)\n          items[j] = defaultValue;\n\n        var level = {\n          width: width,\n          height: height,\n          items: items\n        };\n        this.levels.push(level);\n\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n    InclusionTree.prototype = {\n      reset: function InclusionTree_reset(i, j, stopValue) {\n        var currentLevel = 0;\n        while (currentLevel < this.levels.length) {\n          var level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          level.index = index;\n          var value = level.items[index];\n\n          if (value == 0xFF)\n            break;\n\n          if (value > stopValue) {\n            this.currentLevel = currentLevel;\n            // already know about this one, propagating the value to top levels\n            this.propagateValues();\n            return false;\n          }\n\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n        this.currentLevel = currentLevel - 1;\n        return true;\n      },\n      incrementValue: function InclusionTree_incrementValue(stopValue) {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index] = stopValue + 1;\n        this.propagateValues();\n      },\n      propagateValues: function InclusionTree_propagateValues() {\n        var levelIndex = this.currentLevel;\n        var level = this.levels[levelIndex];\n        var currentValue = level.items[level.index];\n        while (--levelIndex >= 0) {\n          var level = this.levels[levelIndex];\n          level.items[level.index] = currentValue;\n        }\n      },\n      nextLevel: function InclusionTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        level.items[level.index] = 0xFF;\n        currentLevel--;\n        if (currentLevel < 0)\n          return false;\n\n        this.currentLevel = currentLevel;\n        var level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return InclusionTree;\n  })();\n\n  // Implements C.3. Arithmetic decoding procedures\n  var ArithmeticDecoder = (function ArithmeticDecoderClosure() {\n    var QeTable = [\n      {qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1},\n      {qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0},\n      {qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0},\n      {qe: 0x0AC1, nmps: 4, nlps: 12, switchFlag: 0},\n      {qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0},\n      {qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0},\n      {qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1},\n      {qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0},\n      {qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0},\n      {qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0},\n      {qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0},\n      {qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0},\n      {qe: 0x1C01, nmps: 13, nlps: 20, switchFlag: 0},\n      {qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0},\n      {qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1},\n      {qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0},\n      {qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0},\n      {qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0},\n      {qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0},\n      {qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0},\n      {qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0},\n      {qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0},\n      {qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0},\n      {qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0},\n      {qe: 0x1C01, nmps: 25, nlps: 22, switchFlag: 0},\n      {qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0},\n      {qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0},\n      {qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0},\n      {qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0},\n      {qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0},\n      {qe: 0x0AC1, nmps: 31, nlps: 28, switchFlag: 0},\n      {qe: 0x09C1, nmps: 32, nlps: 29, switchFlag: 0},\n      {qe: 0x08A1, nmps: 33, nlps: 30, switchFlag: 0},\n      {qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0},\n      {qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0},\n      {qe: 0x02A1, nmps: 36, nlps: 33, switchFlag: 0},\n      {qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0},\n      {qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0},\n      {qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0},\n      {qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0},\n      {qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0},\n      {qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0},\n      {qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0},\n      {qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0},\n      {qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0},\n      {qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0},\n      {qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0}\n    ];\n\n    function ArithmeticDecoder(data, start, end) {\n      this.data = data;\n      this.bp = start;\n      this.dataEnd = end;\n\n      this.chigh = data[start];\n      this.clow = 0;\n\n      this.byteIn();\n\n      this.chigh = ((this.chigh << 7) & 0xFFFF) | ((this.clow >> 9) & 0x7F);\n      this.clow = (this.clow << 7) & 0xFFFF;\n      this.ct -= 7;\n      this.a = 0x8000;\n    }\n\n    ArithmeticDecoder.prototype = {\n      byteIn: function ArithmeticDecoder_byteIn() {\n        var data = this.data;\n        var bp = this.bp;\n        if (data[bp] == 0xFF) {\n          var b1 = data[bp + 1];\n          if (b1 > 0x8F) {\n            this.clow += 0xFF00;\n            this.ct = 8;\n          } else {\n            bp++;\n            this.clow += (data[bp] << 9);\n            this.ct = 7;\n            this.bp = bp;\n          }\n        } else {\n          bp++;\n          this.clow += bp < this.dataEnd ? (data[bp] << 8) : 0xFF00;\n          this.ct = 8;\n          this.bp = bp;\n        }\n        if (this.clow > 0xFFFF) {\n          this.chigh += (this.clow >> 16);\n          this.clow &= 0xFFFF;\n        }\n      },\n      readBit: function ArithmeticDecoder_readBit(cx) {\n        var qeIcx = QeTable[cx.index].qe;\n        this.a -= qeIcx;\n\n        if (this.chigh < qeIcx) {\n          var d = this.exchangeLps(cx);\n          this.renormD();\n          return d;\n        } else {\n          this.chigh -= qeIcx;\n          if ((this.a & 0x8000) === 0) {\n            var d = this.exchangeMps(cx);\n            this.renormD();\n            return d;\n          } else {\n            return cx.mps;\n          }\n        }\n      },\n      renormD: function ArithmeticDecoder_renormD() {\n        do {\n          if (this.ct === 0)\n            this.byteIn();\n\n          this.a <<= 1;\n          this.chigh = ((this.chigh << 1) & 0xFFFF) | ((this.clow >> 15) & 1);\n          this.clow = (this.clow << 1) & 0xFFFF;\n          this.ct--;\n        } while ((this.a & 0x8000) === 0);\n      },\n      exchangeMps: function ArithmeticDecoder_exchangeMps(cx) {\n        var d;\n        var qeTableIcx = QeTable[cx.index];\n        if (this.a < qeTableIcx.qe) {\n          d = 1 - cx.mps;\n\n          if (qeTableIcx.switchFlag == 1) {\n            cx.mps = 1 - cx.mps;\n          }\n          cx.index = qeTableIcx.nlps;\n        } else {\n          d = cx.mps;\n          cx.index = qeTableIcx.nmps;\n        }\n        return d;\n      },\n      exchangeLps: function ArithmeticDecoder_exchangeLps(cx) {\n        var d;\n        var qeTableIcx = QeTable[cx.index];\n        if (this.a < qeTableIcx.qe) {\n          this.a = qeTableIcx.qe;\n          d = cx.mps;\n          cx.index = qeTableIcx.nmps;\n        } else {\n          this.a = qeTableIcx.qe;\n          d = 1 - cx.mps;\n\n          if (qeTableIcx.switchFlag == 1) {\n            cx.mps = 1 - cx.mps;\n          }\n          cx.index = qeTableIcx.nlps;\n        }\n        return d;\n      }\n    };\n\n    return ArithmeticDecoder;\n  })();\n\n  // Section D. Coefficient bit modeling\n  var BitModel = (function BitModelClosure() {\n    // Table D-1\n    // The index is binary presentation: 0dddvvhh, ddd - sum of Di (0..4),\n    // vv - sum of Vi (0..2), and hh - sum of Hi (0..2)\n    var LLAndLHContextsLabel = new Uint8Array([\n      0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4,\n      7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6,\n      8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8\n    ]);\n    var HLContextLabel = new Uint8Array([\n      0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8,\n      8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3,\n      4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8\n    ]);\n    var HHContextLabel = new Uint8Array([\n      0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5,\n      5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8,\n      8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8\n    ]);\n\n    // Table D-2\n    function calcSignContribution(significance0, sign0, significance1, sign1) {\n      if (significance1) {\n        if (!sign1)\n          return significance0 ? (!sign0 ? 1 : 0) : 1;\n        else\n          return significance0 ? (!sign0 ? 0 : -1) : -1;\n      } else\n        return significance0 ? (!sign0 ? 1 : -1) : 0;\n    }\n    // Table D-3\n    var SignContextLabels = [\n      {contextLabel: 13, xorBit: 0},\n      {contextLabel: 12, xorBit: 0},\n      {contextLabel: 11, xorBit: 0},\n      {contextLabel: 10, xorBit: 0},\n      {contextLabel: 9, xorBit: 0},\n      {contextLabel: 10, xorBit: 1},\n      {contextLabel: 11, xorBit: 1},\n      {contextLabel: 12, xorBit: 1},\n      {contextLabel: 13, xorBit: 1}\n    ];\n\n    function BitModel(width, height, subband, zeroBitPlanes) {\n      this.width = width;\n      this.height = height;\n\n      this.contextLabelTable = subband == 'HH' ? HHContextLabel :\n        subband == 'HL' ? HLContextLabel : LLAndLHContextsLabel;\n\n      var coefficientCount = width * height;\n\n      // coefficients outside the encoding region treated as insignificant\n      // add border state cells for significanceState\n      this.neighborsSignificance = new Uint8Array(coefficientCount);\n      this.coefficentsSign = new Uint8Array(coefficientCount);\n      this.coefficentsMagnitude = new Uint32Array(coefficientCount);\n      this.processingFlags = new Uint8Array(coefficientCount);\n\n      var bitsDecoded = new Uint8Array(this.width * this.height);\n      for (var i = 0, ii = bitsDecoded.length; i < ii; i++)\n        bitsDecoded[i] = zeroBitPlanes;\n      this.bitsDecoded = bitsDecoded;\n\n      this.reset();\n    }\n\n    BitModel.prototype = {\n      setDecoder: function BitModel_setDecoder(decoder) {\n        this.decoder = decoder;\n      },\n      reset: function BitModel_reset() {\n        this.uniformContext = {index: 46, mps: 0};\n        this.runLengthContext = {index: 3, mps: 0};\n        this.contexts = [];\n        this.contexts.push({index: 4, mps: 0});\n        for (var i = 1; i <= 16; i++)\n          this.contexts.push({index: 0, mps: 0});\n      },\n      setNeighborsSignificance:\n        function BitModel_setNeighborsSignificance(row, column) {\n        var neighborsSignificance = this.neighborsSignificance;\n        var width = this.width, height = this.height;\n        var index = row * width + column;\n        if (row > 0) {\n          if (column > 0)\n            neighborsSignificance[index - width - 1] += 0x10;\n          if (column + 1 < width)\n            neighborsSignificance[index - width + 1] += 0x10;\n          neighborsSignificance[index - width] += 0x04;\n        }\n        if (row + 1 < height) {\n          if (column > 0)\n            neighborsSignificance[index + width - 1] += 0x10;\n          if (column + 1 < width)\n            neighborsSignificance[index + width + 1] += 0x10;\n          neighborsSignificance[index + width] += 0x04;\n        }\n        if (column > 0)\n          neighborsSignificance[index - 1] += 0x01;\n        if (column + 1 < width)\n          neighborsSignificance[index + 1] += 0x01;\n        neighborsSignificance[index] |= 0x80;\n      },\n      runSignificancePropogationPass:\n        function BitModel_runSignificancePropogationPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contextLabels = this.contextLabels;\n        var neighborsSignificance = this.neighborsSignificance;\n        var processingFlags = this.processingFlags;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        // clear processed flag\n        var processedInverseMask = ~1;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        for (var q = 0, qq = width * height; q < qq; q++)\n          processingFlags[q] &= processedInverseMask;\n\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            var index = i0 * width + j;\n            for (var i1 = 0; i1 < 4; i1++, index += width) {\n              var i = i0 + i1;\n              if (i >= height)\n                break;\n\n              if (coefficentsMagnitude[index] || !neighborsSignificance[index])\n                continue;\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var cx = contexts[contextLabel];\n              var decision = decoder.readBit(cx);\n              if (decision) {\n                var sign = this.decodeSignBit(i, j);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      decodeSignBit: function BitModel_decodeSignBit(row, column) {\n        var width = this.width, height = this.height;\n        var index = row * width + column;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var horizontalContribution = calcSignContribution(\n          column > 0 && coefficentsMagnitude[index - 1],\n          coefficentsSign[index - 1],\n          column + 1 < width && coefficentsMagnitude[index + 1],\n          coefficentsSign[index + 1]);\n        var verticalContribution = calcSignContribution(\n          row > 0 && coefficentsMagnitude[index - width],\n          coefficentsSign[index - width],\n          row + 1 < height && coefficentsMagnitude[index + width],\n          coefficentsSign[index + width]);\n\n        var contextLabelAndXor = SignContextLabels[\n          3 * (1 - horizontalContribution) + (1 - verticalContribution)];\n        var contextLabel = contextLabelAndXor.contextLabel;\n        var cx = this.contexts[contextLabel];\n        var decoded = this.decoder.readBit(cx);\n        return decoded ^ contextLabelAndXor.xorBit;\n      },\n      runMagnitudeRefinementPass:\n        function BitModel_runMagnitudeRefinementPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var neighborsSignificance = this.neighborsSignificance;\n        var contexts = this.contexts;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            for (var i1 = 0; i1 < 4; i1++) {\n              var i = i0 + i1;\n              if (i >= height)\n                break;\n              var index = i * width + j;\n\n              // significant but not those that have just become\n              if (!coefficentsMagnitude[index] ||\n                (processingFlags[index] & processedMask) !== 0)\n                continue;\n\n              var contextLabel = 16;\n              if ((processingFlags[index] &\n                firstMagnitudeBitMask) !== 0) {\n                processingFlags[i * width + j] ^= firstMagnitudeBitMask;\n                // first refinement\n                var significance = neighborsSignificance[index];\n                var sumOfSignificance = (significance & 3) +\n                  ((significance >> 2) & 3) + ((significance >> 4) & 7);\n                contextLabel = sumOfSignificance >= 1 ? 15 : 14;\n              }\n\n              var cx = contexts[contextLabel];\n              var bit = decoder.readBit(cx);\n              coefficentsMagnitude[index] =\n                (coefficentsMagnitude[index] << 1) | bit;\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      runCleanupPass: function BitModel_runCleanupPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var neighborsSignificance = this.neighborsSignificance;\n        var significanceState = this.significanceState;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var oneRowDown = width;\n        var twoRowsDown = width * 2;\n        var threeRowsDown = width * 3;\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            var index0 = i0 * width + j;\n            // using the property: labels[neighborsSignificance[index]] == 0\n            // when neighborsSignificance[index] == 0\n            var allEmpty = i0 + 3 < height &&\n              processingFlags[index0] === 0 &&\n              processingFlags[index0 + oneRowDown] === 0 &&\n              processingFlags[index0 + twoRowsDown] === 0 &&\n              processingFlags[index0 + threeRowsDown] === 0 &&\n              neighborsSignificance[index0] === 0 &&\n              neighborsSignificance[index0 + oneRowDown] === 0 &&\n              neighborsSignificance[index0 + twoRowsDown] === 0 &&\n              neighborsSignificance[index0 + threeRowsDown] === 0;\n            var i1 = 0, index = index0;\n            var cx, i;\n            if (allEmpty) {\n              cx = this.runLengthContext;\n              var hasSignificantCoefficent = decoder.readBit(cx);\n              if (!hasSignificantCoefficent) {\n                bitsDecoded[index0]++;\n                bitsDecoded[index0 + oneRowDown]++;\n                bitsDecoded[index0 + twoRowsDown]++;\n                bitsDecoded[index0 + threeRowsDown]++;\n                continue; // next column\n              }\n              cx = this.uniformContext;\n              i1 = (decoder.readBit(cx) << 1) | decoder.readBit(cx);\n              i = i0 + i1;\n              index += i1 * width;\n\n              var sign = this.decodeSignBit(i, j);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j);\n              processingFlags[index] |= firstMagnitudeBitMask;\n\n              index = index0;\n              for (var i2 = i0; i2 <= i; i2++, index += width)\n                bitsDecoded[index]++;\n\n              i1++;\n            }\n            for (; i1 < 4; i1++, index += width) {\n              i = i0 + i1;\n              if (i >= height)\n                break;\n\n              if (coefficentsMagnitude[index] ||\n                (processingFlags[index] & processedMask) !== 0)\n                continue;\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              cx = contexts[contextLabel];\n              var decision = decoder.readBit(cx);\n              if (decision == 1) {\n                var sign = this.decodeSignBit(i, j);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n              bitsDecoded[index]++;\n            }\n          }\n        }\n      },\n      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {\n        var decoder = this.decoder;\n        var cx = this.uniformContext;\n        var symbol = (decoder.readBit(cx) << 3) | (decoder.readBit(cx) << 2) |\n                     (decoder.readBit(cx) << 1) | decoder.readBit(cx);\n        if (symbol != 0xA)\n          throw 'Invalid segmentation symbol';\n      }\n    };\n\n    return BitModel;\n  })();\n\n  // Section F, Discrete wavelet transofrmation\n  var Transform = (function TransformClosure() {\n    function Transform() {\n    }\n    Transform.prototype.calculate =\n      function transformCalculate(subbands, u0, v0) {\n      var ll = subbands[0];\n      for (var i = 1, ii = subbands.length, j = 1; i < ii; i += 3, j++) {\n        ll = this.iterate(ll, subbands[i], subbands[i + 1],\n                          subbands[i + 2], u0, v0);\n      }\n      return ll;\n    };\n    Transform.prototype.expand = function expand(buffer, bufferPadding, step) {\n        // Section F.3.7 extending... using max extension of 4\n        var i1 = bufferPadding - 1, j1 = bufferPadding + 1;\n        var i2 = bufferPadding + step - 2, j2 = bufferPadding + step;\n        buffer[i1--] = buffer[j1++];\n        buffer[j2++] = buffer[i2--];\n        buffer[i1--] = buffer[j1++];\n        buffer[j2++] = buffer[i2--];\n        buffer[i1--] = buffer[j1++];\n        buffer[j2++] = buffer[i2--];\n        buffer[i1--] = buffer[j1++];\n        buffer[j2++] = buffer[i2--];\n    };\n    Transform.prototype.iterate = function Transform_iterate(ll, hl, lh, hh,\n                                                            u0, v0) {\n      var llWidth = ll.width, llHeight = ll.height, llItems = ll.items;\n      var hlWidth = hl.width, hlHeight = hl.height, hlItems = hl.items;\n      var lhWidth = lh.width, lhHeight = lh.height, lhItems = lh.items;\n      var hhWidth = hh.width, hhHeight = hh.height, hhItems = hh.items;\n\n      // Section F.3.3 interleave\n      var width = llWidth + hlWidth;\n      var height = llHeight + lhHeight;\n      var items = new Float32Array(width * height);\n      for (var i = 0, ii = llHeight; i < ii; i++) {\n        var k = i * llWidth, l = i * 2 * width;\n        for (var j = 0, jj = llWidth; j < jj; j++, k++, l += 2)\n          items[l] = llItems[k];\n      }\n      for (var i = 0, ii = hlHeight; i < ii; i++) {\n        var k = i * hlWidth, l = i * 2 * width + 1;\n        for (var j = 0, jj = hlWidth; j < jj; j++, k++, l += 2)\n          items[l] = hlItems[k];\n      }\n      for (var i = 0, ii = lhHeight; i < ii; i++) {\n        var k = i * lhWidth, l = (i * 2 + 1) * width;\n        for (var j = 0, jj = lhWidth; j < jj; j++, k++, l += 2)\n          items[l] = lhItems[k];\n      }\n      for (var i = 0, ii = hhHeight; i < ii; i++) {\n        var k = i * hhWidth, l = (i * 2 + 1) * width + 1;\n        for (var j = 0, jj = hhWidth; j < jj; j++, k++, l += 2)\n          items[l] = hhItems[k];\n      }\n\n      var bufferPadding = 4;\n      var bufferLength = new Float32Array(Math.max(width, height) +\n        2 * bufferPadding);\n      var buffer = new Float32Array(bufferLength);\n      var bufferOut = new Float32Array(bufferLength);\n\n      // Section F.3.4 HOR_SR\n      for (var v = 0; v < height; v++) {\n        if (width == 1) {\n          // if width = 1, when u0 even keep items as is, when odd divide by 2\n          if ((u0 % 1) !== 0) {\n            items[v * width] /= 2;\n          }\n          continue;\n        }\n\n        var k = v * width;\n        var l = bufferPadding;\n        for (var u = 0; u < width; u++, k++, l++)\n          buffer[l] = items[k];\n\n        this.expand(buffer, bufferPadding, width);\n        this.filter(buffer, bufferPadding, width, u0, bufferOut);\n\n        k = v * width;\n        l = bufferPadding;\n        for (var u = 0; u < width; u++, k++, l++)\n          items[k] = bufferOut[l];\n      }\n\n      // Section F.3.5 VER_SR\n      for (var u = 0; u < width; u++) {\n        if (height == 1) {\n          // if height = 1, when v0 even keep items as is, when odd divide by 2\n          if ((v0 % 1) !== 0) {\n            items[u] /= 2;\n          }\n          continue;\n        }\n\n        var k = u;\n        var l = bufferPadding;\n        for (var v = 0; v < height; v++, k += width, l++)\n          buffer[l] = items[k];\n\n        this.expand(buffer, bufferPadding, height);\n        this.filter(buffer, bufferPadding, height, v0, bufferOut);\n\n        k = u;\n        l = bufferPadding;\n        for (var v = 0; v < height; v++, k += width, l++)\n          items[k] = bufferOut[l];\n      }\n      return {\n        width: width,\n        height: height,\n        items: items\n      };\n    };\n    return Transform;\n  })();\n\n  // Section 3.8.2 Irreversible 9-7 filter\n  var IrreversibleTransform = (function IrreversibleTransformClosure() {\n    function IrreversibleTransform() {\n      Transform.call(this);\n    }\n\n    IrreversibleTransform.prototype = Object.create(Transform.prototype);\n    IrreversibleTransform.prototype.filter =\n      function irreversibleTransformFilter(y, offset, length, i0, x) {\n      var i0_ = Math.floor(i0 / 2);\n      var i1_ = Math.floor((i0 + length) / 2);\n      var offset_ = offset - (i0 % 1);\n\n      var alpha = -1.586134342059924;\n      var beta = -0.052980118572961;\n      var gamma = 0.882911075530934;\n      var delta = 0.443506852043971;\n      var K = 1.230174104914001;\n      var K_ = 1 / K;\n\n      // step 1\n      var j = offset_ - 2;\n      for (var n = i0_ - 1, nn = i1_ + 2; n < nn; n++, j += 2)\n        x[j] = K * y[j];\n\n      // step 2\n      var j = offset_ - 3;\n      for (var n = i0_ - 2, nn = i1_ + 2; n < nn; n++, j += 2)\n        x[j] = K_ * y[j];\n\n      // step 3\n      var j = offset_ - 2;\n      for (var n = i0_ - 1, nn = i1_ + 2; n < nn; n++, j += 2)\n        x[j] -= delta * (x[j - 1] + x[j + 1]);\n\n      // step 4\n      var j = offset_ - 1;\n      for (var n = i0_ - 1, nn = i1_ + 1; n < nn; n++, j += 2)\n        x[j] -= gamma * (x[j - 1] + x[j + 1]);\n\n      // step 5\n      var j = offset_;\n      for (var n = i0_, nn = i1_ + 1; n < nn; n++, j += 2)\n        x[j] -= beta * (x[j - 1] + x[j + 1]);\n\n      // step 6\n      var j = offset_ + 1;\n      for (var n = i0_, nn = i1_; n < nn; n++, j += 2)\n        x[j] -= alpha * (x[j - 1] + x[j + 1]);\n    };\n\n    return IrreversibleTransform;\n  })();\n\n  // Section 3.8.1 Reversible 5-3 filter\n  var ReversibleTransform = (function ReversibleTransformClosure() {\n    function ReversibleTransform() {\n      Transform.call(this);\n    }\n\n    ReversibleTransform.prototype = Object.create(Transform.prototype);\n    ReversibleTransform.prototype.filter =\n      function reversibleTransformFilter(y, offset, length, i0, x) {\n      var i0_ = Math.floor(i0 / 2);\n      var i1_ = Math.floor((i0 + length) / 2);\n      var offset_ = offset - (i0 % 1);\n\n      for (var n = i0_, nn = i1_ + 1, j = offset_; n < nn; n++, j += 2)\n        x[j] = y[j] - Math.floor((y[j - 1] + y[j + 1] + 2) / 4);\n\n      for (var n = i0_, nn = i1_, j = offset_ + 1; n < nn; n++, j += 2)\n        x[j] = y[j] + Math.floor((x[j - 1] + x[j + 1]) / 2);\n    };\n\n    return ReversibleTransform;\n  })();\n\n\n  })();\n\n  /**\n   * For JPEG 2000's we use a library to decode these images and\n   * the stream behaves like all the other DecodeStreams.\n   */\n\n    var JpxStream = DecodeStream.inherit({\n        klassName : \"JpxStream\",\n\n        init : function(bytes, dict) {\n          this.dict = dict;\n          this.bytes = bytes;\n\n            this.overrided();          \n        },\n      ensureBuffer : function(req) {\n          if (this.bufferLength)\n              return;\n\n          var jpxImage = new JpxImage();\n          jpxImage.parse(this.bytes);\n\n          var width = jpxImage.width;\n          var height = jpxImage.height;\n          var componentsCount = jpxImage.componentsCount;\n          if (componentsCount != 1 && componentsCount != 3 && componentsCount != 4)\n              error('JPX with ' + componentsCount + ' components is not supported');\n\n          var data = new Uint8Array(width * height * componentsCount);\n\n          for (var k = 0, kk = jpxImage.tiles.length; k < kk; k++) {\n              var tileCompoments = jpxImage.tiles[k];\n              var tileWidth = tileCompoments[0].width;\n              var tileHeight = tileCompoments[0].height;\n              var tileLeft = tileCompoments[0].left;\n              var tileTop = tileCompoments[0].top;\n\n              var dataPosition, sourcePosition, data0, data1, data2, data3, rowFeed;\n              switch (componentsCount) {\n                  case 1:\n                      data0 = tileCompoments[0].items;\n\n                      dataPosition = width * tileTop + tileLeft;\n                      rowFeed = width - tileWidth;\n                      sourcePosition = 0;\n                      for (var j = 0; j < tileHeight; j++) {\n                          for (var i = 0; i < tileWidth; i++)\n                              data[dataPosition++] = data0[sourcePosition++];\n                          dataPosition += rowFeed;\n                      }\n                      break;\n                  case 3:\n                      data0 = tileCompoments[0].items;\n                      data1 = tileCompoments[1].items;\n                      data2 = tileCompoments[2].items;\n\n                      dataPosition = (width * tileTop + tileLeft) * 3;\n                      rowFeed = (width - tileWidth) * 3;\n                      sourcePosition = 0;\n                      for (var j = 0; j < tileHeight; j++) {\n                          for (var i = 0; i < tileWidth; i++) {\n                              data[dataPosition++] = data0[sourcePosition];\n                              data[dataPosition++] = data1[sourcePosition];\n                              data[dataPosition++] = data2[sourcePosition];\n                              sourcePosition++;\n                          }\n                          dataPosition += rowFeed;\n                      }\n                      break;\n                  case 4:\n                      data0 = tileCompoments[0].items;\n                      data1 = tileCompoments[1].items;\n                      data2 = tileCompoments[2].items;\n                      data3 = tileCompoments[3].items;\n\n                      dataPosition = (width * tileTop + tileLeft) * 4;\n                      rowFeed = (width - tileWidth) * 4;\n                      sourcePosition = 0;\n                      for (var j = 0; j < tileHeight; j++) {\n                          for (var i = 0; i < tileWidth; i++) {\n                              data[dataPosition++] = data0[sourcePosition];\n                              data[dataPosition++] = data1[sourcePosition];\n                              data[dataPosition++] = data2[sourcePosition];\n                              data[dataPosition++] = data3[sourcePosition];\n                              sourcePosition++;\n                          }\n                          dataPosition += rowFeed;\n                      }\n                      break;\n              }\n          }\n\n          this.buffer = data;\n          this.bufferLength = data.length;\n      },\n\n      getChar : function JpxStream_getChar() {\n          error('internal error: getChar is not valid on JpxStream');\n      }\n    });\n\n  return codec.jpx = {\n    \"JpxImage\" :JpxImage,\n    \"JpxStream\" : JpxStream\n  };\n  \n});\n\ndefine('skylark-utils-codec/main',[\r\n    \"./codec\",\r\n    \"./base64\",\r\n    \"./jbig2\",\r\n    \"./jpeg\",\r\n    \"./jpx\",\r\n], function(codec) {\r\n\r\n\treturn codec;\r\n});\ndefine('skylark-utils-codec', ['skylark-utils-codec/main'], function (main) { return main; });\n\n"]}