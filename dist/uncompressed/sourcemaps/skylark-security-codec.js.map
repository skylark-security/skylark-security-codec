{"version":3,"sources":["skylark-security-codec.js"],"names":[],"mappingsfile":"../skylark-security-codec.js","sourcesContent":["define('skylark-security-codec/codec',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n\r\n\treturn skylark.attach(\"security.codec\",{});\r\n});\ndefine('skylark-security-codec/base64',[\r\n    \"skylark-langx/langx\",\r\n    \"./codec\"\r\n], function(langx,codec) {\r\n\r\n    var base64 = function() {\r\n        return base64;\r\n    }\r\n\r\n\tvar p=\"=\";\r\n\r\n\tvar codetab=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n\tbase64.encode=function(/* byte[] */ba){\r\n\t\t// summary:\r\n\t\t//\t\tEncode an array of bytes as a base64-encoded string\r\n\t\tvar s=[], l=ba.length;\r\n\t\tvar rm=l%3;\r\n\t\tvar x=l-rm;\r\n\t\tfor (var i=0; i<x;){\r\n\t\t\tvar t=ba[i++]<<16|ba[i++]<<8|ba[i++];\r\n\t\t\ts.push(codetab.charAt((t>>>18)&0x3f));\r\n\t\t\ts.push(codetab.charAt((t>>>12)&0x3f));\r\n\t\t\ts.push(codetab.charAt((t>>>6)&0x3f));\r\n\t\t\ts.push(codetab.charAt(t&0x3f));\r\n\t\t}\r\n\t\t//\tdeal with trailers, based on patch from Peter Wood.\r\n\t\tswitch(rm){\r\n\t\t\tcase 2:{\r\n\t\t\t\tvar t=ba[i++]<<16|ba[i++]<<8;\r\n\t\t\t\ts.push(codetab.charAt((t>>>18)&0x3f));\r\n\t\t\t\ts.push(codetab.charAt((t>>>12)&0x3f));\r\n\t\t\t\ts.push(codetab.charAt((t>>>6)&0x3f));\r\n\t\t\t\ts.push(p);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 1:{\r\n\t\t\t\tvar t=ba[i++]<<16;\r\n\t\t\t\ts.push(codetab.charAt((t>>>18)&0x3f));\r\n\t\t\t\ts.push(codetab.charAt((t>>>12)&0x3f));\r\n\t\t\t\ts.push(p);\r\n\t\t\t\ts.push(p);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn s.join(\"\");\t//\tstring\r\n\t};\r\n\r\n\tbase64.decode=function(/* string */str){\r\n\t\t// summary:\r\n\t\t//\t\tConvert a base64-encoded string to an array of bytes\r\n\t\tvar s=str.split(\"\"), out=[];\r\n\t\tvar l=s.length;\r\n\t\twhile(s[--l]==p){ }\t//\tstrip off trailing padding\r\n\t\tfor (var i=0; i<l;){\r\n\t\t\tvar t=codetab.indexOf(s[i++])<<18;\r\n\t\t\tif(i<=l){ t|=codetab.indexOf(s[i++])<<12 };\r\n\t\t\tif(i<=l){ t|=codetab.indexOf(s[i++])<<6 };\r\n\t\t\tif(i<=l){ t|=codetab.indexOf(s[i++]) };\r\n\t\t\tout.push((t>>>16)&0xff);\r\n\t\t\tout.push((t>>>8)&0xff);\r\n\t\t\tout.push(t&0xff);\r\n\t\t}\r\n\t\t//\tstrip off any null bytes\r\n\t\twhile(out[out.length-1]==0){ out.pop(); }\r\n\t\treturn out;\t//\tbyte[]\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Check if some data is encoded as base64.\r\n\t *\r\n\t * This is a fast test that picks some random position in the string to check if they are valid base64 characters.\r\n\t *\r\n\t * @method isBase64\r\n\t * @param {Object} data Data to be tested.\r\n\t * @return {Boolean} True if data is base64 encoded, false otherwise.\r\n\t */\r\n\tbase64.isBase64 = function(data) {\r\n\t\tif(typeof data !== \"string\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//Check if it has a base64 header\r\n\t\tif(data.startsWith(\"data:\")){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t//Check string data\r\n\t\tfor(var i = 0; i < data.length; i++) {\r\n\t\t\tif(!codetab.includes(data.charAt(i)))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove base64 header from data.\r\n\t * \r\n\t * Usefull for removing the heander from image, audio, video, etc.\r\n\t *\r\n\t * @method removeHeader\r\n\t * @param {String} base64\r\n\t * @return {String} base64\r\n\t */\r\n\tbase64.removeHeader = function(data) {\r\n\t\treturn data.slice(data.search(\";base64,\") + 8);\r\n\t};\r\n\r\n\t/**\r\n\t * Get the file format present in the base64 string.\r\n\t *\r\n\t * @method getFileFormat\r\n\t * @param  {String} data Base64 data.\r\n\t * @return {String} File format present in the JSON data.\r\n\t */\r\n\tbase64.getFileFormat = function(data) \t{\r\n\t\tvar start = data.indexOf(\"/\") + 1;\r\n\t\tvar end = data.indexOf(\";\");\r\n\t\t\r\n\t\treturn data.substr(start, end - start);\r\n\t};\r\n\r\n\t/**\r\n\t * Create base64 string from arraybuffer.\r\n\t *\r\n\t * @method fromArraybuffer\r\n\t * @param {Arraybuffer} arraybuffer\r\n\t * @return {String} base64\r\n\t */\r\n\tbase64.fromArraybuffer = function(arraybuffer) {\r\n\t\tvar bstr = \"\";\r\n\r\n\t\tvar view = new Uint8Array(arraybuffer);\r\n\t\tvar remainder = view.byteLength % 3;\r\n\t\tvar length = view.byteLength - remainder;\r\n\r\n\t\tvar a, b, c, d;\r\n\t\tvar chunk;\r\n\r\n\t\t//Chunks of 3 bytes for cycle\r\n\t\tfor(var i = 0; i < length; i += 3)\r\n\t\t{\r\n\t\t\tchunk = (view[i] << 16) | (view[i + 1] << 8) | view[i + 2];\r\n\r\n\t\t\ta = (chunk & 16515072) >> 18;\r\n\t\t\tb = (chunk & 258048) >> 12;\r\n\t\t\tc = (chunk & 4032) >> 6;\r\n\t\t\td = chunk & 63;\r\n\r\n\t\t\tbstr += codetab[a] + codetab[b] + codetab[c] + codetab[d]\r\n\t\t}\r\n\r\n\t\t//Remaining bytes\r\n\t\tif(remainder === 1)\r\n\t\t{\r\n\t\t\tchunk = view[length];\r\n\r\n\t\t\ta = (chunk & 252) >> 2;\r\n\t\t\tb = (chunk & 3) << 4;\r\n\r\n\t\t\tbstr += codetab[a] + codetab[b] + \"==\";\r\n\t\t}\r\n\t\telse if(remainder === 2)\r\n\t\t{\r\n\t\t\tchunk = (view[length] << 8) | view[length + 1];\r\n\r\n\t\t\ta = (chunk & 64512) >> 10;\r\n\t\t\tb = (chunk & 1008) >> 4;\r\n\t\t\tc = (chunk & 15) << 2;\r\n\r\n\t\t\tbstr += codetab[a] + codetab[b] + codetab[c] + \"=\";\r\n\t\t}\r\n\r\n\t\treturn bstr;\r\n\t};\r\n\r\n\t/**\r\n\t * Create base64 string from binary string.\r\n\t *\r\n\t * @method fromBinaryString\r\n\t * @param {String} str\r\n\t * @return {String} base64\r\n\t */\r\n\tbase64.fromBinaryString = function(str) {\r\n\t\tvar bstr = \"\";\r\n\t\tvar remainder = str.length % 3;\r\n\t\tvar length = str.length - remainder;\r\n\r\n\t\tvar a, b, c;\r\n\r\n\t\tfor(var i = 0; i < length; i += 3)\r\n\t\t{\r\n\t\t\ta = str.charCodeAt(i) & 0xff;\r\n\t\t\tb = str.charCodeAt(i + 1);\r\n\t\t\tc = str.charCodeAt(i + 2);\r\n\r\n\t\t\tbstr += codetab.charAt(a >> 2);\r\n\t\t\tbstr += codetab.charAt(((a & 0x3) << 4) | ((b & 0xF0) >> 4));\r\n\t\t\tbstr += codetab.charAt(((b & 0xF) << 2) | ((c & 0xC0) >> 6));\r\n\t\t\tbstr += codetab.charAt(c & 0x3F);\r\n\t\t}\r\n\t\t\r\n\t\tif(remainder === 1)\r\n\t\t{\r\n\t\t\ta = str.charCodeAt(i) & 0xff;\r\n\r\n\t\t\tbstr += codetab.charAt(a >> 2);\r\n\t\t\tbstr += codetab.charAt((a & 0x3) << 4);\r\n\t\t\tbstr += \"==\";\r\n\t\t}\r\n\t\telse if(remainder === 2)\r\n\t\t{\r\n\t\t\ta = str.charCodeAt(i) & 0xff;\r\n\t\t\tb = str.charCodeAt(i + 1);\r\n\r\n\t\t\tbstr += codetab.charAt(a >> 2);\r\n\t\t\tbstr += codetab.charAt(((a & 0x3) << 4) | ((b & 0xF0) >> 4));\r\n\t\t\tbstr += codetab.charAt((b & 0xF) << 2);\r\n\t\t\tbstr += \"=\";\r\n\t\t}\r\n\r\n\t\treturn bstr;\r\n\t};\r\n\r\n    return codec.base64 = base64;\r\n});\r\n\ndefine('skylark-security-codec/main',[\r\n    \"./codec\",\r\n    \"./base64\"\r\n], function(codec) {\r\n\r\n\treturn codec;\r\n});\ndefine('skylark-security-codec', ['skylark-security-codec/main'], function (main) { return main; });\n\n"]}