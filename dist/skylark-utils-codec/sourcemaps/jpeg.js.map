{"version":3,"sources":["jpeg.js"],"names":["define","langx","DecodeStream","codec","dctZigZag","Uint8Array","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","buildHuffmanTable","codeLengths","values","i","j","k","code","length","push","children","index","q","p","pop","getBlockBufferOffset","component","row","col","blocksPerLine","decodeScan","data","offset","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","precision","samplesPerLine","scanLines","mcusPerLine","progressive","startOffset","maxH","maxV","bitsData","bitsCount","readBit","nextByte","toString","decodeHuffman","tree","node","receive","n","receiveAndExtend","eobrun","successiveACNextValue","successiveACState","decodeMcu","decode","mcu","mcuCol","v","h","decodeBlock","decodeFn","componentsLength","t","huffmanTableDC","diff","blockData","pred","e","rs","huffmanTableAC","s","r","z","marker","mcuExpected","blocksPerColumn","mcusPerColumn","quantizeAndInverse","blockBufferOffset","v0","v1","v2","v3","v4","v5","v6","v7","p0","p1","p2","p3","p4","p5","p6","p7","qt","quantizationTable","buildComponentData","computationBuffer","Int16Array","blockRow","blockCol","clamp0to255","a","JpegImage","klass","parse","readUint16","value","readDataBlock","array","subarray","prepareComponents","Math","ceil","blocksPerLineForMcu","blocksBufferSize","jfif","adobe","quantizationTables","huffmanTablesAC","huffmanTablesDC","fileMarker","l","appData","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesEnd","quantizationTableSpec","tableData","Uint16Array","extended","componentIds","componentId","componentsCount","qId","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","componentIndex","tableSpec","successiveApproximation","processed","this","width","height","output","scaleX","scaleY","numComponents","_getLinearizedBlockData","componentScaleX","componentScaleY","blocksPerScanline","x","y","dataLength","xScaleBlockOffset","Uint32Array","transform","decodeTransform","_isColorConversionNeeded","_convertYccToRgb","Y","Cb","Cr","_convertYcckToRgb","g","b","_convertYcckToCmyk","_convertCmykToRgb","c","m","min","getData","forceRGBoutput","JpegStream","inherit","klassName","init","bytes","dict","xref","isAdobeImage","colorTransform","get","maxBytesScanned","max","embedMarker","newBytes","set","fixAdobeImage","overrided","ensureBuffer","req","bufferLength","jpegImage","buffer","error","getIR","bytesToString","getChar","isNativelySupported","res","cs","ColorSpace","name","isNativelyDecodable","numComps","jpeg"],"mappings":"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","file":"../jpeg.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-stream/DecodeStream\",\r\n  \"./codec\"\r\n],function(langx,DecodeStream,codec){\r\n  'use strict';\r\n\r\n   //The module code is based from mozilla/pdf.js/\r\n   // original : https://github.com/mozilla/pdf.js/blob/master/src/core/jpeg.js\r\n   // license  : Apache 2\r\n\r\n  var dctZigZag = new Uint8Array([\r\n     0,\r\n     1,  8,\r\n    16,  9,  2,\r\n     3, 10, 17, 24,\r\n    32, 25, 18, 11, 4,\r\n     5, 12, 19, 26, 33, 40,\r\n    48, 41, 34, 27, 20, 13,  6,\r\n     7, 14, 21, 28, 35, 42, 49, 56,\r\n    57, 50, 43, 36, 29, 22, 15,\r\n    23, 30, 37, 44, 51, 58,\r\n    59, 52, 45, 38, 31,\r\n    39, 46, 53, 60,\r\n    61, 54, 47,\r\n    55, 62,\r\n    63\r\n  ]);\r\n\r\n  var dctCos1  =  4017;   // cos(pi/16)\r\n  var dctSin1  =   799;   // sin(pi/16)\r\n  var dctCos3  =  3406;   // cos(3*pi/16)\r\n  var dctSin3  =  2276;   // sin(3*pi/16)\r\n  var dctCos6  =  1567;   // cos(6*pi/16)\r\n  var dctSin6  =  3784;   // sin(6*pi/16)\r\n  var dctSqrt2 =  5793;   // sqrt(2)\r\n  var dctSqrt1d2 = 2896;  // sqrt(2) / 2\r\n\r\n  function buildHuffmanTable(codeLengths, values) {\r\n    var k = 0, code = [], i, j, length = 16;\r\n    while (length > 0 && !codeLengths[length - 1]) {\r\n      length--;\r\n    }\r\n    code.push({children: [], index: 0});\r\n    var p = code[0], q;\r\n    for (i = 0; i < length; i++) {\r\n      for (j = 0; j < codeLengths[i]; j++) {\r\n        p = code.pop();\r\n        p.children[p.index] = values[k];\r\n        while (p.index > 0) {\r\n          p = code.pop();\r\n        }\r\n        p.index++;\r\n        code.push(p);\r\n        while (code.length <= i) {\r\n          code.push(q = {children: [], index: 0});\r\n          p.children[p.index] = q.children;\r\n          p = q;\r\n        }\r\n        k++;\r\n      }\r\n      if (i + 1 < length) {\r\n        // p here points to last code\r\n        code.push(q = {children: [], index: 0});\r\n        p.children[p.index] = q.children;\r\n        p = q;\r\n      }\r\n    }\r\n    return code[0].children;\r\n  }\r\n\r\n  function getBlockBufferOffset(component, row, col) {\r\n    return 64 * ((component.blocksPerLine + 1) * row + col);\r\n  }\r\n\r\n  function decodeScan(data, offset, frame, components, resetInterval,\r\n                      spectralStart, spectralEnd, successivePrev, successive) {\r\n    var precision = frame.precision;\r\n    var samplesPerLine = frame.samplesPerLine;\r\n    var scanLines = frame.scanLines;\r\n    var mcusPerLine = frame.mcusPerLine;\r\n    var progressive = frame.progressive;\r\n    var maxH = frame.maxH, maxV = frame.maxV;\r\n\r\n    var startOffset = offset, bitsData = 0, bitsCount = 0;\r\n\r\n    function readBit() {\r\n      if (bitsCount > 0) {\r\n        bitsCount--;\r\n        return (bitsData >> bitsCount) & 1;\r\n      }\r\n      bitsData = data[offset++];\r\n      if (bitsData === 0xFF) {\r\n        var nextByte = data[offset++];\r\n        if (nextByte) {\r\n          throw 'unexpected marker: ' +\r\n            ((bitsData << 8) | nextByte).toString(16);\r\n        }\r\n        // unstuff 0\r\n      }\r\n      bitsCount = 7;\r\n      return bitsData >>> 7;\r\n    }\r\n\r\n    function decodeHuffman(tree) {\r\n      var node = tree;\r\n      while (true) {\r\n        node = node[readBit()];\r\n        if (typeof node === 'number') {\r\n          return node;\r\n        }\r\n        if (typeof node !== 'object') {\r\n          throw 'invalid huffman sequence';\r\n        }\r\n      }\r\n    }\r\n\r\n    function receive(length) {\r\n      var n = 0;\r\n      while (length > 0) {\r\n        n = (n << 1) | readBit();\r\n        length--;\r\n      }\r\n      return n;\r\n    }\r\n\r\n    function receiveAndExtend(length) {\r\n      if (length === 1) {\r\n        return readBit() === 1 ? 1 : -1;\r\n      }\r\n      var n = receive(length);\r\n      if (n >= 1 << (length - 1)) {\r\n        return n;\r\n      }\r\n      return n + (-1 << length) + 1;\r\n    }\r\n\r\n    function decodeBaseline(component, offset) {\r\n      var t = decodeHuffman(component.huffmanTableDC);\r\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\r\n      component.blockData[offset] = (component.pred += diff);\r\n      var k = 1;\r\n      while (k < 64) {\r\n        var rs = decodeHuffman(component.huffmanTableAC);\r\n        var s = rs & 15, r = rs >> 4;\r\n        if (s === 0) {\r\n          if (r < 15) {\r\n            break;\r\n          }\r\n          k += 16;\r\n          continue;\r\n        }\r\n        k += r;\r\n        var z = dctZigZag[k];\r\n        component.blockData[offset + z] = receiveAndExtend(s);\r\n        k++;\r\n      }\r\n    }\r\n\r\n    function decodeDCFirst(component, offset) {\r\n      var t = decodeHuffman(component.huffmanTableDC);\r\n      var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);\r\n      component.blockData[offset] = (component.pred += diff);\r\n    }\r\n\r\n    function decodeDCSuccessive(component, offset) {\r\n      component.blockData[offset] |= readBit() << successive;\r\n    }\r\n\r\n    var eobrun = 0;\r\n    function decodeACFirst(component, offset) {\r\n      if (eobrun > 0) {\r\n        eobrun--;\r\n        return;\r\n      }\r\n      var k = spectralStart, e = spectralEnd;\r\n      while (k <= e) {\r\n        var rs = decodeHuffman(component.huffmanTableAC);\r\n        var s = rs & 15, r = rs >> 4;\r\n        if (s === 0) {\r\n          if (r < 15) {\r\n            eobrun = receive(r) + (1 << r) - 1;\r\n            break;\r\n          }\r\n          k += 16;\r\n          continue;\r\n        }\r\n        k += r;\r\n        var z = dctZigZag[k];\r\n        component.blockData[offset + z] =\r\n          receiveAndExtend(s) * (1 << successive);\r\n        k++;\r\n      }\r\n    }\r\n\r\n    var successiveACState = 0, successiveACNextValue;\r\n    function decodeACSuccessive(component, offset) {\r\n      var k = spectralStart;\r\n      var e = spectralEnd;\r\n      var r = 0;\r\n      var s;\r\n      var rs;\r\n      while (k <= e) {\r\n        var z = dctZigZag[k];\r\n        switch (successiveACState) {\r\n        case 0: // initial state\r\n          rs = decodeHuffman(component.huffmanTableAC);\r\n          s = rs & 15;\r\n          r = rs >> 4;\r\n          if (s === 0) {\r\n            if (r < 15) {\r\n              eobrun = receive(r) + (1 << r);\r\n              successiveACState = 4;\r\n            } else {\r\n              r = 16;\r\n              successiveACState = 1;\r\n            }\r\n          } else {\r\n            if (s !== 1) {\r\n              throw 'invalid ACn encoding';\r\n            }\r\n            successiveACNextValue = receiveAndExtend(s);\r\n            successiveACState = r ? 2 : 3;\r\n          }\r\n          continue;\r\n        case 1: // skipping r zero items\r\n        case 2:\r\n          if (component.blockData[offset + z]) {\r\n            component.blockData[offset + z] += (readBit() << successive);\r\n          } else {\r\n            r--;\r\n            if (r === 0) {\r\n              successiveACState = successiveACState === 2 ? 3 : 0;\r\n            }\r\n          }\r\n          break;\r\n        case 3: // set value for a zero item\r\n          if (component.blockData[offset + z]) {\r\n            component.blockData[offset + z] += (readBit() << successive);\r\n          } else {\r\n            component.blockData[offset + z] =\r\n              successiveACNextValue << successive;\r\n            successiveACState = 0;\r\n          }\r\n          break;\r\n        case 4: // eob\r\n          if (component.blockData[offset + z]) {\r\n            component.blockData[offset + z] += (readBit() << successive);\r\n          }\r\n          break;\r\n        }\r\n        k++;\r\n      }\r\n      if (successiveACState === 4) {\r\n        eobrun--;\r\n        if (eobrun === 0) {\r\n          successiveACState = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    function decodeMcu(component, decode, mcu, row, col) {\r\n      var mcuRow = (mcu / mcusPerLine) | 0;\r\n      var mcuCol = mcu % mcusPerLine;\r\n      var blockRow = mcuRow * component.v + row;\r\n      var blockCol = mcuCol * component.h + col;\r\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\r\n      decode(component, offset);\r\n    }\r\n\r\n    function decodeBlock(component, decode, mcu) {\r\n      var blockRow = (mcu / component.blocksPerLine) | 0;\r\n      var blockCol = mcu % component.blocksPerLine;\r\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\r\n      decode(component, offset);\r\n    }\r\n\r\n    var componentsLength = components.length;\r\n    var component, i, j, k, n;\r\n    var decodeFn;\r\n    if (progressive) {\r\n      if (spectralStart === 0) {\r\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\r\n      } else {\r\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\r\n      }\r\n    } else {\r\n      decodeFn = decodeBaseline;\r\n    }\r\n\r\n    var mcu = 0, marker;\r\n    var mcuExpected;\r\n    if (componentsLength === 1) {\r\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\r\n    } else {\r\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\r\n    }\r\n    if (!resetInterval) {\r\n      resetInterval = mcuExpected;\r\n    }\r\n\r\n    var h, v;\r\n    while (mcu < mcuExpected) {\r\n      // reset interval stuff\r\n      for (i = 0; i < componentsLength; i++) {\r\n        components[i].pred = 0;\r\n      }\r\n      eobrun = 0;\r\n\r\n      if (componentsLength === 1) {\r\n        component = components[0];\r\n        for (n = 0; n < resetInterval; n++) {\r\n          decodeBlock(component, decodeFn, mcu);\r\n          mcu++;\r\n        }\r\n      } else {\r\n        for (n = 0; n < resetInterval; n++) {\r\n          for (i = 0; i < componentsLength; i++) {\r\n            component = components[i];\r\n            h = component.h;\r\n            v = component.v;\r\n            for (j = 0; j < v; j++) {\r\n              for (k = 0; k < h; k++) {\r\n                decodeMcu(component, decodeFn, mcu, j, k);\r\n              }\r\n            }\r\n          }\r\n          mcu++;\r\n        }\r\n      }\r\n\r\n      // find marker\r\n      bitsCount = 0;\r\n      marker = (data[offset] << 8) | data[offset + 1];\r\n      if (marker <= 0xFF00) {\r\n        throw 'marker was not found';\r\n      }\r\n\r\n      if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx\r\n        offset += 2;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return offset - startOffset;\r\n  }\r\n\r\n  // A port of poppler's IDCT method which in turn is taken from:\r\n  //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\r\n  //   'Practical Fast 1-D DCT Algorithms with 11 Multiplications',\r\n  //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\r\n  //   988-991.\r\n  function quantizeAndInverse(component, blockBufferOffset, p) {\r\n    var qt = component.quantizationTable, blockData = component.blockData;\r\n    var v0, v1, v2, v3, v4, v5, v6, v7;\r\n    var p0, p1, p2, p3, p4, p5, p6, p7;\r\n    var t;\r\n\r\n    // inverse DCT on rows\r\n    for (var row = 0; row < 64; row += 8) {\r\n      // gather block data\r\n      p0 = blockData[blockBufferOffset + row];\r\n      p1 = blockData[blockBufferOffset + row + 1];\r\n      p2 = blockData[blockBufferOffset + row + 2];\r\n      p3 = blockData[blockBufferOffset + row + 3];\r\n      p4 = blockData[blockBufferOffset + row + 4];\r\n      p5 = blockData[blockBufferOffset + row + 5];\r\n      p6 = blockData[blockBufferOffset + row + 6];\r\n      p7 = blockData[blockBufferOffset + row + 7];\r\n\r\n      // dequant p0\r\n      p0 *= qt[row];\r\n\r\n      // check for all-zero AC coefficients\r\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\r\n        t = (dctSqrt2 * p0 + 512) >> 10;\r\n        p[row] = t;\r\n        p[row + 1] = t;\r\n        p[row + 2] = t;\r\n        p[row + 3] = t;\r\n        p[row + 4] = t;\r\n        p[row + 5] = t;\r\n        p[row + 6] = t;\r\n        p[row + 7] = t;\r\n        continue;\r\n      }\r\n      // dequant p1 ... p7\r\n      p1 *= qt[row + 1];\r\n      p2 *= qt[row + 2];\r\n      p3 *= qt[row + 3];\r\n      p4 *= qt[row + 4];\r\n      p5 *= qt[row + 5];\r\n      p6 *= qt[row + 6];\r\n      p7 *= qt[row + 7];\r\n\r\n      // stage 4\r\n      v0 = (dctSqrt2 * p0 + 128) >> 8;\r\n      v1 = (dctSqrt2 * p4 + 128) >> 8;\r\n      v2 = p2;\r\n      v3 = p6;\r\n      v4 = (dctSqrt1d2 * (p1 - p7) + 128) >> 8;\r\n      v7 = (dctSqrt1d2 * (p1 + p7) + 128) >> 8;\r\n      v5 = p3 << 4;\r\n      v6 = p5 << 4;\r\n\r\n      // stage 3\r\n      v0 = (v0 + v1 + 1) >> 1;\r\n      v1 = v0 - v1;\r\n      t  = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\r\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\r\n      v3 = t;\r\n      v4 = (v4 + v6 + 1) >> 1;\r\n      v6 = v4 - v6;\r\n      v7 = (v7 + v5 + 1) >> 1;\r\n      v5 = v7 - v5;\r\n\r\n      // stage 2\r\n      v0 = (v0 + v3 + 1) >> 1;\r\n      v3 = v0 - v3;\r\n      v1 = (v1 + v2 + 1) >> 1;\r\n      v2 = v1 - v2;\r\n      t  = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\r\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\r\n      v7 = t;\r\n      t  = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\r\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\r\n      v6 = t;\r\n\r\n      // stage 1\r\n      p[row] = v0 + v7;\r\n      p[row + 7] = v0 - v7;\r\n      p[row + 1] = v1 + v6;\r\n      p[row + 6] = v1 - v6;\r\n      p[row + 2] = v2 + v5;\r\n      p[row + 5] = v2 - v5;\r\n      p[row + 3] = v3 + v4;\r\n      p[row + 4] = v3 - v4;\r\n    }\r\n\r\n    // inverse DCT on columns\r\n    for (var col = 0; col < 8; ++col) {\r\n      p0 = p[col];\r\n      p1 = p[col +  8];\r\n      p2 = p[col + 16];\r\n      p3 = p[col + 24];\r\n      p4 = p[col + 32];\r\n      p5 = p[col + 40];\r\n      p6 = p[col + 48];\r\n      p7 = p[col + 56];\r\n\r\n      // check for all-zero AC coefficients\r\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\r\n        t = (dctSqrt2 * p0 + 8192) >> 14;\r\n        // convert to 8 bit\r\n        t = (t < -2040) ? 0 : (t >= 2024) ? 255 : (t + 2056) >> 4;\r\n        blockData[blockBufferOffset + col] = t;\r\n        blockData[blockBufferOffset + col +  8] = t;\r\n        blockData[blockBufferOffset + col + 16] = t;\r\n        blockData[blockBufferOffset + col + 24] = t;\r\n        blockData[blockBufferOffset + col + 32] = t;\r\n        blockData[blockBufferOffset + col + 40] = t;\r\n        blockData[blockBufferOffset + col + 48] = t;\r\n        blockData[blockBufferOffset + col + 56] = t;\r\n        continue;\r\n      }\r\n\r\n      // stage 4\r\n      v0 = (dctSqrt2 * p0 + 2048) >> 12;\r\n      v1 = (dctSqrt2 * p4 + 2048) >> 12;\r\n      v2 = p2;\r\n      v3 = p6;\r\n      v4 = (dctSqrt1d2 * (p1 - p7) + 2048) >> 12;\r\n      v7 = (dctSqrt1d2 * (p1 + p7) + 2048) >> 12;\r\n      v5 = p3;\r\n      v6 = p5;\r\n\r\n      // stage 3\r\n      // Shift v0 by 128.5 << 5 here, so we don't need to shift p0...p7 when\r\n      // converting to UInt8 range later.\r\n      v0 = ((v0 + v1 + 1) >> 1) + 4112;\r\n      v1 = v0 - v1;\r\n      t  = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\r\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\r\n      v3 = t;\r\n      v4 = (v4 + v6 + 1) >> 1;\r\n      v6 = v4 - v6;\r\n      v7 = (v7 + v5 + 1) >> 1;\r\n      v5 = v7 - v5;\r\n\r\n      // stage 2\r\n      v0 = (v0 + v3 + 1) >> 1;\r\n      v3 = v0 - v3;\r\n      v1 = (v1 + v2 + 1) >> 1;\r\n      v2 = v1 - v2;\r\n      t  = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\r\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\r\n      v7 = t;\r\n      t  = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\r\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\r\n      v6 = t;\r\n\r\n      // stage 1\r\n      p0 = v0 + v7;\r\n      p7 = v0 - v7;\r\n      p1 = v1 + v6;\r\n      p6 = v1 - v6;\r\n      p2 = v2 + v5;\r\n      p5 = v2 - v5;\r\n      p3 = v3 + v4;\r\n      p4 = v3 - v4;\r\n\r\n      // convert to 8-bit integers\r\n      p0 = (p0 < 16) ? 0 : (p0 >= 4080) ? 255 : p0 >> 4;\r\n      p1 = (p1 < 16) ? 0 : (p1 >= 4080) ? 255 : p1 >> 4;\r\n      p2 = (p2 < 16) ? 0 : (p2 >= 4080) ? 255 : p2 >> 4;\r\n      p3 = (p3 < 16) ? 0 : (p3 >= 4080) ? 255 : p3 >> 4;\r\n      p4 = (p4 < 16) ? 0 : (p4 >= 4080) ? 255 : p4 >> 4;\r\n      p5 = (p5 < 16) ? 0 : (p5 >= 4080) ? 255 : p5 >> 4;\r\n      p6 = (p6 < 16) ? 0 : (p6 >= 4080) ? 255 : p6 >> 4;\r\n      p7 = (p7 < 16) ? 0 : (p7 >= 4080) ? 255 : p7 >> 4;\r\n\r\n      // store block data\r\n      blockData[blockBufferOffset + col] = p0;\r\n      blockData[blockBufferOffset + col +  8] = p1;\r\n      blockData[blockBufferOffset + col + 16] = p2;\r\n      blockData[blockBufferOffset + col + 24] = p3;\r\n      blockData[blockBufferOffset + col + 32] = p4;\r\n      blockData[blockBufferOffset + col + 40] = p5;\r\n      blockData[blockBufferOffset + col + 48] = p6;\r\n      blockData[blockBufferOffset + col + 56] = p7;\r\n    }\r\n  }\r\n\r\n  function buildComponentData(frame, component) {\r\n    var blocksPerLine = component.blocksPerLine;\r\n    var blocksPerColumn = component.blocksPerColumn;\r\n    var computationBuffer = new Int16Array(64);\r\n\r\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\r\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\r\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\r\n        quantizeAndInverse(component, offset, computationBuffer);\r\n      }\r\n    }\r\n    return component.blockData;\r\n  }\r\n\r\n  function clamp0to255(a) {\r\n    return a <= 0 ? 0 : a >= 255 ? 255 : a;\r\n  }\r\n\r\n\r\n  var JpegImage = langx.klass({\r\n    parse: function parse(data) {\r\n\r\n      function readUint16() {\r\n        var value = (data[offset] << 8) | data[offset + 1];\r\n        offset += 2;\r\n        return value;\r\n      }\r\n\r\n      function readDataBlock() {\r\n        var length = readUint16();\r\n        var array = data.subarray(offset, offset + length - 2);\r\n        offset += array.length;\r\n        return array;\r\n      }\r\n\r\n      function prepareComponents(frame) {\r\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\r\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\r\n        for (var i = 0; i < frame.components.length; i++) {\r\n          component = frame.components[i];\r\n          var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) *\r\n                                        component.h / frame.maxH);\r\n          var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines  / 8) *\r\n                                          component.v / frame.maxV);\r\n          var blocksPerLineForMcu = mcusPerLine * component.h;\r\n          var blocksPerColumnForMcu = mcusPerColumn * component.v;\r\n\r\n          var blocksBufferSize = 64 * blocksPerColumnForMcu *\r\n                                      (blocksPerLineForMcu + 1);\r\n          component.blockData = new Int16Array(blocksBufferSize);\r\n          component.blocksPerLine = blocksPerLine;\r\n          component.blocksPerColumn = blocksPerColumn;\r\n        }\r\n        frame.mcusPerLine = mcusPerLine;\r\n        frame.mcusPerColumn = mcusPerColumn;\r\n      }\r\n\r\n      var offset = 0, length = data.length;\r\n      var jfif = null;\r\n      var adobe = null;\r\n      var pixels = null;\r\n      var frame, resetInterval;\r\n      var quantizationTables = [];\r\n      var huffmanTablesAC = [], huffmanTablesDC = [];\r\n      var fileMarker = readUint16();\r\n      if (fileMarker !== 0xFFD8) { // SOI (Start of Image)\r\n        throw 'SOI not found';\r\n      }\r\n\r\n      fileMarker = readUint16();\r\n      while (fileMarker !== 0xFFD9) { // EOI (End of image)\r\n        var i, j, l;\r\n        switch(fileMarker) {\r\n          case 0xFFE0: // APP0 (Application Specific)\r\n          case 0xFFE1: // APP1\r\n          case 0xFFE2: // APP2\r\n          case 0xFFE3: // APP3\r\n          case 0xFFE4: // APP4\r\n          case 0xFFE5: // APP5\r\n          case 0xFFE6: // APP6\r\n          case 0xFFE7: // APP7\r\n          case 0xFFE8: // APP8\r\n          case 0xFFE9: // APP9\r\n          case 0xFFEA: // APP10\r\n          case 0xFFEB: // APP11\r\n          case 0xFFEC: // APP12\r\n          case 0xFFED: // APP13\r\n          case 0xFFEE: // APP14\r\n          case 0xFFEF: // APP15\r\n          case 0xFFFE: // COM (Comment)\r\n            var appData = readDataBlock();\r\n\r\n            if (fileMarker === 0xFFE0) {\r\n              if (appData[0] === 0x4A && appData[1] === 0x46 &&\r\n                  appData[2] === 0x49 && appData[3] === 0x46 &&\r\n                  appData[4] === 0) { // 'JFIF\\x00'\r\n                jfif = {\r\n                  version: { major: appData[5], minor: appData[6] },\r\n                  densityUnits: appData[7],\r\n                  xDensity: (appData[8] << 8) | appData[9],\r\n                  yDensity: (appData[10] << 8) | appData[11],\r\n                  thumbWidth: appData[12],\r\n                  thumbHeight: appData[13],\r\n                  thumbData: appData.subarray(14, 14 +\r\n                                              3 * appData[12] * appData[13])\r\n                };\r\n              }\r\n            }\r\n            // TODO APP1 - Exif\r\n            if (fileMarker === 0xFFEE) {\r\n              if (appData[0] === 0x41 && appData[1] === 0x64 &&\r\n                  appData[2] === 0x6F && appData[3] === 0x62 &&\r\n                  appData[4] === 0x65) { // 'Adobe'\r\n                adobe = {\r\n                  version: (appData[5] << 8) | appData[6],\r\n                  flags0: (appData[7] << 8) | appData[8],\r\n                  flags1: (appData[9] << 8) | appData[10],\r\n                  transformCode: appData[11]\r\n                };\r\n              }\r\n            }\r\n            break;\r\n\r\n          case 0xFFDB: // DQT (Define Quantization Tables)\r\n            var quantizationTablesLength = readUint16();\r\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\r\n            var z;\r\n            while (offset < quantizationTablesEnd) {\r\n              var quantizationTableSpec = data[offset++];\r\n              var tableData = new Uint16Array(64);\r\n              if ((quantizationTableSpec >> 4) === 0) { // 8 bit values\r\n                for (j = 0; j < 64; j++) {\r\n                  z = dctZigZag[j];\r\n                  tableData[z] = data[offset++];\r\n                }\r\n              } else if ((quantizationTableSpec >> 4) === 1) { //16 bit\r\n                for (j = 0; j < 64; j++) {\r\n                  z = dctZigZag[j];\r\n                  tableData[z] = readUint16();\r\n                }\r\n              } else {\r\n                throw 'DQT: invalid table spec';\r\n              }\r\n              quantizationTables[quantizationTableSpec & 15] = tableData;\r\n            }\r\n            break;\r\n\r\n          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)\r\n          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)\r\n          case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)\r\n            if (frame) {\r\n              throw 'Only single frame JPEGs supported';\r\n            }\r\n            readUint16(); // skip data length\r\n            frame = {};\r\n            frame.extended = (fileMarker === 0xFFC1);\r\n            frame.progressive = (fileMarker === 0xFFC2);\r\n            frame.precision = data[offset++];\r\n            frame.scanLines = readUint16();\r\n            frame.samplesPerLine = readUint16();\r\n            frame.components = [];\r\n            frame.componentIds = {};\r\n            var componentsCount = data[offset++], componentId;\r\n            var maxH = 0, maxV = 0;\r\n            for (i = 0; i < componentsCount; i++) {\r\n              componentId = data[offset];\r\n              var h = data[offset + 1] >> 4;\r\n              var v = data[offset + 1] & 15;\r\n              if (maxH < h) {\r\n                maxH = h;\r\n              }\r\n              if (maxV < v) {\r\n                maxV = v;\r\n              }\r\n              var qId = data[offset + 2];\r\n              l = frame.components.push({\r\n                h: h,\r\n                v: v,\r\n                quantizationTable: quantizationTables[qId]\r\n              });\r\n              frame.componentIds[componentId] = l - 1;\r\n              offset += 3;\r\n            }\r\n            frame.maxH = maxH;\r\n            frame.maxV = maxV;\r\n            prepareComponents(frame);\r\n            break;\r\n\r\n          case 0xFFC4: // DHT (Define Huffman Tables)\r\n            var huffmanLength = readUint16();\r\n            for (i = 2; i < huffmanLength;) {\r\n              var huffmanTableSpec = data[offset++];\r\n              var codeLengths = new Uint8Array(16);\r\n              var codeLengthSum = 0;\r\n              for (j = 0; j < 16; j++, offset++) {\r\n                codeLengthSum += (codeLengths[j] = data[offset]);\r\n              }\r\n              var huffmanValues = new Uint8Array(codeLengthSum);\r\n              for (j = 0; j < codeLengthSum; j++, offset++) {\r\n                huffmanValues[j] = data[offset];\r\n              }\r\n              i += 17 + codeLengthSum;\r\n\r\n              ((huffmanTableSpec >> 4) === 0 ?\r\n                huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =\r\n                buildHuffmanTable(codeLengths, huffmanValues);\r\n            }\r\n            break;\r\n\r\n          case 0xFFDD: // DRI (Define Restart Interval)\r\n            readUint16(); // skip data length\r\n            resetInterval = readUint16();\r\n            break;\r\n\r\n          case 0xFFDA: // SOS (Start of Scan)\r\n            var scanLength = readUint16();\r\n            var selectorsCount = data[offset++];\r\n            var components = [], component;\r\n            for (i = 0; i < selectorsCount; i++) {\r\n              var componentIndex = frame.componentIds[data[offset++]];\r\n              component = frame.components[componentIndex];\r\n              var tableSpec = data[offset++];\r\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\r\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\r\n              components.push(component);\r\n            }\r\n            var spectralStart = data[offset++];\r\n            var spectralEnd = data[offset++];\r\n            var successiveApproximation = data[offset++];\r\n            var processed = decodeScan(data, offset,\r\n              frame, components, resetInterval,\r\n              spectralStart, spectralEnd,\r\n              successiveApproximation >> 4, successiveApproximation & 15);\r\n            offset += processed;\r\n            break;\r\n\r\n          case 0xFFFF: // Fill bytes\r\n            if (data[offset] !== 0xFF) { // Avoid skipping a valid marker.\r\n              offset--;\r\n            }\r\n            break;\r\n\r\n          default:\r\n            if (data[offset - 3] === 0xFF &&\r\n                data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\r\n              // could be incorrect encoding -- last 0xFF byte of the previous\r\n              // block was eaten by the encoder\r\n              offset -= 3;\r\n              break;\r\n            }\r\n            throw 'unknown JPEG marker ' + fileMarker.toString(16);\r\n        }\r\n        fileMarker = readUint16();\r\n      }\r\n\r\n      this.width = frame.samplesPerLine;\r\n      this.height = frame.scanLines;\r\n      this.jfif = jfif;\r\n      this.adobe = adobe;\r\n      this.components = [];\r\n      for (i = 0; i < frame.components.length; i++) {\r\n        component = frame.components[i];\r\n        this.components.push({\r\n          output: buildComponentData(frame, component),\r\n          scaleX: component.h / frame.maxH,\r\n          scaleY: component.v / frame.maxV,\r\n          blocksPerLine: component.blocksPerLine,\r\n          blocksPerColumn: component.blocksPerColumn\r\n        });\r\n      }\r\n      this.numComponents = this.components.length;\r\n    },\r\n\r\n    _getLinearizedBlockData: function getLinearizedBlockData(width, height) {\r\n      var scaleX = this.width / width, scaleY = this.height / height;\r\n\r\n      var component, componentScaleX, componentScaleY, blocksPerScanline;\r\n      var x, y, i, j, k;\r\n      var index;\r\n      var offset = 0;\r\n      var output;\r\n      var numComponents = this.components.length;\r\n      var dataLength = width * height * numComponents;\r\n      var data = new Uint8Array(dataLength);\r\n      var xScaleBlockOffset = new Uint32Array(width);\r\n      var mask3LSB = 0xfffffff8; // used to clear the 3 LSBs\r\n\r\n      for (i = 0; i < numComponents; i++) {\r\n        component = this.components[i];\r\n        componentScaleX = component.scaleX * scaleX;\r\n        componentScaleY = component.scaleY * scaleY;\r\n        offset = i;\r\n        output = component.output;\r\n        blocksPerScanline = (component.blocksPerLine + 1) << 3;\r\n        // precalculate the xScaleBlockOffset\r\n        for (x = 0; x < width; x++) {\r\n          j = 0 | (x * componentScaleX);\r\n          xScaleBlockOffset[x] = ((j & mask3LSB) << 3) | (j & 7);\r\n        }\r\n        // linearize the blocks of the component\r\n        for (y = 0; y < height; y++) {\r\n          j = 0 | (y * componentScaleY);\r\n          index = blocksPerScanline * (j & mask3LSB) | ((j & 7) << 3);\r\n          for (x = 0; x < width; x++) {\r\n            data[offset] = output[index + xScaleBlockOffset[x]];\r\n            offset += numComponents;\r\n          }\r\n        }\r\n      }\r\n\r\n      // decodeTransform contains pairs of multiplier (-256..256) and additive\r\n      var transform = this.decodeTransform;\r\n      if (transform) {\r\n        for (i = 0; i < dataLength;) {\r\n          for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\r\n            data[i] = ((data[i] * transform[k]) >> 8) + transform[k + 1];\r\n          }\r\n        }\r\n      }\r\n      return data;\r\n    },\r\n\r\n    _isColorConversionNeeded: function isColorConversionNeeded() {\r\n      if (this.adobe && this.adobe.transformCode) {\r\n        // The adobe transform marker overrides any previous setting\r\n        return true;\r\n      } else if (this.numComponents === 3) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    _convertYccToRgb: function convertYccToRgb(data) {\r\n      var Y, Cb, Cr;\r\n      for (var i = 0, length = data.length; i < length; i += 3) {\r\n        Y  = data[i    ];\r\n        Cb = data[i + 1];\r\n        Cr = data[i + 2];\r\n        data[i    ] = clamp0to255(Y - 179.456 + 1.402 * Cr);\r\n        data[i + 1] = clamp0to255(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);\r\n        data[i + 2] = clamp0to255(Y - 226.816 + 1.772 * Cb);\r\n      }\r\n      return data;\r\n    },\r\n\r\n    _convertYcckToRgb: function convertYcckToRgb(data) {\r\n      var Y, Cb, Cr, k;\r\n      var offset = 0;\r\n      for (var i = 0, length = data.length; i < length; i += 4) {\r\n        Y  = data[i];\r\n        Cb = data[i + 1];\r\n        Cr = data[i + 2];\r\n        k = data[i + 3];\r\n\r\n        var r = -122.67195406894 +\r\n          Cb * (-6.60635669420364e-5 * Cb + 0.000437130475926232 * Cr -\r\n                5.4080610064599e-5 * Y + 0.00048449797120281 * k -\r\n                0.154362151871126) +\r\n          Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y -\r\n                0.00477271405408747 * k + 1.53380253221734) +\r\n          Y * (0.000961250184130688 * Y - 0.00266257332283933 * k +\r\n               0.48357088451265) +\r\n          k * (-0.000336197177618394 * k + 0.484791561490776);\r\n\r\n        var g = 107.268039397724 +\r\n          Cb * (2.19927104525741e-5 * Cb - 0.000640992018297945 * Cr +\r\n                0.000659397001245577 * Y + 0.000426105652938837 * k -\r\n                0.176491792462875) +\r\n          Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y +\r\n                0.000770482631801132 * k - 0.151051492775562) +\r\n          Y * (0.00126935368114843 * Y - 0.00265090189010898 * k +\r\n               0.25802910206845) +\r\n          k * (-0.000318913117588328 * k - 0.213742400323665);\r\n\r\n        var b = -20.810012546947 +\r\n          Cb * (-0.000570115196973677 * Cb - 2.63409051004589e-5 * Cr +\r\n                0.0020741088115012 * Y - 0.00288260236853442 * k +\r\n                0.814272968359295) +\r\n          Cr * (-1.53496057440975e-5 * Cr - 0.000132689043961446 * Y +\r\n                0.000560833691242812 * k - 0.195152027534049) +\r\n          Y * (0.00174418132927582 * Y - 0.00255243321439347 * k +\r\n               0.116935020465145) +\r\n          k * (-0.000343531996510555 * k + 0.24165260232407);\r\n\r\n        data[offset++] = clamp0to255(r);\r\n        data[offset++] = clamp0to255(g);\r\n        data[offset++] = clamp0to255(b);\r\n      }\r\n      return data;\r\n    },\r\n\r\n    _convertYcckToCmyk: function convertYcckToCmyk(data) {\r\n      var Y, Cb, Cr;\r\n      for (var i = 0, length = data.length; i < length; i += 4) {\r\n        Y  = data[i];\r\n        Cb = data[i + 1];\r\n        Cr = data[i + 2];\r\n        data[i    ] = clamp0to255(434.456 - Y - 1.402 * Cr);\r\n        data[i + 1] = clamp0to255(119.541 - Y + 0.344 * Cb + 0.714 * Cr);\r\n        data[i + 2] = clamp0to255(481.816 - Y - 1.772 * Cb);\r\n        // K in data[i + 3] is unchanged\r\n      }\r\n      return data;\r\n    },\r\n\r\n    _convertCmykToRgb: function convertCmykToRgb(data) {\r\n      var c, m, y, k;\r\n      var offset = 0;\r\n      var min = -255 * 255 * 255;\r\n      var scale = 1 / 255 / 255;\r\n      for (var i = 0, length = data.length; i < length; i += 4) {\r\n        c = data[i];\r\n        m = data[i + 1];\r\n        y = data[i + 2];\r\n        k = data[i + 3];\r\n\r\n        var r =\r\n          c * (-4.387332384609988 * c + 54.48615194189176 * m +\r\n               18.82290502165302 * y + 212.25662451639585 * k -\r\n               72734.4411664936) +\r\n          m * (1.7149763477362134 * m - 5.6096736904047315 * y -\r\n               17.873870861415444 * k - 1401.7366389350734) +\r\n          y * (-2.5217340131683033 * y - 21.248923337353073 * k +\r\n               4465.541406466231) -\r\n          k * (21.86122147463605 * k + 48317.86113160301);\r\n        var g =\r\n          c * (8.841041422036149 * c + 60.118027045597366 * m +\r\n               6.871425592049007 * y + 31.159100130055922 * k -\r\n               20220.756542821975) +\r\n          m * (-15.310361306967817 * m + 17.575251261109482 * y +\r\n               131.35250912493976 * k - 48691.05921601825) +\r\n          y * (4.444339102852739 * y + 9.8632861493405 * k -\r\n               6341.191035517494) -\r\n          k * (20.737325471181034 * k + 47890.15695978492);\r\n        var b =\r\n          c * (0.8842522430003296 * c + 8.078677503112928 * m +\r\n               30.89978309703729 * y - 0.23883238689178934 * k -\r\n               3616.812083916688) +\r\n          m * (10.49593273432072 * m + 63.02378494754052 * y +\r\n               50.606957656360734 * k - 28620.90484698408) +\r\n          y * (0.03296041114873217 * y + 115.60384449646641 * k -\r\n               49363.43385999684) -\r\n          k * (22.33816807309886 * k + 45932.16563550634);\r\n\r\n        data[offset++] = r >= 0 ? 255 : r <= min ? 0 : 255 + r * scale | 0;\r\n        data[offset++] = g >= 0 ? 255 : g <= min ? 0 : 255 + g * scale | 0;\r\n        data[offset++] = b >= 0 ? 255 : b <= min ? 0 : 255 + b * scale | 0;\r\n      }\r\n      return data;\r\n    },\r\n\r\n    getData: function getData(width, height, forceRGBoutput) {\r\n      if (this.numComponents > 4) {\r\n        throw 'Unsupported color mode';\r\n      }\r\n      // type of data: Uint8Array(width * height * numComponents)\r\n      var data = this._getLinearizedBlockData(width, height);\r\n\r\n      if (this.numComponents === 3) {\r\n        return this._convertYccToRgb(data);\r\n      } else if (this.numComponents === 4) {\r\n        if (this._isColorConversionNeeded()) {\r\n          if (forceRGBoutput) {\r\n            return this._convertYcckToRgb(data);\r\n          } else {\r\n            return this._convertYcckToCmyk(data);\r\n          }\r\n        } else if (forceRGBoutput) {\r\n          return this._convertCmykToRgb(data);\r\n        }\r\n      }\r\n      return data;\r\n    }\r\n  });\r\n\r\n  function isAdobeImage(bytes) {\r\n      var maxBytesScanned = Math.max(bytes.length - 16, 1024);\r\n      // Looking for APP14, 'Adobe'\r\n      for (var i = 0; i < maxBytesScanned; ++i) {\r\n          if (bytes[i] == 0xFF && bytes[i + 1] == 0xEE &&\r\n              bytes[i + 2] == 0x00 && bytes[i + 3] == 0x0E &&\r\n              bytes[i + 4] == 0x41 && bytes[i + 5] == 0x64 &&\r\n              bytes[i + 6] == 0x6F && bytes[i + 7] == 0x62 &&\r\n              bytes[i + 8] == 0x65 && bytes[i + 9] == 0x00)\r\n              return true;\r\n          // scanning until frame tag\r\n          if (bytes[i] == 0xFF && bytes[i + 1] == 0xC0)\r\n              break;\r\n      }\r\n      return false;\r\n  }\r\n\r\n  function fixAdobeImage(bytes) {\r\n      // Inserting 'EMBED' marker after JPEG signature\r\n      var embedMarker = new Uint8Array([0xFF, 0xEC, 0, 8, 0x45, 0x4D, 0x42, 0x45,\r\n          0x44, 0\r\n      ]);\r\n      var newBytes = new Uint8Array(bytes.length + embedMarker.length);\r\n      newBytes.set(bytes, embedMarker.length);\r\n      // copy JPEG header\r\n      newBytes[0] = bytes[0];\r\n      newBytes[1] = bytes[1];\r\n      newBytes.set(embedMarker, 2);\r\n      return newBytes;\r\n  }\r\n\r\n  var JpegStream = DecodeStream.inherit({\r\n      klassName : \"JpegStream\",\r\n\r\n      init : function(bytes, dict, xref) {\r\n        // TODO: per poppler, some images may have 'junk' before that\r\n        // need to be removed\r\n        this.dict = dict;\r\n\r\n        this.isAdobeImage = false;\r\n        this.colorTransform = dict.get('ColorTransform') || -1;\r\n\r\n        if (isAdobeImage(bytes)) {\r\n            this.isAdobeImage = true;\r\n            bytes = fixAdobeImage(bytes);\r\n        }\r\n\r\n        this.bytes = bytes;\r\n\r\n          this.overrided();          \r\n      },\r\n\r\n      ensureBuffer : function(req) {\r\n          if (this.bufferLength)\r\n              return;\r\n          try {\r\n              var jpegImage = new JpegImage();\r\n              if (this.colorTransform != -1)\r\n                  jpegImage.colorTransform = this.colorTransform;\r\n              jpegImage.parse(this.bytes);\r\n              var width = jpegImage.width;\r\n              var height = jpegImage.height;\r\n              var data = jpegImage.getData(width, height);\r\n              this.buffer = data;\r\n              this.bufferLength = data.length;\r\n          } catch (e) {\r\n              error('JPEG error: ' + e);\r\n          }\r\n      },\r\n\r\n      getIR : function () {\r\n          return bytesToString(this.bytes);\r\n      },\r\n\r\n      getChar : function () {\r\n          error('internal error: getChar is not valid on JpegStream');\r\n      },\r\n\r\n      /**\r\n       * Checks if the image can be decoded and displayed by the browser without any\r\n       * further processing such as color space conversions.\r\n       */\r\n      isNativelySupported : function(xref, res) {\r\n              var cs = ColorSpace.parse(this.dict.get('ColorSpace', 'CS'), xref, res);\r\n              // when bug 674619 lands, let's check if browser can do\r\n              // normal cmyk and then we won't need to decode in JS\r\n              if (cs.name === 'DeviceGray' || cs.name === 'DeviceRGB')\r\n                  return true;\r\n              if (cs.name === 'DeviceCMYK' && !this.isAdobeImage &&\r\n                  this.colorTransform < 1)\r\n                  return true;\r\n              return false;\r\n      },\r\n\r\n      /**\r\n       * Checks if the image can be decoded by the browser.\r\n       */\r\n      isNativelyDecodable : function(xref, res) {\r\n              var cs = ColorSpace.parse(this.dict.get('ColorSpace', 'CS'), xref, res);\r\n              var numComps = cs.numComps;\r\n              if (numComps == 1 || numComps == 3)\r\n                  return true;\r\n\r\n              return false;\r\n      }\r\n\r\n  });\r\n\r\n\r\n  return codec.jpeg = {\r\n    \"JpegImage\" :JpegImage,\r\n    \"JpegStream\" : JpegStream\r\n  };\r\n\r\n});"]}