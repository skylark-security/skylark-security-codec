{"version":3,"sources":["jbig2.js"],"names":["define","langx","DecodeStream","codec","QeTable","qe","nmps","nlps","switchFlag","ArithmeticDecoder","klass","klassName","byteIn","data","this","bp","clow","ct","dataEnd","chigh","readBit","contexts","pos","d","cx_index","cx_mps","qeTableIcx","qeIcx","nmpsIcx","nlpsIcx","switchIcx","a","init","start","end","ContextCache","getContexts","id","Int8Array","DecodingContext","decoder","get","shadow","contextCache","cache","decodeInteger","procedure","s","prev","state","v","toRead","offset","bit","decodeIAID","codeLength","i","Math","pow","SegmentTypes","CodingTemplates","x","y","RefinementTemplates","coding","reference","ReusedContexts","RefinementReusedContexts","log2","n","readInt32","readUint32","value","readUint16","readInt8","decodeBitmap","mmr","width","height","templateIndex","prediction","skip","at","decodingContext","error","useskip","template","concat","templateLength","length","templateX","Int32Array","templateY","k","pseudoPixelContext","bitmap","ltp","push","row","Uint8Array","j","contextLabel","i0","j0","pixel","decodeRefinement","referenceBitmap","offsetX","offsetY","codingTemplate","codingTemplateLength","codingTemplateX","codingTemplateY","referenceTemplate","referenceTemplateLength","referenceTemplateX","referenceTemplateY","referenceWidth","referenceHeight","readSegmentHeader","segmentHeader","number","flags","segmentType","type","typeName","deferredNonRetain","pageAssociationFieldSize","referredFlags","referredToCount","retainBits","position","bytes","referredToSegmentNumberSize","referredTo","pageAssociation","genericRegionInfo","readRegionSegmentInformation","genericRegionMmr","RegionSegmentInformationFieldLength","searchPattern","ii","headerEnd","readSegments","header","segments","segment","randomAccess","combinationOperator","processSegment","visitor","args","dictionary","dictionaryFlags","huffman","refinement","huffmanDHSelector","huffmanDWSelector","bitmapSizeSelector","aggregationInstancesSelector","bitmapCodingContextUsed","bitmapCodingContextRetained","refinementTemplate","atLength","refinementAt","numberOfExportedSymbols","numberOfNewSymbols","textRegion","info","textRegionSegmentFlags","stripSize","referenceCorner","transposed","defaultPixelValue","dsOffset","textRegionHuffmanFlags","huffmanFS","huffmanDS","huffmanDT","huffmanRefinementDW","huffmanRefinementDH","huffmanRefinementDX","huffmanRefinementDY","huffmanRefinementSizeSelector","numberOfSymbolInstances","genericRegion","genericRegionSegmentFlags","pageInfo","resolutionX","resolutionY","pageSegmentFlags","lossless","requiresBuffer","combinationOperatorOverride","callbackName","apply","processSegments","SimpleSegmentVisitor","onPageInformation","currentPageInfo","rowSize","buffer","fill","drawBitmap","regionInfo","mask","onImmediateGenericRegion","region","onImmediateLosslessGenericRegion","arguments","onSymbolDictionary","currentSegment","referredSegments","symbols","inputSymbols","huffmanTables","refinementTemplateIndex","newSymbols","currentHeight","symbolCodeLength","currentWidth","deltaWidth","symbolId","rdx","rdy","exportedSymbols","currentFlag","totalSymbolsLength","runLength","decodeSymbolDictionary","onImmediateTextRegion","stripT","firstS","currentS","t","applyRefinement","symbolBitmap","symbolWidth","symbolHeight","rdw","rdh","offsetT","offsetS","s2","symbolRow","maxWidth","min","t2","deltaS","decodeTextRegion","onImmediateLosslessTextRegion","Jbig2Image","parseChunks","chunks","chunk","parseJbig2Chunks","Jbig2Stream","inherit","dict","overrided","ensureBuffer","req","bufferLength","jbig2Image","decodeParams","has","globals","getBytes","dataLength","getChar","jbig2"],"mappings":"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","file":"../jbig2.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-io-streams/DecodeStream\",\r\n  \"./codec\"\r\n],function(langx,DecodeStream,codec){\r\n  'use strict';\r\n\r\n   //The module code is based from mozilla/pdf.js/\r\n   // original : https://github.com/mozilla/pdf.js/blob/master/src/core/jbig2.js\r\n   // license  : Apache 2\r\n\r\n  // Annex E. Arithmetic Coding\r\n\r\n    var QeTable = [\r\n      {qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1},\r\n      {qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0},\r\n      {qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0},\r\n      {qe: 0x0AC1, nmps: 4, nlps: 12, switchFlag: 0},\r\n      {qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0},\r\n      {qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0},\r\n      {qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1},\r\n      {qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0},\r\n      {qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0},\r\n      {qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0},\r\n      {qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0},\r\n      {qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0},\r\n      {qe: 0x1C01, nmps: 13, nlps: 20, switchFlag: 0},\r\n      {qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0},\r\n      {qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1},\r\n      {qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0},\r\n      {qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0},\r\n      {qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0},\r\n      {qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0},\r\n      {qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0},\r\n      {qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0},\r\n      {qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0},\r\n      {qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0},\r\n      {qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0},\r\n      {qe: 0x1C01, nmps: 25, nlps: 22, switchFlag: 0},\r\n      {qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0},\r\n      {qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0},\r\n      {qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0},\r\n      {qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0},\r\n      {qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0},\r\n      {qe: 0x0AC1, nmps: 31, nlps: 28, switchFlag: 0},\r\n      {qe: 0x09C1, nmps: 32, nlps: 29, switchFlag: 0},\r\n      {qe: 0x08A1, nmps: 33, nlps: 30, switchFlag: 0},\r\n      {qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0},\r\n      {qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0},\r\n      {qe: 0x02A1, nmps: 36, nlps: 33, switchFlag: 0},\r\n      {qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0},\r\n      {qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0},\r\n      {qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0},\r\n      {qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0},\r\n      {qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0},\r\n      {qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0},\r\n      {qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0},\r\n      {qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0},\r\n      {qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0},\r\n      {qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0},\r\n      {qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0}\r\n    ];\r\n\r\n  var ArithmeticDecoder = langx.klass({\r\n      \"klassName\" : \"ArithmeticDecoder\",\r\n\r\n      byteIn: function ArithmeticDecoder_byteIn() {\r\n        var data = this.data;\r\n        var bp = this.bp;\r\n        if (data[bp] == 0xFF) {\r\n          var b1 = data[bp + 1];\r\n          if (b1 > 0x8F) {\r\n            this.clow += 0xFF00;\r\n            this.ct = 8;\r\n          } else {\r\n            bp++;\r\n            this.clow += (data[bp] << 9);\r\n            this.ct = 7;\r\n            this.bp = bp;\r\n          }\r\n        } else {\r\n          bp++;\r\n          this.clow += bp < this.dataEnd ? (data[bp] << 8) : 0xFF00;\r\n          this.ct = 8;\r\n          this.bp = bp;\r\n        }\r\n        if (this.clow > 0xFFFF) {\r\n          this.chigh += (this.clow >> 16);\r\n          this.clow &= 0xFFFF;\r\n        }\r\n      },\r\n      readBit: function ArithmeticDecoder_readBit(contexts, pos) {\r\n        // contexts are packed into 1 byte: \r\n        // highest 7 bits carry cx.index, lowest bit carries cx.mps\r\n        var cx_index = contexts[pos] >> 1, cx_mps = contexts[pos] & 1;\r\n        var qeTableIcx = QeTable[cx_index];\r\n        var qeIcx = qeTableIcx.qe;\r\n        var nmpsIcx = qeTableIcx.nmps;\r\n        var nlpsIcx = qeTableIcx.nlps;\r\n        var switchIcx = qeTableIcx.switchFlag;\r\n        var d;\r\n        this.a -= qeIcx;\r\n\r\n        if (this.chigh < qeIcx) {\r\n          // exchangeLps\r\n          if (this.a < qeIcx) {\r\n            this.a = qeIcx;\r\n            d = cx_mps;\r\n            cx_index = nmpsIcx;\r\n          } else {\r\n            this.a = qeIcx;\r\n            d = 1 - cx_mps;\r\n            if (switchIcx) {\r\n              cx_mps = d;\r\n            }\r\n            cx_index = nlpsIcx;\r\n          }\r\n        } else {\r\n          this.chigh -= qeIcx;\r\n          if ((this.a & 0x8000) !== 0) {\r\n            return cx_mps;\r\n          }\r\n          // exchangeMps\r\n          if (this.a < qeIcx) {\r\n            d = 1 - cx_mps;\r\n            if (switchIcx) {\r\n              cx_mps = d;\r\n            }\r\n            cx_index = nlpsIcx;\r\n          } else {\r\n            d = cx_mps;\r\n            cx_index = nmpsIcx;\r\n          }\r\n        }\r\n        // renormD;\r\n        do {\r\n          if (this.ct === 0)\r\n            this.byteIn();\r\n\r\n          this.a <<= 1;\r\n          this.chigh = ((this.chigh << 1) & 0xFFFF) | ((this.clow >> 15) & 1);\r\n          this.clow = (this.clow << 1) & 0xFFFF;\r\n          this.ct--;\r\n        } while ((this.a & 0x8000) === 0);\r\n\r\n        contexts[pos] = cx_index << 1 | cx_mps;\r\n        return d;\r\n      },\r\n  \r\n      \"init\" : function (data, start, end) {\r\n        this.data = data;\r\n        this.bp = start;\r\n        this.dataEnd = end;\r\n\r\n        this.chigh = data[start];\r\n        this.clow = 0;\r\n\r\n        this.byteIn();\r\n\r\n        this.chigh = ((this.chigh << 7) & 0xFFFF) | ((this.clow >> 9) & 0x7F);\r\n        this.clow = (this.clow << 7) & 0xFFFF;\r\n        this.ct -= 7;\r\n        this.a = 0x8000;\r\n    }\r\n\r\n  });\r\n\r\n\r\n   // Utility data structures\r\n  var ContextCache = langx.klass({\r\n    getContexts: function(id) {\r\n      if (id in this)\r\n        return this[id];\r\n      return (this[id] = new Int8Array(1<<16));\r\n    }\r\n  });\r\n\r\n  var DecodingContext = langx.klass({\r\n    \"decoder\" : {\r\n      get : function() {\r\n        var decoder = new ArithmeticDecoder(this.data, this.start, this.end);\r\n        return shadow(this, 'decoder', decoder);\r\n      }\r\n    },\r\n    \"contextCache\" : {\r\n      get : function() {\r\n        var cache = new ContextCache();\r\n        return shadow(this, 'contextCache', cache);\r\n      }\r\n    },\r\n    \"init\" : function (data, start, end) {\r\n      this.data = data;\r\n      this.start = start;\r\n      this.end = end;\r\n    }\r\n\r\n\r\n  });\r\n\r\n  // Annex A. Arithmetic Integer Decoding Procedure\r\n  // A.2 Procedure for decoding values\r\n  function decodeInteger(contextCache, procedure, decoder) {\r\n    var contexts = contextCache.getContexts(procedure);\r\n\r\n    var prev = 1;\r\n    var state = 1, v = 0, s;\r\n    var toRead = 32, offset = 4436; // defaults for state 7\r\n    while (state) {\r\n      var bit = decoder.readBit(contexts, prev);\r\n      prev = prev < 256 ? (prev << 1) | bit :\r\n        (((prev << 1) | bit) & 511) | 256;\r\n      switch (state) {\r\n        case 1:\r\n          s = !!bit;\r\n          break;\r\n        case 2:\r\n          if (bit) break;\r\n          state = 7;\r\n          toRead = 2;\r\n          offset = 0;\r\n          break;\r\n        case 3:\r\n          if (bit) break;\r\n          state = 7;\r\n          toRead = 4;\r\n          offset = 4;\r\n          break;\r\n        case 4:\r\n          if (bit) break;\r\n          state = 7;\r\n          toRead = 6;\r\n          offset = 20;\r\n          break;\r\n        case 5:\r\n          if (bit) break;\r\n          state = 7;\r\n          toRead = 8;\r\n          offset = 84;\r\n          break;\r\n        case 6:\r\n          if (bit) break;\r\n          state = 7;\r\n          toRead = 12;\r\n          offset = 340;\r\n          break;\r\n        default:\r\n          v = v * 2 + bit;\r\n          if (--toRead === 0)\r\n            state = 0;\r\n          continue;\r\n      }\r\n      state++;\r\n    }\r\n    v += offset;\r\n    return !s ? v : v > 0 ? -v : null;\r\n  }\r\n\r\n  // A.3 The IAID decoding procedure\r\n  function decodeIAID(contextCache, decoder, codeLength) {\r\n    var contexts = contextCache.getContexts('IAID');\r\n\r\n    var prev = 1;\r\n    for (var i = 0; i < codeLength; i++) {\r\n      var bit = decoder.readBit(contexts, prev);\r\n      prev = (prev * 2) + bit;\r\n    }\r\n    if (codeLength < 31)\r\n      return prev & ((1 << codeLength) - 1);\r\n    else\r\n      return prev - Math.pow(2, codeLength);\r\n  }\r\n\r\n  // 7.3 Segment types\r\n  var SegmentTypes = [\r\n    'SymbolDictionary', null, null, null, 'IntermediateTextRegion', null,\r\n    'ImmediateTextRegion', 'ImmediateLosslessTextRegion', null, null, null,\r\n    null, null, null, null, null, 'patternDictionary', null, null, null,\r\n    'IntermediateHalftoneRegion', null, 'ImmediateHalftoneRegion',\r\n    'ImmediateLosslessHalftoneRegion', null, null, null, null, null, null, null,\r\n    null, null, null, null, null, 'IntermediateGenericRegion', null,\r\n    'ImmediateGenericRegion', 'ImmediateLosslessGenericRegion',\r\n    'IntermediateGenericRefinementRegion', null,\r\n    'ImmediateGenericRefinementRegion',\r\n    'ImmediateLosslessGenericRefinementRegion', null, null, null, null,\r\n    'PageInformation', 'EndOfPage', 'EndOfStripe', 'EndOfFile', 'Profiles',\r\n    'Tables', null, null, null, null, null, null, null, null,\r\n    'Extension'\r\n  ];\r\n\r\n  var CodingTemplates = [\r\n    [{x: -1, y: -2}, {x: 0, y: -2}, {x: 1, y: -2}, {x: -2, y: -1},\r\n     {x: -1, y: -1}, {x: 0, y: -1}, {x: 1, y: -1}, {x: 2, y: -1},\r\n     {x: -4, y: 0}, {x: -3, y: 0}, {x: -2, y: 0}, {x: -1, y: 0}],\r\n    [{x: -1, y: -2}, {x: 0, y: -2}, {x: 1, y: -2}, {x: 2, y: -2},\r\n     {x: -2, y: -1}, {x: -1, y: -1}, {x: 0, y: -1}, {x: 1, y: -1},\r\n     {x: 2, y: -1}, {x: -3, y: 0}, {x: -2, y: 0}, {x: -1, y: 0}],\r\n    [{x: -1, y: -2}, {x: 0, y: -2}, {x: 1, y: -2}, {x: -2, y: -1},\r\n     {x: -1, y: -1}, {x: 0, y: -1}, {x: 1, y: -1}, {x: -2, y: 0},\r\n     {x: -1, y: 0}],\r\n    [{x: -3, y: -1}, {x: -2, y: -1}, {x: -1, y: -1}, {x: 0, y: -1},\r\n     {x: 1, y: -1}, {x: -4, y: 0}, {x: -3, y: 0}, {x: -2, y: 0}, {x: -1, y: 0}]\r\n  ];\r\n\r\n  var RefinementTemplates = [\r\n    {\r\n      coding: [{x: 0, y: -1}, {x: 1, y: -1}, {x: -1, y: 0}],\r\n      reference: [{x: 0, y: -1}, {x: 1, y: -1}, {x: -1, y: 0}, {x: 0, y: 0},\r\n                  {x: 1, y: 0}, {x: -1, y: 1}, {x: 0, y: 1}, {x: 1, y: 1}]\r\n    },\r\n    {\r\n      coding: [{x: -1, y: -1}, {x: 0, y: -1}, {x: 1, y: -1}, {x: -1, y: 0}],\r\n      reference: [{x: 0, y: -1}, {x: -1, y: 0}, {x: 0, y: 0}, {x: 1, y: 0},\r\n                  {x: 0, y: 1}, {x: 1, y: 1}]\r\n    }\r\n  ];\r\n\r\n  var ReusedContexts = [\r\n    0x1CD3, // '00111001101' (template) + '0011' (at),\r\n    0x079A, // '001111001101' + '0',\r\n    0x00E3, // '001110001' + '1',\r\n    0x018B  // '011000101' + '1'\r\n  ];\r\n\r\n  var RefinementReusedContexts = [\r\n    0x0020, // '000' + '0' (coding) + '00010000' + '0' (reference)\r\n    0x0008  // '0000' + '001000'\r\n  ];\r\n\r\n  function log2(x) {\r\n    var n = 1, i = 0;\r\n    while (x > n) {\r\n      n <<= 1;\r\n      i++;\r\n    }\r\n    return i;\r\n  }\r\n\r\n  function readInt32(data, start) {\r\n    return (data[start] << 24) | (data[start + 1] << 16) |\r\n           (data[start + 2] << 8) | data[start + 3];\r\n  }\r\n\r\n  function readUint32(data, start) {\r\n    var value = readInt32(data, start);\r\n    return value & 0x80000000 ? (value + 4294967296) : value;\r\n  }\r\n\r\n  function readUint16(data, start) {\r\n    return (data[start] << 8) | data[start + 1];\r\n  }\r\n\r\n  function readInt8(data, start) {\r\n    return (data[start] << 24) >> 24;\r\n  }\r\n\r\n  // 6.2 Generic Region Decoding Procedure\r\n  function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at,\r\n                        decodingContext) {\r\n    if (mmr)\r\n      error('JBIG2 error: MMR encoding is not supported');\r\n\r\n    var useskip = !!skip;\r\n    var template = CodingTemplates[templateIndex].concat(at);\r\n    var templateLength = template.length;\r\n    var templateX = new Int32Array(templateLength);\r\n    var templateY = new Int32Array(templateLength);\r\n    for (var k = 0; k < templateLength; k++) {\r\n      templateX[k] = template[k].x;\r\n      templateY[k] = template[k].y;\r\n    }\r\n\r\n    var pseudoPixelContext = ReusedContexts[templateIndex];\r\n    var bitmap = [];\r\n\r\n    var decoder = decodingContext.decoder;\r\n    var contexts = decodingContext.contextCache.getContexts('GB');\r\n\r\n    var ltp = 0;\r\n    for (var i = 0; i < height; i++) {\r\n      if (prediction) {\r\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\r\n        ltp ^= sltp;\r\n      }\r\n      if (ltp) {\r\n        bitmap.push(bitmap[bitmap.length - 1]); // duplicate previous row\r\n        continue;\r\n      }\r\n      var row = new Uint8Array(width);\r\n      bitmap.push(row);\r\n      for (var j = 0; j < width; j++) {\r\n        if (useskip && skip[i][j]) {\r\n          row[j] = 0;\r\n          continue;\r\n        }\r\n        var contextLabel = 0;\r\n        for (var k = 0; k < templateLength; k++) {\r\n          var i0 = i + templateY[k], j0 = j + templateX[k];\r\n          if (i0 < 0 || j0 < 0 || j0 >= width)\r\n            contextLabel <<= 1; // out of bound pixel\r\n          else\r\n            contextLabel = (contextLabel << 1) | bitmap[i0][j0];\r\n        }\r\n        var pixel = decoder.readBit(contexts, contextLabel);\r\n        row[j] = pixel;\r\n      }\r\n    }\r\n    return bitmap;\r\n  }\r\n\r\n  // 6.3.2 Generic Refinement Region Decoding Procedure\r\n  function decodeRefinement(width, height, templateIndex, referenceBitmap,\r\n                            offsetX, offsetY, prediction, at,\r\n                            decodingContext) {\r\n    var codingTemplate = RefinementTemplates[templateIndex].coding;\r\n    if (templateIndex === 0)\r\n      codingTemplate = codingTemplate.concat([at[0]]);\r\n    var codingTemplateLength = codingTemplate.length;\r\n    var codingTemplateX = new Int32Array(codingTemplateLength);\r\n    var codingTemplateY = new Int32Array(codingTemplateLength);\r\n    for (var k = 0; k < codingTemplateLength; k++) {\r\n      codingTemplateX[k] = codingTemplate[k].x;\r\n      codingTemplateY[k] = codingTemplate[k].y;\r\n    }\r\n    var referenceTemplate = RefinementTemplates[templateIndex].reference;\r\n    if (templateIndex === 0)\r\n      referenceTemplate = referenceTemplate.concat([at[1]]);\r\n    var referenceTemplateLength = referenceTemplate.length;\r\n    var referenceTemplateX = new Int32Array(referenceTemplateLength);\r\n    var referenceTemplateY = new Int32Array(referenceTemplateLength);\r\n    for (var k = 0; k < referenceTemplateLength; k++) {\r\n      referenceTemplateX[k] = referenceTemplate[k].x;\r\n      referenceTemplateY[k] = referenceTemplate[k].y;\r\n    }\r\n    var referenceWidth = referenceBitmap[0].length;\r\n    var referenceHeight = referenceBitmap.length;\r\n\r\n    var pseudoPixelContext = RefinementReusedContexts[templateIndex];\r\n    var bitmap = [];\r\n\r\n    var decoder = decodingContext.decoder;\r\n    var contexts = decodingContext.contextCache.getContexts('GR');\r\n\r\n    var ltp = 0;\r\n    for (var i = 0; i < height; i++) {\r\n      if (prediction) {\r\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\r\n        ltp ^= sltp;\r\n      }\r\n      var row = new Uint8Array(width);\r\n      bitmap.push(row);\r\n      for (var j = 0; j < width; j++) {\r\n        if (ltp)\r\n          error('JBIG2 error: prediction is not supported');\r\n\r\n        var contextLabel = 0;\r\n        for (var k = 0; k < codingTemplateLength; k++) {\r\n          var i0 = i + codingTemplateY[k], j0 = j + codingTemplateX[k];\r\n          if (i0 < 0 || j0 < 0 || j0 >= width)\r\n            contextLabel <<= 1; // out of bound pixel\r\n          else\r\n            contextLabel = (contextLabel << 1) | bitmap[i0][j0];\r\n        }\r\n        for (var k = 0; k < referenceTemplateLength; k++) {\r\n          var i0 = i + referenceTemplateY[k] + offsetY;\r\n          var j0 = j + referenceTemplateX[k] + offsetX;\r\n          if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth)\r\n            contextLabel <<= 1; // out of bound pixel\r\n          else\r\n            contextLabel = (contextLabel << 1) | referenceBitmap[i0][j0];\r\n        }\r\n        var pixel = decoder.readBit(contexts, contextLabel);\r\n        row[j] = pixel;\r\n      }\r\n    }\r\n\r\n    return bitmap;\r\n  }\r\n\r\n  // 6.5.5 Decoding the symbol dictionary\r\n  function decodeSymbolDictionary(huffman, refinement, symbols,\r\n                                  numberOfNewSymbols, numberOfExportedSymbols,\r\n                                  huffmanTables, templateIndex, at,\r\n                                  refinementTemplateIndex, refinementAt,\r\n                                  decodingContext) {\r\n    if (huffman)\r\n      error('JBIG2 error: huffman is not supported');\r\n\r\n    var newSymbols = [];\r\n    var currentHeight = 0;\r\n    var symbolCodeLength = log2(symbols.length + numberOfNewSymbols);\r\n\r\n    var decoder = decodingContext.decoder;\r\n    var contextCache = decodingContext.contextCache;\r\n\r\n    while (newSymbols.length < numberOfNewSymbols) {\r\n      var deltaHeight = decodeInteger(contextCache, 'IADH', decoder); // 6.5.6\r\n      currentHeight += deltaHeight;\r\n      var currentWidth = 0;\r\n      var totalWidth = 0;\r\n      while (true) {\r\n        var deltaWidth = decodeInteger(contextCache, 'IADW', decoder); // 6.5.7\r\n        if (deltaWidth === null)\r\n          break; // OOB\r\n        currentWidth += deltaWidth;\r\n        totalWidth += currentWidth;\r\n        var bitmap;\r\n        if (refinement) {\r\n          // 6.5.8.2 Refinement/aggregate-coded symbol bitmap\r\n          var numberOfInstances = decodeInteger(contextCache, 'IAAI', decoder);\r\n          if (numberOfInstances > 1)\r\n            error('JBIG2 error: number of instances > 1 is not supported');\r\n          var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\r\n          var rdx = decodeInteger(contextCache, 'IARDX', decoder); // 6.4.11.3\r\n          var rdy = decodeInteger(contextCache, 'IARDY', decoder); // 6.4.11.4\r\n          var symbol = symbolId < symbols.length ? symbols[symbolId] :\r\n            newSymbols[symbolId - symbols.length];\r\n          bitmap = decodeRefinement(currentWidth, currentHeight,\r\n            refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt,\r\n            decodingContext);\r\n        } else {\r\n          // 6.5.8.1 Direct-coded symbol bitmap\r\n          bitmap = decodeBitmap(false, currentWidth, currentHeight,\r\n            templateIndex, false, null, at, decodingContext);\r\n        }\r\n        newSymbols.push(bitmap);\r\n      }\r\n    }\r\n    // 6.5.10 Exported symbols\r\n    var exportedSymbols = [];\r\n    var flags = [], currentFlag = false;\r\n    var totalSymbolsLength = symbols.length + numberOfNewSymbols;\r\n    while (flags.length < totalSymbolsLength) {\r\n      var runLength = decodeInteger(contextCache, 'IAEX', decoder);\r\n      while (runLength--)\r\n        flags.push(currentFlag);\r\n      currentFlag = !currentFlag;\r\n    }\r\n    for (var i = 0, ii = symbols.length; i < ii; i++)\r\n      if (flags[i]) exportedSymbols.push(symbols[i]);\r\n    for (var j = 0; j < numberOfNewSymbols; i++, j++)\r\n      if (flags[i]) exportedSymbols.push(newSymbols[j]);\r\n    return exportedSymbols;\r\n  }\r\n\r\n  function decodeTextRegion(huffman, refinement, width, height,\r\n                            defaultPixelValue, numberOfSymbolInstances,\r\n                            stripSize, inputSymbols, symbolCodeLength,\r\n                            transposed, dsOffset, referenceCorner,\r\n                            combinationOperator, huffmanTables,\r\n                            refinementTemplateIndex, refinementAt,\r\n                            decodingContext) {\r\n    if (huffman)\r\n      error('JBIG2 error: huffman is not supported');\r\n\r\n    // Prepare bitmap\r\n    var bitmap = [];\r\n    for (var i = 0; i < height; i++) {\r\n      var row = new Uint8Array(width);\r\n      if (defaultPixelValue) {\r\n        for (var j = 0; j < width; j++)\r\n          row[j] = defaultPixelValue;\r\n      }\r\n      bitmap.push(row);\r\n    }\r\n\r\n    var decoder = decodingContext.decoder;\r\n    var contextCache = decodingContext.contextCache;\r\n    var stripT = -decodeInteger(contextCache, 'IADT', decoder); // 6.4.6\r\n    var firstS = 0;\r\n    var i = 0;\r\n    while (i < numberOfSymbolInstances) {\r\n      var deltaT = decodeInteger(contextCache, 'IADT', decoder); // 6.4.6\r\n      stripT += deltaT;\r\n\r\n      var deltaFirstS = decodeInteger(contextCache, 'IAFS', decoder); // 6.4.7\r\n      firstS += deltaFirstS;\r\n      var currentS = firstS;\r\n      do {\r\n        var currentT = stripSize == 1 ? 0 :\r\n          decodeInteger(contextCache, 'IAIT', decoder); // 6.4.9\r\n        var t = stripSize * stripT + currentT;\r\n        var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\r\n        var applyRefinement = refinement &&\r\n          decodeInteger(contextCache, 'IARI', decoder);\r\n        var symbolBitmap = inputSymbols[symbolId];\r\n        var symbolWidth = symbolBitmap[0].length;\r\n        var symbolHeight = symbolBitmap.length;\r\n        if (applyRefinement) {\r\n          var rdw = decodeInteger(contextCache, 'IARDW', decoder); // 6.4.11.1\r\n          var rdh = decodeInteger(contextCache, 'IARDH', decoder); // 6.4.11.2\r\n          var rdx = decodeInteger(contextCache, 'IARDX', decoder); // 6.4.11.3\r\n          var rdy = decodeInteger(contextCache, 'IARDY', decoder); // 6.4.11.4\r\n          symbolWidth += rdw;\r\n          symbolHeight += rdh;\r\n          symbolBitmap = decodeRefinement(symbolWidth, symbolHeight,\r\n            refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx,\r\n            (rdh >> 1) + rdy, false, refinementAt,\r\n            decodingContext);\r\n        }\r\n        var offsetT = t - ((referenceCorner & 1) ? 0 : symbolHeight);\r\n        var offsetS = currentS - ((referenceCorner & 2) ? symbolWidth : 0);\r\n        if (transposed) {\r\n          // Place Symbol Bitmap from T1,S1  \r\n          for (var s2 = 0; s2 < symbolHeight; s2++) {\r\n            var row = bitmap[offsetS + s2];\r\n            if (!row) {\r\n              continue;\r\n            }\r\n            var symbolRow = symbolBitmap[s2];\r\n            // To ignore Parts of Symbol bitmap which goes\r\n            // outside bitmap region\r\n            var maxWidth = Math.min(width - offsetT, symbolWidth);\r\n            switch (combinationOperator) {\r\n              case 0: // OR\r\n                for (var t2 = 0; t2 < maxWidth; t2++) {\r\n                  row[offsetT + t2] |= symbolRow[t2];\r\n                }\r\n                break;\r\n              case 2: // XOR\r\n                for (var t2 = 0; t2 < maxWidth; t2++) {\r\n                  row[offsetT + t2] ^= symbolRow[t2];\r\n                }\r\n                break;\r\n              default:\r\n                error('JBIG2 error: operator ' + combinationOperator +\r\n                      ' is not supported');\r\n            }\r\n          }\r\n          currentS += symbolHeight - 1;\r\n        } else {\r\n          for (var t2 = 0; t2 < symbolHeight; t2++) {\r\n            var row = bitmap[offsetT + t2];\r\n            if (!row) {\r\n              continue;\r\n            }\r\n            var symbolRow = symbolBitmap[t2];\r\n            switch (combinationOperator) {\r\n              case 0: // OR\r\n                for (var s2 = 0; s2 < symbolWidth; s2++) {\r\n                  row[offsetS + s2] |= symbolRow[s2];\r\n                }\r\n                break;\r\n              case 2: // XOR\r\n                for (var s2 = 0; s2 < symbolWidth; s2++) {\r\n                  row[offsetS + s2] ^= symbolRow[s2];\r\n                }\r\n                break;\r\n              default:\r\n                error('JBIG2 error: operator ' + combinationOperator +\r\n                      ' is not supported');\r\n            }\r\n          }\r\n          currentS += symbolWidth - 1;\r\n        }\r\n        i++;\r\n        var deltaS = decodeInteger(contextCache, 'IADS', decoder); // 6.4.8\r\n        if (deltaS === null)\r\n          break; // OOB\r\n        currentS += deltaS + dsOffset;\r\n      } while (true);\r\n    }\r\n    return bitmap;\r\n  }\r\n\r\n  function readSegmentHeader(data, start) {\r\n    var segmentHeader = {};\r\n    segmentHeader.number = readUint32(data, start);\r\n    var flags = data[start + 4];\r\n    var segmentType = flags & 0x3F;\r\n    if (!SegmentTypes[segmentType])\r\n      error('JBIG2 error: invalid segment type: ' + segmentType);\r\n    segmentHeader.type = segmentType;\r\n    segmentHeader.typeName = SegmentTypes[segmentType];\r\n    segmentHeader.deferredNonRetain = !!(flags & 0x80);\r\n    var pageAssociationFieldSize = !!(flags & 0x40);\r\n    var referredFlags = data[start + 5];\r\n    var referredToCount = (referredFlags >> 5) & 7;\r\n    var retainBits = [referredFlags & 31];\r\n    var position = start + 6;\r\n    if (referredFlags == 7) {\r\n      referredToCount = readInt32(data, position - 1) & 0x1FFFFFFF;\r\n      position += 3;\r\n      var bytes = (referredToCount + 7) >> 3;\r\n      retainBits[0] = data[position++];\r\n      while (--bytes > 0) {\r\n        retainBits.push(data[position++]);\r\n      }\r\n    } else if (referredFlags == 5 || referredFlags == 6)\r\n      error('JBIG2 error: invalid referred-to flags');\r\n    segmentHeader.retainBits = retainBits;\r\n    var referredToSegmentNumberSize = segmentHeader.number <= 256 ? 1 :\r\n      segmentHeader.number <= 65536 ? 2 : 4;\r\n    var referredTo = [];\r\n    for (var i = 0; i < referredToCount; i++) {\r\n      var number = referredToSegmentNumberSize == 1 ? data[position] :\r\n        referredToSegmentNumberSize == 2 ? readUint16(data, position) :\r\n        readUint32(data, position);\r\n      referredTo.push(number);\r\n      position += referredToSegmentNumberSize;\r\n    }\r\n    segmentHeader.referredTo = referredTo;\r\n    if (!pageAssociationFieldSize)\r\n      segmentHeader.pageAssociation = data[position++];\r\n    else {\r\n      segmentHeader.pageAssociation = readUint32(data, position);\r\n      position += 4;\r\n    }\r\n    segmentHeader.length = readUint32(data, position);\r\n    position += 4;\r\n    if (segmentHeader.length == 0xFFFFFFFF) {\r\n      // 7.2.7 Segment data length, unknown segment length\r\n      if (segmentType === 38) { // ImmediateGenericRegion\r\n        var genericRegionInfo = readRegionSegmentInformation(data, position);\r\n        var genericRegionSegmentFlags = data[position +\r\n          RegionSegmentInformationFieldLength];\r\n        var genericRegionMmr = !!(genericRegionSegmentFlags & 1);\r\n        // searching for the segment end\r\n        var searchPatternLength = 6;\r\n        var searchPattern = new Uint8Array(searchPatternLength);\r\n        if (!genericRegionMmr) {\r\n          searchPattern[0] = 0xFF;\r\n          searchPattern[1] = 0xAC;\r\n        }\r\n        searchPattern[2] = (genericRegionInfo.height >>> 24) & 0xFF;\r\n        searchPattern[3] = (genericRegionInfo.height >> 16) & 0xFF;\r\n        searchPattern[4] = (genericRegionInfo.height >> 8) & 0xFF;\r\n        searchPattern[5] = genericRegionInfo.height & 0xFF;\r\n        for (var i = position, ii = data.length; i < ii; i++) {\r\n          var j = 0;\r\n          while (j < searchPatternLength && searchPattern[j] === data[i + j]) {\r\n            j++;\r\n          }\r\n          if (j == searchPatternLength) {\r\n            segmentHeader.length = i + searchPatternLength;\r\n            break;\r\n          }\r\n        }\r\n        if (segmentHeader.length == 0xFFFFFFFF) {\r\n          error('JBIG2 error: segment end was not found');\r\n        }\r\n      } else {\r\n        error('JBIG2 error: invalid unknown segment length');\r\n      }\r\n    }\r\n    segmentHeader.headerEnd = position;\r\n    return segmentHeader;\r\n  }\r\n\r\n  function readSegments(header, data, start, end) {\r\n    var segments = [];\r\n    var position = start;\r\n    while (position < end) {\r\n      var segmentHeader = readSegmentHeader(data, position);\r\n      position = segmentHeader.headerEnd;\r\n      var segment = {\r\n        header: segmentHeader,\r\n        data: data\r\n      };\r\n      if (!header.randomAccess) {\r\n        segment.start = position;\r\n        position += segmentHeader.length;\r\n        segment.end = position;\r\n      }\r\n      segments.push(segment);\r\n      if (segmentHeader.type == 51)\r\n        break; // end of file is found\r\n    }\r\n    if (header.randomAccess) {\r\n      for (var i = 0, ii = segments.length; i < ii; i++) {\r\n        segments[i].start = position;\r\n        position += segments[i].header.length;\r\n        segments[i].end = position;\r\n      }\r\n    }\r\n    return segments;\r\n  }\r\n\r\n  // 7.4.1 Region segment information field\r\n  function readRegionSegmentInformation(data, start) {\r\n    return {\r\n      width: readUint32(data, start),\r\n      height: readUint32(data, start + 4),\r\n      x: readUint32(data, start + 8),\r\n      y: readUint32(data, start + 12),\r\n      combinationOperator: data[start + 16] & 7\r\n    };\r\n  }\r\n  var RegionSegmentInformationFieldLength = 17;\r\n\r\n  function processSegment(segment, visitor) {\r\n    var header = segment.header;\r\n\r\n    var data = segment.data, position = segment.start, end = segment.end;\r\n    var args;\r\n    switch (header.type) {\r\n      case 0: // SymbolDictionary\r\n        // 7.4.2 Symbol dictionary segment syntax\r\n        var dictionary = {};\r\n        var dictionaryFlags = readUint16(data, position); // 7.4.2.1.1\r\n        dictionary.huffman = !!(dictionaryFlags & 1);\r\n        dictionary.refinement = !!(dictionaryFlags & 2);\r\n        dictionary.huffmanDHSelector = (dictionaryFlags >> 2) & 3;\r\n        dictionary.huffmanDWSelector = (dictionaryFlags >> 4) & 3;\r\n        dictionary.bitmapSizeSelector = (dictionaryFlags >> 6) & 1;\r\n        dictionary.aggregationInstancesSelector = (dictionaryFlags >> 7) & 1;\r\n        dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);\r\n        dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);\r\n        dictionary.template = (dictionaryFlags >> 10) & 3;\r\n        dictionary.refinementTemplate = (dictionaryFlags >> 12) & 1;\r\n        position += 2;\r\n        if (!dictionary.huffman) {\r\n          var atLength = dictionary.template === 0 ? 4 : 1;\r\n          var at = [];\r\n          for (var i = 0; i < atLength; i++) {\r\n            at.push({\r\n              x: readInt8(data, position),\r\n              y: readInt8(data, position + 1)\r\n            });\r\n            position += 2;\r\n          }\r\n          dictionary.at = at;\r\n        }\r\n        if (dictionary.refinement && !dictionary.refinementTemplate) {\r\n          var at = [];\r\n          for (var i = 0; i < 2; i++) {\r\n            at.push({\r\n              x: readInt8(data, position),\r\n              y: readInt8(data, position + 1)\r\n            });\r\n            position += 2;\r\n          }\r\n          dictionary.refinementAt = at;\r\n        }\r\n        dictionary.numberOfExportedSymbols = readUint32(data, position);\r\n        position += 4;\r\n        dictionary.numberOfNewSymbols = readUint32(data, position);\r\n        position += 4;\r\n        args = [dictionary, header.number, header.referredTo,\r\n                data, position, end];\r\n        break;\r\n      case 6: // ImmediateTextRegion\r\n      case 7: // ImmediateLosslessTextRegion\r\n        var textRegion = {};\r\n        textRegion.info = readRegionSegmentInformation(data, position);\r\n        position += RegionSegmentInformationFieldLength;\r\n        var textRegionSegmentFlags = readUint16(data, position);\r\n        position += 2;\r\n        textRegion.huffman = !!(textRegionSegmentFlags & 1);\r\n        textRegion.refinement = !!(textRegionSegmentFlags & 2);\r\n        textRegion.stripSize = 1 << ((textRegionSegmentFlags >> 2) & 3);\r\n        textRegion.referenceCorner = (textRegionSegmentFlags >> 4) & 3;\r\n        textRegion.transposed = !!(textRegionSegmentFlags & 64);\r\n        textRegion.combinationOperator = (textRegionSegmentFlags >> 7) & 3;\r\n        textRegion.defaultPixelValue = (textRegionSegmentFlags >> 9) & 1;\r\n        textRegion.dsOffset = (textRegionSegmentFlags << 17) >> 27;\r\n        textRegion.refinementTemplate = (textRegionSegmentFlags >> 15) & 1;\r\n        if (textRegion.huffman) {\r\n          var textRegionHuffmanFlags = readUint16(data, position);\r\n          position += 2;\r\n          textRegion.huffmanFS = (textRegionHuffmanFlags) & 3;\r\n          textRegion.huffmanDS = (textRegionHuffmanFlags >> 2) & 3;\r\n          textRegion.huffmanDT = (textRegionHuffmanFlags >> 4) & 3;\r\n          textRegion.huffmanRefinementDW = (textRegionHuffmanFlags >> 6) & 3;\r\n          textRegion.huffmanRefinementDH = (textRegionHuffmanFlags >> 8) & 3;\r\n          textRegion.huffmanRefinementDX = (textRegionHuffmanFlags >> 10) & 3;\r\n          textRegion.huffmanRefinementDY = (textRegionHuffmanFlags >> 12) & 3;\r\n          textRegion.huffmanRefinementSizeSelector =\r\n            !!(textRegionHuffmanFlags & 14);\r\n        }\r\n        if (textRegion.refinement && !textRegion.refinementTemplate) {\r\n          var at = [];\r\n          for (var i = 0; i < 2; i++) {\r\n            at.push({\r\n              x: readInt8(data, position),\r\n              y: readInt8(data, position + 1)\r\n            });\r\n            position += 2;\r\n          }\r\n          textRegion.refinementAt = at;\r\n        }\r\n        textRegion.numberOfSymbolInstances = readUint32(data, position);\r\n        position += 4;\r\n        // TODO 7.4.3.1.7 Symbol ID Huffman table decoding\r\n        if (textRegion.huffman)\r\n          error('JBIG2 error: huffman is not supported');\r\n        args = [textRegion, header.referredTo, data, position, end];\r\n        break;\r\n      case 38: // ImmediateGenericRegion\r\n      case 39: // ImmediateLosslessGenericRegion\r\n        var genericRegion = {};\r\n        genericRegion.info = readRegionSegmentInformation(data, position);\r\n        position += RegionSegmentInformationFieldLength;\r\n        var genericRegionSegmentFlags = data[position++];\r\n        genericRegion.mmr = !!(genericRegionSegmentFlags & 1);\r\n        genericRegion.template = (genericRegionSegmentFlags >> 1) & 3;\r\n        genericRegion.prediction = !!(genericRegionSegmentFlags & 8);\r\n        if (!genericRegion.mmr) {\r\n          var atLength = genericRegion.template === 0 ? 4 : 1;\r\n          var at = [];\r\n          for (var i = 0; i < atLength; i++) {\r\n            at.push({\r\n              x: readInt8(data, position),\r\n              y: readInt8(data, position + 1)\r\n            });\r\n            position += 2;\r\n          }\r\n          genericRegion.at = at;\r\n        }\r\n        args = [genericRegion, data, position, end];\r\n        break;\r\n      case 48: // PageInformation\r\n        var pageInfo = {\r\n          width: readUint32(data, position),\r\n          height: readUint32(data, position + 4),\r\n          resolutionX: readUint32(data, position + 8),\r\n          resolutionY: readUint32(data, position + 12)\r\n        };\r\n        if (pageInfo.height == 0xFFFFFFFF)\r\n          delete pageInfo.height;\r\n        var pageSegmentFlags = data[position + 16];\r\n        var pageStripingInformatiom = readUint16(data, position + 17);\r\n        pageInfo.lossless = !!(pageSegmentFlags & 1);\r\n        pageInfo.refinement = !!(pageSegmentFlags & 2);\r\n        pageInfo.defaultPixelValue = (pageSegmentFlags >> 2) & 1;\r\n        pageInfo.combinationOperator = (pageSegmentFlags >> 3) & 3;\r\n        pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);\r\n        pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);\r\n        args = [pageInfo];\r\n        break;\r\n      case 49: // EndOfPage\r\n        break;\r\n      case 50: // EndOfStripe\r\n        break;\r\n      case 51: // EndOfFile\r\n        break;\r\n      case 62: // 7.4.15 defines 2 extension types which\r\n               // are comments and can be ignored.\r\n        break;\r\n      default:\r\n        error('JBIG2 error: segment type ' + header.typeName + '(' +\r\n              header.type + ') is not implemented');\r\n    }\r\n    var callbackName = 'on' + header.typeName;\r\n    if (callbackName in visitor)\r\n      visitor[callbackName].apply(visitor, args);\r\n  }\r\n\r\n  function processSegments(segments, visitor) {\r\n    for (var i = 0, ii = segments.length; i < ii; i++)\r\n      processSegment(segments[i], visitor);\r\n  }\r\n\r\n  function parseJbig2(data, start, end) {\r\n    var position = start;\r\n    if (data[position] != 0x97 || data[position + 1] != 0x4A ||\r\n        data[position + 2] != 0x42 || data[position + 3] != 0x32 ||\r\n        data[position + 4] != 0x0D || data[position + 5] != 0x0A ||\r\n        data[position + 6] != 0x1A || data[position + 7] != 0x0A)\r\n      error('JBIG2 error: invalid header');\r\n    var header = {};\r\n    position += 8;\r\n    var flags = data[position++];\r\n    header.randomAccess = !(flags & 1);\r\n    if (!(flags & 2)) {\r\n      header.numberOfPages = readUint32(data, position);\r\n      position += 4;\r\n    }\r\n    var segments = readSegments(header, data, position, end);\r\n    error('Not implemented');\r\n    // processSegments(segments, new SimpleSegmentVisitor());\r\n  }\r\n\r\n  function parseJbig2Chunks(chunks) {\r\n    var visitor = new SimpleSegmentVisitor();\r\n    for (var i = 0, ii = chunks.length; i < ii; i++) {\r\n      var chunk = chunks[i];\r\n      var segments = readSegments({}, chunk.data, chunk.start, chunk.end);\r\n      processSegments(segments, visitor);\r\n    }\r\n    return visitor.buffer;\r\n  }\r\n\r\n  var SimpleSegmentVisitor = langx.klass({\r\n    onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {\r\n      this.currentPageInfo = info;\r\n      var rowSize = (info.width + 7) >> 3;\r\n      var buffer = new Uint8Array(rowSize * info.height);\r\n      var fill = info.defaultPixelValue ? 0xFF : 0;\r\n      for (var i = 0, ii = buffer.length; i < ii; i++)\r\n        buffer[i] = fill;\r\n      this.buffer = buffer;\r\n    },\r\n    drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {\r\n      var pageInfo = this.currentPageInfo;\r\n      var width = regionInfo.width, height = regionInfo.height;\r\n      var rowSize = (pageInfo.width + 7) >> 3;\r\n      var combinationOperator = pageInfo.combinationOperatorOverride ?\r\n        regionInfo.combinationOperator : pageInfo.combinationOperator;\r\n      var buffer = this.buffer;\r\n      for (var i = 0; i < height; i++) {\r\n        var mask = 128 >> (regionInfo.x & 7);\r\n        var offset = (i + regionInfo.y) * rowSize + (regionInfo.x >> 3);\r\n        switch (combinationOperator) {\r\n          case 0: // OR\r\n            for (var j = 0; j < width; j++) {\r\n              buffer[offset] |= bitmap[i][j] ? mask : 0;\r\n              mask >>= 1;\r\n              if (!mask) {\r\n                mask = 128;\r\n                offset++;\r\n              }\r\n            }\r\n            break;\r\n          case 2: // XOR\r\n            for (var j = 0; j < width; j++) {\r\n              buffer[offset] ^= bitmap[i][j] ? mask : 0;\r\n              mask >>= 1;\r\n              if (!mask) {\r\n                mask = 128;\r\n                offset++;\r\n              }\r\n            }\r\n            break;\r\n          default:\r\n            error('JBIG2 error: operator ' + combinationOperator +\r\n                  ' is not supported');\r\n        }\r\n      }\r\n    },\r\n    onImmediateGenericRegion:\r\n      function SimpleSegmentVisitor_onImmediateGenericRegion(region, data,\r\n                                                             start, end) {\r\n      var regionInfo = region.info;\r\n      var decodingContext = new DecodingContext(data, start, end);\r\n      var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height,\r\n                                region.template, region.prediction, null,\r\n                                region.at, decodingContext);\r\n      this.drawBitmap(regionInfo, bitmap);\r\n    },\r\n    onImmediateLosslessGenericRegion:\r\n      function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {\r\n      this.onImmediateGenericRegion.apply(this, arguments);\r\n    },\r\n    onSymbolDictionary:\r\n      function SimpleSegmentVisitor_onSymbolDictionary(dictionary,\r\n                                                       currentSegment,\r\n                                                       referredSegments,\r\n                                                       data, start, end) {\r\n      var huffmanTables;\r\n      if (dictionary.huffman)\r\n        error('JBIG2 error: huffman is not supported');\r\n\r\n      // Combines exported symbols from all referred segments\r\n      var symbols = this.symbols;\r\n      if (!symbols)\r\n        this.symbols = symbols = {};\r\n\r\n      var inputSymbols = [];\r\n      for (var i = 0, ii = referredSegments.length; i < ii; i++)\r\n        inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);\r\n\r\n      var decodingContext = new DecodingContext(data, start, end);\r\n      symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman,\r\n        dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols,\r\n        dictionary.numberOfExportedSymbols, huffmanTables,\r\n        dictionary.template, dictionary.at,\r\n        dictionary.refinementTemplate, dictionary.refinementAt,\r\n        decodingContext);\r\n    },\r\n    onImmediateTextRegion:\r\n      function SimpleSegmentVisitor_onImmediateTextRegion(region,\r\n                                                          referredSegments,\r\n                                                          data, start, end) {\r\n      var regionInfo = region.info;\r\n      var huffmanTables;\r\n\r\n      // Combines exported symbols from all referred segments\r\n      var symbols = this.symbols;\r\n      var inputSymbols = [];\r\n      for (var i = 0, ii = referredSegments.length; i < ii; i++)\r\n        inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);\r\n      var symbolCodeLength = log2(inputSymbols.length);\r\n\r\n      var decodingContext = new DecodingContext(data, start, end);\r\n      var bitmap = decodeTextRegion(region.huffman, region.refinement,\r\n        regionInfo.width, regionInfo.height, region.defaultPixelValue,\r\n        region.numberOfSymbolInstances, region.stripSize, inputSymbols,\r\n        symbolCodeLength, region.transposed, region.dsOffset,\r\n        region.referenceCorner, region.combinationOperator, huffmanTables,\r\n        region.refinementTemplate, region.refinementAt, decodingContext);\r\n      this.drawBitmap(regionInfo, bitmap);\r\n    },\r\n    onImmediateLosslessTextRegion:\r\n      function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {\r\n        this.onImmediateTextRegion.apply(this, arguments);\r\n    }\r\n  });\r\n\r\n  var Jbig2Image = langx.klass({\r\n    parseChunks: function Jbig2Image_parseChunks(chunks) {\r\n      return parseJbig2Chunks(chunks);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * For JBIG2's we use a library to decode these images and\r\n   * the stream behaves like all the other DecodeStreams.\r\n   */\r\n  var Jbig2Stream = DecodeStream.inherit({\r\n      klassName : \"Jbig2Stream\",\r\n\r\n      init : function(bytes, dict) {\r\n        this.dict = dict;\r\n        this.bytes = bytes;\r\n\r\n          this.overrided();          \r\n      },\r\n\r\n    ensureBuffer : function(req) {\r\n        if (this.bufferLength)\r\n            return;\r\n\r\n        var jbig2Image = new Jbig2Image();\r\n\r\n        var chunks = [],\r\n            decodeParams = this.dict.get('DecodeParms');\r\n        if (decodeParams && decodeParams.has('JBIG2Globals')) {\r\n            var globalsStream = decodeParams.get('JBIG2Globals');\r\n            var globals = globalsStream.getBytes();\r\n            chunks.push({\r\n                data: globals,\r\n                start: 0,\r\n                end: globals.length\r\n            });\r\n        }\r\n        chunks.push({\r\n            data: this.bytes,\r\n            start: 0,\r\n            end: this.bytes.length\r\n        });\r\n        var data = jbig2Image.parseChunks(chunks);\r\n        var dataLength = data.length;\r\n\r\n        // JBIG2 had black as 1 and white as 0, inverting the colors\r\n        for (var i = 0; i < dataLength; i++)\r\n            data[i] ^= 0xFF;\r\n\r\n        this.buffer = data;\r\n        this.bufferLength = dataLength;\r\n    },\r\n    getChar : function() {\r\n        error('internal error: getChar is not valid on Jbig2Stream');\r\n    }\r\n  });\r\n\r\n\r\n  return codec.jbig2 = {\r\n    \"Jbig2Image\" : Jbig2Image,\r\n    \"Jbig2Stream\" : Jbig2Stream\r\n  };\r\n});\r\n"]}