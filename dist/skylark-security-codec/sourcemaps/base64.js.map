{"version":3,"sources":["base64.js"],"names":["define","codec","base64","p","codetab","encode","ba","s","l","length","rm","x","i","t","push","charAt","join","decode","str","split","out","indexOf","pop","isBase64","data","startsWith","includes","removeHeader","slice","search","getFileFormat","start","end","substr","fromArraybuffer","arraybuffer","chunk","bstr","view","Uint8Array","remainder","byteLength","fromBinaryString","a","b","c","charCodeAt"],"mappings":"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","file":"../base64.js","sourcesContent":["define([\r\n    \"./codec\"\r\n], function(codec) {\r\n\r\n    var base64 = function() {\r\n        return base64;\r\n    }\r\n\r\n\tvar p=\"=\";\r\n\r\n\tvar codetab=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n\tbase64.encode=function(/* byte[] */ba){\r\n\t\t// summary:\r\n\t\t//\t\tEncode an array of bytes as a base64-encoded string\r\n\t\tvar s=[], l=ba.length;\r\n\t\tvar rm=l%3;\r\n\t\tvar x=l-rm;\r\n\t\tfor (var i=0; i<x;){\r\n\t\t\tvar t=ba[i++]<<16|ba[i++]<<8|ba[i++];\r\n\t\t\ts.push(codetab.charAt((t>>>18)&0x3f));\r\n\t\t\ts.push(codetab.charAt((t>>>12)&0x3f));\r\n\t\t\ts.push(codetab.charAt((t>>>6)&0x3f));\r\n\t\t\ts.push(codetab.charAt(t&0x3f));\r\n\t\t}\r\n\t\t//\tdeal with trailers, based on patch from Peter Wood.\r\n\t\tswitch(rm){\r\n\t\t\tcase 2:{\r\n\t\t\t\tvar t=ba[i++]<<16|ba[i++]<<8;\r\n\t\t\t\ts.push(codetab.charAt((t>>>18)&0x3f));\r\n\t\t\t\ts.push(codetab.charAt((t>>>12)&0x3f));\r\n\t\t\t\ts.push(codetab.charAt((t>>>6)&0x3f));\r\n\t\t\t\ts.push(p);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 1:{\r\n\t\t\t\tvar t=ba[i++]<<16;\r\n\t\t\t\ts.push(codetab.charAt((t>>>18)&0x3f));\r\n\t\t\t\ts.push(codetab.charAt((t>>>12)&0x3f));\r\n\t\t\t\ts.push(p);\r\n\t\t\t\ts.push(p);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn s.join(\"\");\t//\tstring\r\n\t};\r\n\r\n\tbase64.decode=function(/* string */str){\r\n\t\t// summary:\r\n\t\t//\t\tConvert a base64-encoded string to an array of bytes\r\n\t\tvar s=str.split(\"\"), out=[];\r\n\t\tvar l=s.length;\r\n\t\twhile(s[--l]==p){ }\t//\tstrip off trailing padding\r\n\t\tfor (var i=0; i<l;){\r\n\t\t\tvar t=codetab.indexOf(s[i++])<<18;\r\n\t\t\tif(i<=l){ t|=codetab.indexOf(s[i++])<<12 };\r\n\t\t\tif(i<=l){ t|=codetab.indexOf(s[i++])<<6 };\r\n\t\t\tif(i<=l){ t|=codetab.indexOf(s[i++]) };\r\n\t\t\tout.push((t>>>16)&0xff);\r\n\t\t\tout.push((t>>>8)&0xff);\r\n\t\t\tout.push(t&0xff);\r\n\t\t}\r\n\t\t//\tstrip off any null bytes\r\n\t\twhile(out[out.length-1]==0){ out.pop(); }\r\n\t\treturn out;\t//\tbyte[]\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Check if some data is encoded as base64.\r\n\t *\r\n\t * This is a fast test that picks some random position in the string to check if they are valid base64 characters.\r\n\t *\r\n\t * @method isBase64\r\n\t * @param {Object} data Data to be tested.\r\n\t * @return {Boolean} True if data is base64 encoded, false otherwise.\r\n\t */\r\n\tbase64.isBase64 = function(data) {\r\n\t\tif(typeof data !== \"string\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//Check if it has a base64 header\r\n\t\tif(data.startsWith(\"data:\")){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t//Check string data\r\n\t\tfor(var i = 0; i < data.length; i++) {\r\n\t\t\tif(!codetab.includes(data.charAt(i)))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove base64 header from data.\r\n\t * \r\n\t * Usefull for removing the heander from image, audio, video, etc.\r\n\t *\r\n\t * @method removeHeader\r\n\t * @param {String} base64\r\n\t * @return {String} base64\r\n\t */\r\n\tbase64.removeHeader = function(data) {\r\n\t\treturn data.slice(data.search(\";base64,\") + 8);\r\n\t};\r\n\r\n\t/**\r\n\t * Get the file format present in the base64 string.\r\n\t *\r\n\t * @method getFileFormat\r\n\t * @param  {String} data Base64 data.\r\n\t * @return {String} File format present in the JSON data.\r\n\t */\r\n\tbase64.getFileFormat = function(data) \t{\r\n\t\tvar start = data.indexOf(\"/\") + 1;\r\n\t\tvar end = data.indexOf(\";\");\r\n\t\t\r\n\t\treturn data.substr(start, end - start);\r\n\t};\r\n\r\n\t/**\r\n\t * Create base64 string from arraybuffer.\r\n\t *\r\n\t * @method fromArraybuffer\r\n\t * @param {Arraybuffer} arraybuffer\r\n\t * @return {String} base64\r\n\t */\r\n\tbase64.fromArraybuffer = function(arraybuffer) {\r\n\t\tvar bstr = \"\";\r\n\r\n\t\tvar view = new Uint8Array(arraybuffer);\r\n\t\tvar remainder = view.byteLength % 3;\r\n\t\tvar length = view.byteLength - remainder;\r\n\r\n\t\tvar a, b, c, d;\r\n\t\tvar chunk;\r\n\r\n\t\t//Chunks of 3 bytes for cycle\r\n\t\tfor(var i = 0; i < length; i += 3)\r\n\t\t{\r\n\t\t\tchunk = (view[i] << 16) | (view[i + 1] << 8) | view[i + 2];\r\n\r\n\t\t\ta = (chunk & 16515072) >> 18;\r\n\t\t\tb = (chunk & 258048) >> 12;\r\n\t\t\tc = (chunk & 4032) >> 6;\r\n\t\t\td = chunk & 63;\r\n\r\n\t\t\tbstr += codetab[a] + codetab[b] + codetab[c] + codetab[d]\r\n\t\t}\r\n\r\n\t\t//Remaining bytes\r\n\t\tif(remainder === 1)\r\n\t\t{\r\n\t\t\tchunk = view[length];\r\n\r\n\t\t\ta = (chunk & 252) >> 2;\r\n\t\t\tb = (chunk & 3) << 4;\r\n\r\n\t\t\tbstr += codetab[a] + codetab[b] + \"==\";\r\n\t\t}\r\n\t\telse if(remainder === 2)\r\n\t\t{\r\n\t\t\tchunk = (view[length] << 8) | view[length + 1];\r\n\r\n\t\t\ta = (chunk & 64512) >> 10;\r\n\t\t\tb = (chunk & 1008) >> 4;\r\n\t\t\tc = (chunk & 15) << 2;\r\n\r\n\t\t\tbstr += codetab[a] + codetab[b] + codetab[c] + \"=\";\r\n\t\t}\r\n\r\n\t\treturn bstr;\r\n\t};\r\n\r\n\t/**\r\n\t * Create base64 string from binary string.\r\n\t *\r\n\t * @method fromBinaryString\r\n\t * @param {String} str\r\n\t * @return {String} base64\r\n\t */\r\n\tbase64.fromBinaryString = function(str) {\r\n\t\tvar bstr = \"\";\r\n\t\tvar remainder = str.length % 3;\r\n\t\tvar length = str.length - remainder;\r\n\r\n\t\tvar a, b, c;\r\n\r\n\t\tfor(var i = 0; i < length; i += 3)\r\n\t\t{\r\n\t\t\ta = str.charCodeAt(i) & 0xff;\r\n\t\t\tb = str.charCodeAt(i + 1);\r\n\t\t\tc = str.charCodeAt(i + 2);\r\n\r\n\t\t\tbstr += codetab.charAt(a >> 2);\r\n\t\t\tbstr += codetab.charAt(((a & 0x3) << 4) | ((b & 0xF0) >> 4));\r\n\t\t\tbstr += codetab.charAt(((b & 0xF) << 2) | ((c & 0xC0) >> 6));\r\n\t\t\tbstr += codetab.charAt(c & 0x3F);\r\n\t\t}\r\n\t\t\r\n\t\tif(remainder === 1)\r\n\t\t{\r\n\t\t\ta = str.charCodeAt(i) & 0xff;\r\n\r\n\t\t\tbstr += codetab.charAt(a >> 2);\r\n\t\t\tbstr += codetab.charAt((a & 0x3) << 4);\r\n\t\t\tbstr += \"==\";\r\n\t\t}\r\n\t\telse if(remainder === 2)\r\n\t\t{\r\n\t\t\ta = str.charCodeAt(i) & 0xff;\r\n\t\t\tb = str.charCodeAt(i + 1);\r\n\r\n\t\t\tbstr += codetab.charAt(a >> 2);\r\n\t\t\tbstr += codetab.charAt(((a & 0x3) << 4) | ((b & 0xF0) >> 4));\r\n\t\t\tbstr += codetab.charAt((b & 0xF) << 2);\r\n\t\t\tbstr += \"=\";\r\n\t\t}\r\n\r\n\t\treturn bstr;\r\n\t};\r\n\r\n    return codec.base64 = base64;\r\n});\r\n"]}